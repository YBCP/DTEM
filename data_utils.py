# data_utils.py - CORREGIDO: Error "truth value of Series is ambiguous"

import pandas as pd
import numpy as np
import io
import re
import os
import streamlit as st
from datetime import datetime, timedelta, date  
from constants import REGISTROS_DATA, META_DATA
from sheets_utils import get_sheets_manager

def normalizar_csv(contenido, separador=';'):
    """Normaliza el contenido de un CSV para asegurar mismo n√∫mero de columnas."""
    lineas = contenido.split('\n')
    if not lineas:
        return contenido

    # Determinar el n√∫mero de columnas a partir de la primera l√≠nea
    columnas = lineas[0].count(separador) + 1

    lineas_normalizadas = []
    for linea in lineas:
        if not linea.strip():  # Ignorar l√≠neas vac√≠as
            continue

        campos = linea.split(separador)
        if len(campos) < columnas:
            # A√±adir campos vac√≠os faltantes
            linea = linea + separador * (columnas - len(campos))
        elif len(campos) > columnas:
            # Recortar campos excedentes
            linea = separador.join(campos[:columnas])

        lineas_normalizadas.append(linea)

    return '\n'.join(lineas_normalizadas)

def limpiar_valor(valor):
    """Limpia un valor de entrada de posibles errores."""
    if pd.isna(valor) or valor is None:
        return ''

    # Convertir a string
    valor = str(valor)

    # Eliminar caracteres problem√°ticos
    valor = re.sub(r'[\000-\010]|[\013-\014]|[\016-\037]', '', valor)

    return valor.strip()

def cargar_datos():
    """
    CORREGIDO: Carga los datos con verificaci√≥n adicional de Metas.
    """
    try:
        # Importar el sistema de respaldo ultra seguro
        from backup_utils import cargar_datos_con_respaldo
        
        # Usar el sistema ultra seguro
        registros_df, meta_df = cargar_datos_con_respaldo()
        
        # ‚úÖ VERIFICACI√ìN ADICIONAL: Que Metas no se haya corrompido
        if meta_df.empty:
            st.warning("‚ö†Ô∏è Tabla Metas vac√≠a - intentando recuperar...")
            try:
                sheets_manager = get_sheets_manager()
                meta_df = sheets_manager.leer_hoja("Metas")
                if meta_df.empty:
                    # Crear estructura b√°sica de metas como √∫ltimo recurso
                    meta_df = crear_estructura_metas_inicial()
                    sheets_manager.escribir_hoja(meta_df, "Metas", limpiar_hoja=True)
                    st.info("üîÑ Tabla Metas recreada con estructura b√°sica")
            except Exception as meta_error:
                st.error(f"‚ùå Error recuperando Metas: {meta_error}")
                meta_df = crear_estructura_metas_inicial()
        
        return registros_df, meta_df
        
    except ImportError:
        # Fallback si no est√° disponible el sistema de respaldo
        st.warning("‚ö†Ô∏è Sistema de respaldo no disponible, usando m√©todo b√°sico")
        return cargar_datos_basico()
    
    except Exception as e:
        st.error(f"‚ùå Error cr√≠tico en carga de datos: {str(e)}")
        
        # √öltimo recurso: intentar cargar datos b√°sicos
        try:
            return cargar_datos_basico()
        except:
            # Si todo falla, crear estructura m√≠nima
            st.error("‚ùå Creando estructura m√≠nima de emergencia")
            return crear_estructura_emergencia()

def cargar_datos_basico():
    """
    Funci√≥n de respaldo b√°sica para cargar datos cuando el sistema ultra seguro no est√° disponible.
    """
    try:
        sheets_manager = get_sheets_manager()
        
        # Cargar registros
        registros_df = sheets_manager.leer_hoja("Registros")
        
        if registros_df.empty:
            st.warning("‚ö†Ô∏è Tabla de registros vac√≠a - creando estructura b√°sica")
            registros_df = crear_estructura_registros_basica()
        else:
            st.success(f"‚úÖ {len(registros_df)} registros cargados (modo b√°sico)")
        
        # Cargar metas
        try:
            meta_df = sheets_manager.leer_hoja("Metas")
            if meta_df.empty:
                meta_df = crear_estructura_metas_basica()
        except:
            meta_df = crear_estructura_metas_basica()
        
        return registros_df, meta_df
        
    except Exception as e:
        st.error(f"‚ùå Error en carga b√°sica: {str(e)}")
        return crear_estructura_emergencia()

def crear_estructura_emergencia():
    """
    Crea estructura m√≠nima de emergencia cuando todo lo dem√°s falla.
    """
    st.warning("üö® Creando estructura de emergencia")
    
    # Estructura m√≠nima de registros
    columnas_minimas = [
        'Cod', 'Entidad', 'TipoDato', 'Nivel Informaci√≥n ', 'Mes Proyectado',
        'Acuerdo de compromiso', 'An√°lisis y cronograma', 'Est√°ndares', 'Publicaci√≥n',
        'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'Plazo de cronograma',
        'Plazo de oficio de cierre', 'Fecha de oficio de cierre', 'Estado', 'Observaci√≥n',
        'Funcionario', 'Frecuencia actualizacion '
    ]
    
    registros_df = pd.DataFrame(columns=columnas_minimas)
    
    # Estructura m√≠nima de metas
    meta_df = pd.DataFrame({
        0: ["15/01/2025", "31/01/2025", "15/02/2025"],
        1: [0, 0, 0], 2: [0, 0, 0], 3: [0, 0, 0], 4: [0, 0, 0], 5: [0, 0, 0],
        6: [0, 0, 0], 7: [0, 0, 0], 8: [0, 0, 0], 9: [0, 0, 0]
    })
    
    return registros_df, meta_df

def crear_estructura_registros_basica():
    """Crea estructura b√°sica de registros"""
    columnas_basicas = [
        'Cod', 'Funcionario', 'Entidad', 'Nivel Informaci√≥n ', 'Frecuencia actualizacion ',
        'TipoDato', 'Mes Proyectado', 'Actas de acercamiento y manifestaci√≥n de inter√©s',
        'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
        'Acuerdo de compromiso', 'Gestion acceso a los datos y documentos requeridos ',
        'An√°lisis de informaci√≥n', 'Cronograma Concertado', 'An√°lisis y cronograma (fecha programada)',
        'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'An√°lisis y cronograma',
        'Seguimiento a los acuerdos', 
        'Registro (completo)', 'ET (completo)', 'CO (completo)', 'DD (completo)', 'REC (completo)', 'SERVICIO (completo)',
        'Est√°ndares (fecha programada)', 'Est√°ndares', 'Resultados de orientaci√≥n t√©cnica',
        'Verificaci√≥n del servicio web geogr√°fico', 'Verificar Aprobar Resultados',
        'Revisar y validar los datos cargados en la base de datos',
        'Aprobaci√≥n resultados obtenidos en la rientaci√≥n', 'Disponer datos tem√°ticos',
        'Fecha de publicaci√≥n programada', 'Publicaci√≥n', 'Cat√°logo de recursos geogr√°ficos',
        'Oficios de cierre', 'Fecha de oficio de cierre', 'Plazo de cronograma',
        'Plazo de oficio de cierre', 'Estado', 'Observaci√≥n'
    ]
    
    return pd.DataFrame(columns=columnas_basicas)

def crear_estructura_metas_basica():
    """Crea estructura b√°sica de metas"""
    return pd.DataFrame({
        0: ["15/01/2025", "31/01/2025", "15/02/2025"],
        1: [0, 0, 0], 2: [0, 0, 0], 3: [0, 0, 0], 4: [0, 0, 0], 5: [0, 0, 0],
        6: [0, 0, 0], 7: [0, 0, 0], 8: [0, 0, 0], 9: [0, 0, 0]
    })

def crear_estructura_metas_inicial():
    """Crea una estructura inicial para las metas"""
    return pd.DataFrame({
        0: ["15/01/2025", "31/01/2025", "15/02/2025"],
        1: [0, 0, 0],  # Acuerdo nuevos
        2: [0, 0, 0],  # An√°lisis nuevos
        3: [0, 0, 0],  # Est√°ndares nuevos
        4: [0, 0, 0],  # Publicaci√≥n nuevos
        5: [0, 0, 0],  # Separador
        6: [0, 0, 0],  # Acuerdo actualizar
        7: [0, 0, 0],  # An√°lisis actualizar
        8: [0, 0, 0],  # Est√°ndares actualizar
        9: [0, 0, 0],  # Publicaci√≥n actualizar
    })

def procesar_fecha(fecha_str):
    """
    CORRECCI√ìN CR√çTICA: Procesa una fecha de manera segura manejando NaT.
    SIEMPRE devuelve datetime, NUNCA date
    """
    if pd.isna(fecha_str) or fecha_str == '' or fecha_str is None:
        return None

    # Si es un objeto datetime o Timestamp, retornarlo directamente
    if isinstance(fecha_str, (pd.Timestamp, datetime)):
        if pd.isna(fecha_str):
            return None
        # ASEGURAR que es datetime
        if isinstance(fecha_str, pd.Timestamp):
            return fecha_str.to_pydatetime()
        return fecha_str
    
    # CORRECCI√ìN CR√çTICA: Si es date, convertir SIEMPRE a datetime
    if isinstance(fecha_str, date):
        return datetime.combine(fecha_str, datetime.min.time())

    # Si es un string, procesarlo
    try:
        fecha_str = re.sub(r'[^\d/\-]', '', str(fecha_str).strip())
        formatos = ['%d/%m/%Y', '%Y-%m-%d', '%d-%m-%Y', '%m/%d/%Y']

        for formato in formatos:
            try:
                fecha = pd.to_datetime(fecha_str, format=formato)
                if pd.notna(fecha):
                    # CR√çTICO: Convertir a datetime puro si es Timestamp
                    if hasattr(fecha, 'to_pydatetime'):
                        return fecha.to_pydatetime()
                    return fecha
            except:
                continue
        return None
    except Exception:
        return None

def es_fecha_valida(valor):
    """Verifica si un valor es una fecha v√°lida."""
    try:
        fecha = procesar_fecha(valor)
        return fecha is not None and pd.notna(fecha)
    except Exception:
        return False

def formatear_fecha(fecha_str):
    """Formatea una fecha en formato DD/MM/YYYY manejando NaT."""
    try:
        fecha = procesar_fecha(fecha_str)
        if fecha is not None and pd.notna(fecha):
            return fecha.strftime('%d/%m/%Y')
        return ""
    except Exception:
        # Si hay cualquier error, devuelve cadena vac√≠a
        return ""

def verificar_completado_por_fecha(fecha_programada, fecha_completado=None):
    """
    CORRECCI√ìN CR√çTICA: Verifica si una tarea est√° completada basada en fechas.
    Manejo seguro de comparaciones datetime
    """
    if fecha_completado is not None and pd.notna(fecha_completado):
        return True

    fecha_actual = datetime.now()  # SIEMPRE datetime
    fecha_prog = procesar_fecha(fecha_programada)  # SIEMPRE devuelve datetime o None

    if fecha_prog is not None and pd.notna(fecha_prog):
        # Ya no necesitamos conversi√≥n porque procesar_fecha() siempre devuelve datetime
        if fecha_prog <= fecha_actual:
            return True

    return False

def calcular_porcentaje_avance(registro):
    """
    MODIFICADO: Calcula el porcentaje de avance de un registro basado en los campos de completitud.
    NUEVA REGLA: Si tiene fecha de oficio de cierre, autom√°ticamente 100% de avance.

    Ponderaci√≥n (cuando no hay fecha de cierre):
    - Acuerdo de compromiso: 20%
    - An√°lisis y cronograma (fecha real): 20%
    - Est√°ndares (fecha real): 30%
    - Publicaci√≥n (fecha real): 25%
    - Fecha de oficio de cierre: 5%
    """
    try:
        # NUEVA REGLA: Si tiene fecha de oficio de cierre, autom√°ticamente 100%
        if ('Fecha de oficio de cierre' in registro and 
            registro['Fecha de oficio de cierre'] and 
            pd.notna(registro['Fecha de oficio de cierre']) and
            str(registro['Fecha de oficio de cierre']).strip() != ''):
            return 100

        # Si no hay fecha de cierre, calcular normalmente
        # Inicializar el avance
        avance = 0

        # Verificar el acuerdo de compromiso (20%)
        if 'Acuerdo de compromiso' in registro and str(registro['Acuerdo de compromiso']).strip().upper() in ['SI',
                                                                                                              'S√ç', 'S',
                                                                                                              'YES',
                                                                                                              'Y',
                                                                                                              'COMPLETO']:
            avance += 20

        # Verificar an√°lisis y cronograma - VERIFICADO: basado en la fecha (20%)
        if ('An√°lisis y cronograma' in registro and 
            registro['An√°lisis y cronograma'] and 
            pd.notna(registro['An√°lisis y cronograma']) and
            str(registro['An√°lisis y cronograma']).strip() != ''):
            avance += 20

        # Verificar est√°ndares - basado en la fecha (30%)
        if ('Est√°ndares' in registro and 
            registro['Est√°ndares'] and 
            pd.notna(registro['Est√°ndares']) and
            str(registro['Est√°ndares']).strip() != ''):
            avance += 30

        # Verificar publicaci√≥n - VERIFICADO: basado en la fecha (25%)
        if ('Publicaci√≥n' in registro and 
            registro['Publicaci√≥n'] and 
            pd.notna(registro['Publicaci√≥n']) and
            str(registro['Publicaci√≥n']).strip() != ''):
            avance += 25

        # Nota: No sumamos los 5% del oficio de cierre aqu√≠ porque si lleg√°ramos a este punto
        # significa que no hay fecha de cierre, por lo que el m√°ximo ser√≠a 95%

        return avance
    except Exception as e:
        # En caso de error, retornar 0
        st.warning(f"Error al calcular porcentaje de avance: {e}")
        return 0

def procesar_metas(meta_df):
    """Procesa las metas a partir del DataFrame de metas."""
    try:
        # La estructura de las metas es compleja, vamos a procesarla
        # Asumiendo que las filas 3 en adelante contienen las fechas y metas
        fechas = []
        metas_nuevas = {}
        metas_actualizar = {}

        # Inicializar listas para cada hito
        for hito in ['Acuerdo de compromiso', 'An√°lisis y cronograma', 'Est√°ndares', 'Publicaci√≥n']:
            metas_nuevas[hito] = []
            metas_actualizar[hito] = []

        # Procesar cada fila (desde la fila 3 que contiene las fechas y valores)
        for i in range(len(meta_df)):
            try:
                fila = meta_df.iloc[i]

                # La primera columna contiene la fecha
                fecha = procesar_fecha(fila[0])
                if fecha is not None:
                    fechas.append(fecha)

                    # Columnas 1-4 son para registros nuevos (asegurar que existan)
                    metas_nuevas['Acuerdo de compromiso'].append(
                        pd.to_numeric(fila[1] if len(fila) > 1 else 0, errors='coerce') or 0)
                    metas_nuevas['An√°lisis y cronograma'].append(
                        pd.to_numeric(fila[2] if len(fila) > 2 else 0, errors='coerce') or 0)
                    metas_nuevas['Est√°ndares'].append(
                        pd.to_numeric(fila[3] if len(fila) > 3 else 0, errors='coerce') or 0)
                    metas_nuevas['Publicaci√≥n'].append(
                        pd.to_numeric(fila[4] if len(fila) > 4 else 0, errors='coerce') or 0)

                    # Columnas 6-9 son para registros a actualizar (asegurar que existan)
                    metas_actualizar['Acuerdo de compromiso'].append(
                        pd.to_numeric(fila[6] if len(fila) > 6 else 0, errors='coerce') or 0)
                    metas_actualizar['An√°lisis y cronograma'].append(
                        pd.to_numeric(fila[7] if len(fila) > 7 else 0, errors='coerce') or 0)
                    metas_actualizar['Est√°ndares'].append(
                        pd.to_numeric(fila[8] if len(fila) > 8 else 0, errors='coerce') or 0)
                    metas_actualizar['Publicaci√≥n'].append(
                        pd.to_numeric(fila[9] if len(fila) > 9 else 0, errors='coerce') or 0)
            except Exception as e:
                st.warning(f"Error al procesar fila {i} de metas: {e}")
                continue

        # Si no hay fechas, mostrar un error
        if not fechas:
            st.warning("No se pudieron procesar las fechas de las metas, usando datos por defecto")
            # Crear un DataFrame de ejemplo como respaldo
            fechas = [datetime.now()]
            for hito in metas_nuevas:
                metas_nuevas[hito] = [0]
                metas_actualizar[hito] = [0]

        # Convertir a DataFrames
        metas_nuevas_df = pd.DataFrame(metas_nuevas, index=fechas)
        metas_actualizar_df = pd.DataFrame(metas_actualizar, index=fechas)

        return metas_nuevas_df, metas_actualizar_df
    except Exception as e:
        st.error(f"Error al procesar metas: {e}")
        # Crear DataFrames vac√≠os como respaldo
        fechas = [datetime.now()]
        metas_nuevas = {'Acuerdo de compromiso': [0], 'An√°lisis y cronograma': [0], 'Est√°ndares': [0],
                        'Publicaci√≥n': [0]}
        metas_actualizar = {'Acuerdo de compromiso': [0], 'An√°lisis y cronograma': [0], 'Est√°ndares': [0],
                            'Publicaci√≥n': [0]}

        metas_nuevas_df = pd.DataFrame(metas_nuevas, index=fechas)
        metas_actualizar_df = pd.DataFrame(metas_actualizar, index=fechas)

        return metas_nuevas_df, metas_actualizar_df

def verificar_estado_fechas(row):
    """
    CORRECCI√ìN CR√çTICA: Verifica si las fechas est√°n vencidas o pr√≥ximas a vencer.
    Comparaciones datetime seguras
    """
    fecha_actual = datetime.now()  # SIEMPRE datetime
    estado = "normal"

    campos_fecha = [
        'An√°lisis y cronograma (fecha programada)',
        'Est√°ndares (fecha programada)',
        'Fecha de publicaci√≥n programada'
    ]

    for campo in campos_fecha:
        if campo in row and pd.notna(row[campo]) and str(row[campo]).strip() != '':
            fecha = procesar_fecha(row[campo])  # SIEMPRE devuelve datetime o None
            if fecha is not None and pd.notna(fecha):
                # Ya no necesitamos conversi√≥n manual
                if fecha < fecha_actual:
                    return "vencido"
                if fecha <= fecha_actual + timedelta(days=30):
                    estado = "proximo"

    return estado

def validar_campos_fecha(df, campos_fecha=['An√°lisis y cronograma', 'Est√°ndares', 'Publicaci√≥n']):
    """
    Valida que los campos espec√≠ficos contengan solo fechas v√°lidas.
    Si no son fechas v√°lidas, los convierte a fechas o los deja vac√≠os.
    """
    df_validado = df.copy()

    for campo in campos_fecha:
        if campo in df_validado.columns:
            df_validado[campo] = df_validado[campo].apply(
                lambda x: formatear_fecha(x) if es_fecha_valida(x) else ""
            )

    return df_validado

def guardar_datos_editados(df, crear_backup=True):
    """
    CORREGIDO: Guarda los datos editados con verificaci√≥n
    """
    try:
        # CORRECCI√ìN: Verificar correctamente si es DataFrame de registros
        if ('Cod' not in df.columns) or ('Entidad' not in df.columns):
            return False, "‚ùå Error: Solo se pueden guardar datos de registros, no metas"
        
        # Validar que los campos de fechas sean fechas v√°lidas
        df_validado = validar_campos_fecha(df)
        
        sheets_manager = get_sheets_manager()
        
        # ‚úÖ PROTECCI√ìN METAS: Crear backup de Metas ANTES de cualquier operaci√≥n
        metas_backup = None
        try:
            metas_backup = sheets_manager.leer_hoja("Metas")
            # CORRECCI√ìN: Usar .empty correctamente
            if metas_backup.empty:
                metas_backup = None
        except:
            metas_backup = None
        
        # NUEVO: Crear respaldo autom√°tico antes de guardar
        if crear_backup:
            try:
                from backup_utils import crear_respaldo_automatico
                respaldo_exitoso = crear_respaldo_automatico(df_validado)
                if respaldo_exitoso:
                    st.info("üíæ Respaldo autom√°tico creado antes de guardar")
                else:
                    st.warning("‚ö†Ô∏è No se pudo crear respaldo autom√°tico, pero continuando...")
            except ImportError:
                st.warning("‚ö†Ô∏è Sistema de respaldo no disponible")
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Error en respaldo autom√°tico: {e}, pero continuando...")
        
        # ‚úÖ GUARDAR SOLO EN REGISTROS (nunca tocar Metas)
        st.info("üíæ Guardando en hoja 'Registros' de Google Sheets...")
        
        exito = sheets_manager.escribir_hoja(df_validado, "Registros", limpiar_hoja=True)
        
        # ‚úÖ VERIFICACI√ìN Y RESTAURACI√ìN AUTOM√ÅTICA DE METAS
        if metas_backup is not None:
            try:
                # Verificar si Metas se mantuvo intacta
                metas_actual = sheets_manager.leer_hoja("Metas")
                # CORRECCI√ìN: Usar .empty correctamente
                if metas_actual.empty:
                    # ¬°EMERGENCIA! Metas se borr√≥, restaurar inmediatamente
                    st.warning("üö® ALERTA: Tabla Metas se borr√≥ - Restaurando autom√°ticamente...")
                    restaurar_exito = sheets_manager.escribir_hoja(metas_backup, "Metas", limpiar_hoja=True)
                    if restaurar_exito:
                        st.success("‚úÖ Tabla Metas restaurada exitosamente")
                    else:
                        st.error("‚ùå ERROR CR√çTICO: No se pudo restaurar tabla Metas")
            except Exception as verificacion_error:
                st.error(f"‚ùå Error verificando/restaurando Metas: {verificacion_error}")
        
        if exito:
            # NUEVO: Verificar que los datos se guardaron correctamente
            try:
                df_verificacion = sheets_manager.leer_hoja("Registros")
                # CORRECCI√ìN: Comparar longitudes correctamente
                datos_guardados_ok = (not df_verificacion.empty) & (len(df_verificacion) >= len(df_validado) * 0.9)
                
                if datos_guardados_ok:
                    st.success("‚úÖ Guardado verificado en Google Sheets - Hoja 'Registros'")
                    return True, "‚úÖ Datos guardados y verificados exitosamente en Google Sheets."
                else:
                    st.warning("‚ö†Ô∏è Los datos se guardaron pero la verificaci√≥n mostr√≥ inconsistencias")
                    return True, "‚ö†Ô∏è Datos guardados pero con advertencias. Verifique el contenido."
            except Exception as e:
                st.warning(f"‚ö†Ô∏è Error en verificaci√≥n post-guardado: {e}")
                return True, "‚úÖ Datos guardados en Google Sheets (verificaci√≥n fall√≥)."
        else:
            return False, "‚ùå Error al guardar datos en Google Sheets."
            
    except Exception as e:
        error_msg = f"‚ùå Error al guardar datos: {str(e)}"
        st.error(error_msg)
        return False, error_msg

def guardar_datos_editados_rapido(df, numero_fila=None):
    """
    Versi√≥n r√°pida para guardar cambios individuales sin reescribir toda la hoja.
    INCLUYE verificaciones de seguridad b√°sicas y protecci√≥n de Metas.
    """
    try:
        # CORRECCI√ìN: Verificar correctamente si es DataFrame de registros
        if ('Cod' not in df.columns) or ('Entidad' not in df.columns):
            return False, "‚ùå Error: Solo se pueden guardar datos de registros"
        
        sheets_manager = get_sheets_manager()
        
        # ‚úÖ PROTECCI√ìN METAS: Backup r√°pido de Metas
        metas_backup = None
        try:
            metas_backup = sheets_manager.leer_hoja("Metas")
            # CORRECCI√ìN: Usar .empty correctamente
            if metas_backup.empty:
                metas_backup = None
        except:
            metas_backup = None
        
        # NUEVO: Verificaci√≥n b√°sica antes de guardar
        if df.empty:
            st.error("‚ùå No se puede guardar: DataFrame vac√≠o")
            return False, "‚ùå Error: Datos vac√≠os"
        
        if numero_fila is not None:
            # Actualizar solo una fila espec√≠fica
            exito = sheets_manager.actualizar_fila(df, numero_fila, "Registros")
        else:
            # Guardar todo el DataFrame
            exito = sheets_manager.escribir_hoja(df, "Registros", limpiar_hoja=True)
        
        # ‚úÖ VERIFICACI√ìN R√ÅPIDA DE METAS
        if metas_backup is not None:
            try:
                metas_actual = sheets_manager.leer_hoja("Metas")
                # CORRECCI√ìN: Usar .empty correctamente
                if metas_actual.empty:
                    # Restaurar Metas si se borr√≥
                    sheets_manager.escribir_hoja(metas_backup, "Metas", limpiar_hoja=True)
                    st.info("üîÑ Tabla Metas restaurada autom√°ticamente")
            except:
                pass  # En modo r√°pido, no mostrar errores de verificaci√≥n
        
        if exito:
            return True, "‚úÖ Datos guardados."
        else:
            return False, "‚ùå Error al guardar."
            
    except Exception as e:
        return False, f"‚ùå Error: {str(e)}"

def contar_registros_completados_por_fecha(df, columna_fecha_programada, columna_fecha_completado):
    """
    CORRECCI√ìN CR√çTICA: Cuenta los registros que tienen una fecha de completado o cuya fecha programada ya pas√≥.
    Uso correcto de procesar_fecha()
    """
    count = 0
    
    for _, row in df.iterrows():
        try:
            if columna_fecha_programada in row and pd.notna(row[columna_fecha_programada]) and str(row[columna_fecha_programada]).strip() != '':
                fecha_programada = row[columna_fecha_programada]

                # Verificar si hay una fecha de completado V√ÅLIDA
                fecha_completado = None
                if columna_fecha_completado in row:
                    if es_fecha_valida(row[columna_fecha_completado]):
                        fecha_completado = procesar_fecha(row[columna_fecha_completado])  # datetime o None

                if verificar_completado_por_fecha(fecha_programada, fecha_completado):
                    count += 1
        except Exception as e:
            # Ignorar errores en filas individuales y continuar
            continue

    return count

def verificar_integridad_metas():
    """
    NUEVA FUNCI√ìN: Verifica espec√≠ficamente la integridad de la tabla Metas
    """
    try:
        sheets_manager = get_sheets_manager()
        metas_df = sheets_manager.leer_hoja("Metas")
        
        # CORRECCI√ìN: Usar .empty correctamente
        if metas_df.empty:
            return False, "Tabla Metas est√° vac√≠a"
        
        # Verificar estructura b√°sica de metas
        if len(metas_df.columns) < 5:
            return False, "Tabla Metas tiene muy pocas columnas"
        
        if len(metas_df) < 3:
            return False, "Tabla Metas tiene muy pocas filas"
        
        return True, f"Tabla Metas OK: {len(metas_df)} filas, {len(metas_df.columns)} columnas"
        
    except Exception as e:
        return False, f"Error verificando Metas: {str(e)}"

def proteger_metas_durante_operacion(funcion_operacion, *args, **kwargs):
    """
    NUEVA FUNCI√ìN: Wrapper para proteger Metas durante cualquier operaci√≥n cr√≠tica
    """
    try:
        sheets_manager = get_sheets_manager()
        
        # Crear backup de Metas antes de la operaci√≥n
        metas_backup = None
        try:
            metas_backup = sheets_manager.leer_hoja("Metas")
            # CORRECCI√ìN: Usar .empty correctamente
            if metas_backup.empty:
                metas_backup = None
        except:
            metas_backup = None
        
        # Ejecutar la operaci√≥n
        resultado = funcion_operacion(*args, **kwargs)
        
        # Verificar Metas despu√©s de la operaci√≥n
        if metas_backup is not None:
            try:
                metas_actual = sheets_manager.leer_hoja("Metas")
                # CORRECCI√ìN: Usar .empty correctamente
                if metas_actual.empty:
                    # Restaurar Metas si se borr√≥
                    sheets_manager.escribir_hoja(metas_backup, "Metas", limpiar_hoja=True)
                    st.warning("üîÑ Tabla Metas restaurada autom√°ticamente despu√©s de operaci√≥n")
            except Exception as restore_error:
                st.error(f"‚ùå Error restaurando Metas: {restore_error}")
        
        return resultado
        
    except Exception as e:
        st.error(f"‚ùå Error en operaci√≥n protegida: {str(e)}")
        return None

def limpiar_y_validar_registros(df):
    """
    NUEVA FUNCI√ìN: Limpia y valida registros antes de cualquier operaci√≥n
    """
    try:
        # CORRECCI√ìN: Verificar que es un DataFrame de registros
        if ('Cod' not in df.columns) or ('Entidad' not in df.columns):
            raise ValueError("DataFrame no contiene columnas de registros v√°lidas")
        
        # Limpiar valores
        df_limpio = df.copy()
        for col in df_limpio.columns:
            df_limpio[col] = df_limpio[col].apply(
                lambda x: '' if pd.isna(x) or x is None or str(x).strip() in ['nan', 'None'] else str(x).strip()
            )
        
        # CORRECCI√ìN: Validar que hay al menos un registro v√°lido usando &
        registros_validos = df_limpio[
            (df_limpio['Cod'].notna()) & 
            (df_limpio['Cod'].astype(str).str.strip() != '') &
            (df_limpio['Entidad'].notna()) & 
            (df_limpio['Entidad'].astype(str).str.strip() != '')
        ]
        
        if registros_validos.empty:
            raise ValueError("No hay registros v√°lidos despu√©s de la limpieza")
        
        return df_limpio
        
    except Exception as e:
        st.error(f"‚ùå Error limpiando registros: {str(e)}")
        raise e

def sincronizar_con_google_sheets(df, hoja="Registros", crear_backup=True):
    """
    NUEVA FUNCI√ìN: Sincronizaci√≥n segura con Google Sheets con protecci√≥n de Metas
    """
    try:
        # CORRECCI√ìN: Validar que solo son registros
        if hoja == "Registros" and (('Cod' not in df.columns) or ('Entidad' not in df.columns)):
            return False, "‚ùå Error: Solo se pueden sincronizar datos de registros"
        
        # Limpiar y validar datos
        df_validado = limpiar_y_validar_registros(df)
        
        # Usar protecci√≥n de Metas
        def operacion_sincronizacion():
            sheets_manager = get_sheets_manager()
            return sheets_manager.escribir_hoja(df_validado, hoja, limpiar_hoja=True)
        
        # Ejecutar con protecci√≥n
        exito = proteger_metas_durante_operacion(operacion_sincronizacion)
        
        if exito:
            # Crear respaldo si se solicita
            if crear_backup and hoja == "Registros":
                try:
                    from backup_utils import crear_respaldo_automatico
                    crear_respaldo_automatico(df_validado)
                except:
                    pass  # No fallar si el respaldo falla
            
            return True, f"‚úÖ Sincronizaci√≥n exitosa con {hoja}"
        else:
            return False, f"‚ùå Error en sincronizaci√≥n con {hoja}"
            
    except Exception as e:
        return False, f"‚ùå Error en sincronizaci√≥n: {str(e)}"

def obtener_estado_sistema():
    """
    NUEVA FUNCI√ìN: Obtiene el estado completo del sistema de datos
    """
    try:
        sheets_manager = get_sheets_manager()
        
        estado = {
            'registros': {'existe': False, 'filas': 0, 'columnas': 0, 'valido': False},
            'metas': {'existe': False, 'filas': 0, 'columnas': 0, 'valido': False},
            'respaldo': {'existe': False, 'filas': 0, 'valido': False},
            'hojas_disponibles': [],
            'errores': []
        }
        
        # Verificar hojas disponibles
        try:
            estado['hojas_disponibles'] = sheets_manager.listar_hojas()
        except Exception as e:
            estado['errores'].append(f"Error listando hojas: {str(e)}")
        
        # Verificar Registros
        try:
            registros_df = sheets_manager.leer_hoja("Registros")
            estado['registros']['existe'] = True
            estado['registros']['filas'] = len(registros_df)
            estado['registros']['columnas'] = len(registros_df.columns)
            
            # CORRECCI√ìN: Validar registros usando &
            if ('Cod' in registros_df.columns) & ('Entidad' in registros_df.columns):
                registros_validos = registros_df[
                    (registros_df['Cod'].notna()) & 
                    (registros_df['Cod'].astype(str).str.strip() != '') &
                    (registros_df['Entidad'].notna()) & 
                    (registros_df['Entidad'].astype(str).str.strip() != '')
                ]
                estado['registros']['valido'] = len(registros_validos) > 0
        except Exception as e:
            estado['errores'].append(f"Error verificando Registros: {str(e)}")
        
        # Verificar Metas
        try:
            metas_df = sheets_manager.leer_hoja("Metas")
            estado['metas']['existe'] = True
            estado['metas']['filas'] = len(metas_df)
            estado['metas']['columnas'] = len(metas_df.columns)
            # CORRECCI√ìN: Usar & en lugar de and
            estado['metas']['valido'] = (len(metas_df) > 0) & (len(metas_df.columns) >= 5)
        except Exception as e:
            estado['errores'].append(f"Error verificando Metas: {str(e)}")
        
        # Verificar Respaldo
        try:
            respaldo_df = sheets_manager.leer_hoja("Respaldo_Registros")
            estado['respaldo']['existe'] = True
            estado['respaldo']['filas'] = len(respaldo_df)
            estado['respaldo']['valido'] = len(respaldo_df) > 0
        except Exception as e:
            estado['errores'].append(f"Error verificando Respaldo: {str(e)}")
        
        return estado
        
    except Exception as e:
        return {
            'error_critico': str(e),
            'registros': {'existe': False, 'valido': False},
            'metas': {'existe': False, 'valido': False},
            'respaldo': {'existe': False, 'valido': False}
        }
