# auth_utils.py - Sistema de Autenticaci√≥n Mejorado

import streamlit as st
import hashlib
from datetime import datetime, timedelta

def verificar_autenticacion():
    """Verifica si el usuario est√° autenticado como admin"""
    return st.session_state.get('autenticado', False)

def autenticar_usuario(username, password):
    """Autentica al usuario con credenciales admin"""
    # Credenciales hardcodeadas para admin
    ADMIN_USERNAME = "admin"
    ADMIN_PASSWORD = "qwerty"
    
    if username == ADMIN_USERNAME and password == ADMIN_PASSWORD:
        st.session_state.autenticado = True
        st.session_state.usuario = username
        st.session_state.fecha_login = datetime.now()
        return True
    return False

def cerrar_sesion():
    """Cierra la sesi√≥n del usuario"""
    st.session_state.autenticado = False
    if 'usuario' in st.session_state:
        del st.session_state.usuario
    if 'fecha_login' in st.session_state:
        del st.session_state.fecha_login

def verificar_sesion_activa():
    """Verifica si la sesi√≥n sigue siendo v√°lida (opcional: timeout de sesi√≥n)"""
    if not verificar_autenticacion():
        return False
    
    # Opcional: Verificar timeout de sesi√≥n (ejemplo: 8 horas)
    if 'fecha_login' in st.session_state:
        fecha_login = st.session_state.fecha_login
        tiempo_transcurrido = datetime.now() - fecha_login
        
        # Si han pasado m√°s de 8 horas, cerrar sesi√≥n autom√°ticamente
        if tiempo_transcurrido > timedelta(hours=8):
            cerrar_sesion()
            return False
    
    return True

def mostrar_login():
    """Muestra el formulario de login para funciones administrativas"""
    with st.sidebar.expander("üîê Acceso Administrativo", expanded=not verificar_autenticacion()):
        
        if verificar_autenticacion():
            # Usuario ya autenticado - mostrar informaci√≥n y opci√≥n de logout
            st.success(f"‚úÖ Sesi√≥n activa: {st.session_state.get('usuario', 'admin')}")
            
            # Mostrar tiempo de sesi√≥n
            if 'fecha_login' in st.session_state:
                tiempo_sesion = datetime.now() - st.session_state.fecha_login
                horas = int(tiempo_sesion.total_seconds() // 3600)
                minutos = int((tiempo_sesion.total_seconds() % 3600) // 60)
                st.info(f"‚è±Ô∏è Sesi√≥n activa: {horas}h {minutos}m")
            
            # Privilegios del usuario
            st.markdown("""
            **üîì Privilegios habilitados:**
            - ‚úèÔ∏è Edici√≥n de registros
            - üíæ Guardado en Google Sheets
            - üîÑ Actualizaci√≥n de plazos
            - ‚öôÔ∏è Aplicaci√≥n de validaciones
            """)
            
            # Bot√≥n de logout
            if st.button("üö™ Cerrar Sesi√≥n", type="secondary", use_container_width=True):
                cerrar_sesion()
                st.success("‚úÖ Sesi√≥n cerrada exitosamente")
                st.rerun()
                
        else:
            # Usuario no autenticado - mostrar formulario de login
            st.markdown("### üîê Iniciar Sesi√≥n")
            st.info("üîí Se requiere autenticaci√≥n para editar registros")
            
            with st.form("login_form"):
                username = st.text_input("üë§ Usuario", placeholder="Ingrese usuario")
                password = st.text_input("üîë Contrase√±a", type="password", placeholder="Ingrese contrase√±a")
                submit_button = st.form_submit_button("üîì Iniciar Sesi√≥n", type="primary", use_container_width=True)
                
                if submit_button:
                    if not username or not password:
                        st.error("‚ùå Por favor complete todos los campos")
                    elif autenticar_usuario(username, password):
                        st.success("‚úÖ Autenticaci√≥n exitosa")
                        st.balloons()
                        st.rerun()
                    else:
                        st.error("‚ùå Credenciales incorrectas")
                        st.warning("üí° Verifique usuario y contrase√±a")
            
            # Informaci√≥n sobre credenciales (solo para desarrollo)
            with st.expander("‚ÑπÔ∏è Informaci√≥n de Acceso"):
                st.markdown("""
                **Credenciales de prueba:**
                - Usuario: `admin`
                - Contrase√±a: `qwerty`
                
                **‚ö†Ô∏è Nota de seguridad:**
                En producci√≥n, estas credenciales deben ser cambiadas
                y almacenadas de forma segura.
                """)

def mostrar_estado_autenticacion():
    """Muestra el estado actual de autenticaci√≥n en la sidebar"""
    if verificar_sesion_activa():
        st.sidebar.success(f"üîì Conectado: {st.session_state.get('usuario', 'admin')}")
        
        # Mostrar funcionalidades disponibles
        st.sidebar.markdown("""
        **‚úÖ Funcionalidades activas:**
        - Edici√≥n de registros
        - Guardado autom√°tico
        - Validaciones avanzadas
        """)
        
    else:
        st.sidebar.warning("üîí No autenticado")
        st.sidebar.markdown("""
        **‚ö†Ô∏è Funcionalidades limitadas:**
        - Solo visualizaci√≥n
        - Sin edici√≥n de datos
        - Sin guardado
        """)

def requiere_autenticacion(func):
    """Decorador para funciones que requieren autenticaci√≥n"""
    def wrapper(*args, **kwargs):
        if verificar_sesion_activa():
            return func(*args, **kwargs)
        else:
            st.error("üîí Se requiere autenticaci√≥n de administrador para esta funci√≥n")
            st.info("üí° Use el panel 'Acceso Administrativo' en la barra lateral")
            return None
    return wrapper

def verificar_permisos_edicion():
    """Funci√≥n espec√≠fica para verificar permisos de edici√≥n de registros"""
    if not verificar_sesion_activa():
        return False, "Usuario no autenticado"
    
    # Aqu√≠ se pueden agregar m√°s verificaciones de permisos espec√≠ficos
    # Por ejemplo, verificar roles, permisos espec√≠ficos, etc.
    
    return True, "Permisos de edici√≥n confirmados"

def mostrar_panel_seguridad():
    """Panel adicional de informaci√≥n de seguridad"""
    with st.sidebar.expander("üõ°Ô∏è Informaci√≥n de Seguridad"):
        if verificar_autenticacion():
            st.success("üîê Sistema protegido - Sesi√≥n activa")
            
            # Mostrar informaci√≥n de la sesi√≥n
            if 'fecha_login' in st.session_state:
                fecha_login = st.session_state.fecha_login
                st.info(f"üïê Login: {fecha_login.strftime('%H:%M:%S')}")
            
            # Advertencia sobre seguridad
            st.warning("""
            **‚ö†Ô∏è Recordatorios de seguridad:**
            - Cierre sesi√≥n al terminar
            - No comparta credenciales
            - Reporte accesos no autorizados
            """)
            
        else:
            st.info("""
            **üîí Datos protegidos**
            
            El sistema protege autom√°ticamente:
            - ‚úèÔ∏è Edici√≥n de registros
            - üíæ Modificaci√≥n de datos
            - üîÑ Operaciones cr√≠ticas
            
            **Acceso libre:**
            - üìä Visualizaci√≥n de dashboards
            - üìà Reportes y estad√≠sticas
            - üìã Consulta de informaci√≥n
            """)

def log_actividad_usuario(accion, detalles=""):
    """Registra actividades del usuario para auditor√≠a"""
    if verificar_autenticacion():
        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        usuario = st.session_state.get('usuario', 'desconocido')
        
        # Guardar en session_state para mostrar actividades recientes
        if 'log_actividades' not in st.session_state:
            st.session_state.log_actividades = []
        
        entrada_log = {
            'timestamp': timestamp,
            'usuario': usuario,
            'accion': accion,
            'detalles': detalles
        }
        
        st.session_state.log_actividades.append(entrada_log)
        
        # Mantener solo las √∫ltimas 20 actividades
        if len(st.session_state.log_actividades) > 20:
            st.session_state.log_actividades = st.session_state.log_actividades[-20:]

def mostrar_log_actividades():
    """Muestra el log de actividades recientes del usuario"""
    if verificar_autenticacion() and 'log_actividades' in st.session_state:
        with st.expander("üìã Actividades Recientes"):
            actividades = st.session_state.log_actividades[-10:]  # √öltimas 10
            
            if actividades:
                for actividad in reversed(actividades):  # M√°s recientes primero
                    st.text(f"{actividad['timestamp']} - {actividad['accion']}")
                    if actividad['detalles']:
                        st.caption(f"   ‚îî‚îÄ {actividad['detalles']}")
            else:
                st.info("No hay actividades registradas en esta sesi√≥n")

# Funci√≥n para cambiar credenciales (solo para administradores)
def cambiar_credenciales():
    """Permite cambiar las credenciales de administrador"""
    if verificar_autenticacion():
        with st.expander("üîß Cambiar Credenciales"):
            st.warning("‚ö†Ô∏è Funcionalidad en desarrollo - Contacte al administrador del sistema")
            st.info("""
            **Para cambiar credenciales en producci√≥n:**
            1. Modificar variables de entorno
            2. Usar base de datos segura
            3. Implementar hash de contrase√±as
            4. Activar autenticaci√≥n de dos factores
            """)

# Verificaci√≥n adicional de seguridad para operaciones cr√≠ticas
def verificar_operacion_critica(operacion):
    """Verificaci√≥n adicional para operaciones que modifican datos importantes"""
    if not verificar_sesion_activa():
        return False, "Autenticaci√≥n requerida"
    
    # Log de la operaci√≥n cr√≠tica
    log_actividad_usuario(f"Operaci√≥n cr√≠tica: {operacion}")
    
    return True, f"Operaci√≥n {operacion} autorizada"
