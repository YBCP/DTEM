# backup_utils.py - VERSI√ìN ULTRA SEGURA CON RESTAURACI√ìN AUTOM√ÅTICA

import streamlit as st
import pandas as pd
from datetime import datetime
from sheets_utils import get_sheets_manager
import json
import os


def crear_respaldo_automatico(registros_df):
    """
    VERSI√ìN ULTRA SEGURA: Crea respaldo autom√°tico con validaciones estrictas.
    """
    try:
        # VALIDACI√ìN ESTRICTA: Solo crear respaldo si hay datos realmente v√°lidos
        if registros_df.empty or len(registros_df) == 0:
            return False
        
        # Verificar columnas esenciales
        columnas_esenciales = ['Cod', 'Entidad']
        if not all(col in registros_df.columns for col in columnas_esenciales):
            return False
        
        # Validar registros con datos reales (no solo espacios o valores nulos)
        registros_validos = registros_df[
            (registros_df['Cod'].notna()) & 
            (registros_df['Cod'].astype(str).str.strip() != '') &
            (registros_df['Cod'].astype(str).str.strip() != 'nan') &
            (registros_df['Cod'].astype(str).str.strip() != 'None') &
            (registros_df['Entidad'].notna()) & 
            (registros_df['Entidad'].astype(str).str.strip() != '') &
            (registros_df['Entidad'].astype(str).str.strip() != 'nan') &
            (registros_df['Entidad'].astype(str).str.strip() != 'None')
        ]
        
        # REQUISITO M√çNIMO: Al menos 1 registro v√°lido
        if len(registros_validos) == 0:
            return False
        
        # Proceder con el respaldo
        sheets_manager = get_sheets_manager()
        nombre_respaldo = "Respaldo_Registros"
        
        # Limpiar datos para respaldo
        df_respaldo = registros_validos.copy()
        df_respaldo = df_respaldo.fillna('')
        
        # Crear respaldo con timestamp en metadatos
        import pytz
        bogota_tz = pytz.timezone('America/Bogota')
        timestamp = datetime.now(bogota_tz)
        
        # Escribir respaldo
        exito = sheets_manager.escribir_hoja(df_respaldo, nombre_respaldo, limpiar_hoja=True)
        
        if exito:
            # Guardar metadatos del respaldo
            info_respaldo = {
                'fecha': timestamp,
                'registros': len(registros_validos),
                'columnas': len(df_respaldo.columns),
                'exitoso': True
            }
            
            # Guardar en session state
            st.session_state.ultimo_respaldo = info_respaldo
            
            # Guardar tambi√©n en archivo local
            guardar_respaldo_local(df_respaldo, timestamp)
            
            return True
        else:
            return False
    
    except Exception as e:
        st.error(f"‚ùå Error al crear respaldo: {str(e)}")
        return False


def guardar_respaldo_local(df, timestamp):
    """Guarda respaldo local con timestamp"""
    try:
        timestamp_str = timestamp.strftime("%Y%m%d_%H%M%S")
        filename = f"respaldo_local_{timestamp_str}.csv"
        df.to_csv(filename, index=False, encoding='utf-8')
        
        # Mantener solo los √∫ltimos 10 respaldos locales
        import glob
        respaldos = glob.glob("respaldo_local_*.csv")
        if len(respaldos) > 10:
            respaldos.sort()
            for respaldo_viejo in respaldos[:-10]:
                try:
                    os.remove(respaldo_viejo)
                except:
                    pass
    except Exception as e:
        print(f"Error al guardar respaldo local: {e}")


def verificar_integridad_datos(registros_df):
    """
    NUEVA FUNCI√ìN: Verifica la integridad de los datos cargados.
    Detecta si los datos fueron borrados o corrompidos.
    """
    try:
        # Verificar si el DataFrame est√° vac√≠o
        if registros_df.empty or len(registros_df) == 0:
            return False, "DataFrame vac√≠o"
        
        # Verificar columnas esenciales
        columnas_esenciales = ['Cod', 'Entidad']
        if not all(col in registros_df.columns for col in columnas_esenciales):
            return False, "Columnas esenciales faltantes"
        
        # Verificar que hay al menos un registro v√°lido
        registros_validos = registros_df[
            (registros_df['Cod'].notna()) & 
            (registros_df['Cod'].astype(str).str.strip() != '') &
            (registros_df['Cod'].astype(str).str.strip() != 'nan') &
            (registros_df['Entidad'].notna()) & 
            (registros_df['Entidad'].astype(str).str.strip() != '') &
            (registros_df['Entidad'].astype(str).str.strip() != 'nan')
        ]
        
        if len(registros_validos) == 0:
            return False, "No hay registros v√°lidos"
        
        # Verificar que no sean solo headers sin datos
        if len(registros_df) == 1 and all(registros_df.iloc[0].astype(str).str.strip() == ''):
            return False, "Solo headers sin datos"
        
        return True, f"Datos √≠ntegros: {len(registros_validos)} registros v√°lidos"
    
    except Exception as e:
        return False, f"Error verificando integridad: {str(e)}"


def restauracion_automatica_emergencia():
    """
    NUEVA FUNCI√ìN: Restauraci√≥n autom√°tica en caso de p√©rdida de datos.
    Se ejecuta autom√°ticamente si se detecta que la tabla Registros est√° vac√≠a.
    """
    try:
        st.warning("üö® ALERTA: Datos de registros vac√≠os o corruptos detectados")
        st.info("üîÑ Iniciando restauraci√≥n autom√°tica desde respaldo...")
        
        sheets_manager = get_sheets_manager()
        
        # Verificar si existe respaldo
        hojas = sheets_manager.listar_hojas()
        if "Respaldo_Registros" not in hojas:
            st.error("‚ùå No hay respaldo disponible para restauraci√≥n autom√°tica")
            return False, None
        
        # Leer respaldo
        df_respaldo = sheets_manager.leer_hoja("Respaldo_Registros")
        
        if df_respaldo.empty:
            st.error("‚ùå El respaldo est√° vac√≠o")
            return False, None
        
        # Verificar integridad del respaldo
        es_valido, mensaje = verificar_integridad_datos(df_respaldo)
        if not es_valido:
            st.error(f"‚ùå El respaldo no es v√°lido: {mensaje}")
            return False, None
        
        # Crear backup del estado actual (corrupto)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        try:
            registros_corruptos = sheets_manager.leer_hoja("Registros")
            if not registros_corruptos.empty:
                sheets_manager.escribir_hoja(registros_corruptos, f"Estado_Corrupto_{timestamp}", limpiar_hoja=True)
        except:
            pass
        
        # RESTAURAR AUTOM√ÅTICAMENTE
        exito = sheets_manager.escribir_hoja(df_respaldo, "Registros", limpiar_hoja=True)
        
        if exito:
            st.success("‚úÖ RESTAURACI√ìN AUTOM√ÅTICA EXITOSA")
            st.balloons()
            
            # Actualizar session state
            st.session_state.ultima_restauracion_automatica = {
                'fecha': datetime.now(),
                'registros_restaurados': len(df_respaldo),
                'motivo': 'Detecci√≥n autom√°tica de datos vac√≠os/corruptos'
            }
            
            return True, df_respaldo
        else:
            st.error("‚ùå Error en restauraci√≥n autom√°tica")
            return False, None
    
    except Exception as e:
        st.error(f"‚ùå Error en restauraci√≥n autom√°tica de emergencia: {str(e)}")
        return False, None


def verificar_disponibilidad_respaldo():
    """Verifica disponibilidad de respaldo con informaci√≥n detallada"""
    try:
        sheets_manager = get_sheets_manager()
        hojas = sheets_manager.listar_hojas()
        
        if "Respaldo_Registros" in hojas:
            df_respaldo = sheets_manager.leer_hoja("Respaldo_Registros")
            
            if not df_respaldo.empty:
                # Verificar integridad del respaldo
                es_valido, mensaje = verificar_integridad_datos(df_respaldo)
                
                info_respaldo = {
                    'registros': len(df_respaldo),
                    'columnas': len(df_respaldo.columns),
                    'disponible': True,
                    'valido': es_valido,
                    'mensaje': mensaje
                }
                return True, info_respaldo
        
        return False, None
    
    except Exception as e:
        return False, None


def obtener_fecha_ultimo_respaldo():
    """
    NUEVA FUNCI√ìN: Obtiene la fecha del √∫ltimo respaldo v√°lido.
    Para mostrar en el estado del sistema.
    """
    try:
        # Primero intentar desde session state
        if 'ultimo_respaldo' in st.session_state:
            return st.session_state.ultimo_respaldo['fecha']
        
        # Si no, verificar si existe respaldo en Google Sheets
        tiene_respaldo, info = verificar_disponibilidad_respaldo()
        if tiene_respaldo and info['valido']:
            # No podemos obtener la fecha exacta de Google Sheets sin metadatos adicionales
            # Pero sabemos que existe un respaldo v√°lido
            return "Respaldo disponible (fecha exacta no disponible)"
        
        return None
    
    except Exception as e:
        return None


def mostrar_estado_respaldos_detallado():
    """
    NUEVA FUNCI√ìN: Muestra estado detallado de respaldos para el sistema.
    """
    fecha_ultimo = obtener_fecha_ultimo_respaldo()
    tiene_respaldo, info = verificar_disponibilidad_respaldo()
    
    # Informaci√≥n b√°sica para mostrar en estado del sistema
    if fecha_ultimo:
        if isinstance(fecha_ultimo, datetime):
            fecha_str = fecha_ultimo.strftime("%d/%m/%Y %H:%M")
        else:
            fecha_str = str(fecha_ultimo)
        
        estado_respaldo = f"‚úÖ √öltimo respaldo: {fecha_str}"
    else:
        estado_respaldo = "‚ö†Ô∏è Sin respaldo reciente"
    
    # Informaci√≥n adicional
    if tiene_respaldo and info:
        if info['valido']:
            estado_adicional = f" | üíæ {info['registros']} registros respaldados"
        else:
            estado_adicional = f" | ‚ö†Ô∏è Respaldo corrupto: {info['mensaje']}"
    else:
        estado_adicional = " | ‚ùå No hay respaldo disponible"
    
    return estado_respaldo + estado_adicional


def cargar_datos_con_respaldo():
    """
    VERSI√ìN ULTRA SEGURA: Carga datos con verificaci√≥n autom√°tica y restauraci√≥n.
    """
    try:
        sheets_manager = get_sheets_manager()
        
        # Cargar datos desde Google Sheets
        registros_df = sheets_manager.leer_hoja("Registros")
        
        # VERIFICACI√ìN AUTOM√ÅTICA DE INTEGRIDAD
        es_valido, mensaje = verificar_integridad_datos(registros_df)
        
        if not es_valido:
            st.warning(f"‚ö†Ô∏è Problema detectado en datos: {mensaje}")
            
            # RESTAURACI√ìN AUTOM√ÅTICA
            exito_restauracion, registros_restaurados = restauracion_automatica_emergencia()
            
            if exito_restauracion:
                registros_df = registros_restaurados
                st.success("üîÑ Datos restaurados autom√°ticamente desde respaldo")
            else:
                # Si falla la restauraci√≥n autom√°tica, crear estructura m√≠nima
                st.error("‚ùå Restauraci√≥n autom√°tica fall√≥. Creando estructura m√≠nima.")
                registros_df = crear_estructura_registros_minima()
        else:
            st.success(f"‚úÖ {len(registros_df)} registros cargados y verificados")
        
        # Lista de columnas requeridas
        columnas_requeridas = [
            'Cod', 'Funcionario', 'Entidad', 'Nivel Informaci√≥n ', 'Frecuencia actualizacion ',
            'TipoDato', 'Mes Proyectado', 'Actas de acercamiento y manifestaci√≥n de inter√©s',
            'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
            'Acuerdo de compromiso', 'Gestion acceso a los datos y documentos requeridos ',
            'An√°lisis de informaci√≥n', 'Cronograma Concertado', 'An√°lisis y cronograma (fecha programada)',
            'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'An√°lisis y cronograma',
            'Seguimiento a los acuerdos', 'Registro', 'ET', 'CO', 'DD', 'REC', 'SERVICIO',
            'Est√°ndares (fecha programada)', 'Est√°ndares', 'Resultados de orientaci√≥n t√©cnica',
            'Verificaci√≥n del servicio web geogr√°fico', 'Verificar Aprobar Resultados',
            'Revisar y validar los datos cargados en la base de datos',
            'Aprobaci√≥n resultados obtenidos en la rientaci√≥n', 'Disponer datos tem√°ticos',
            'Fecha de publicaci√≥n programada', 'Publicaci√≥n', 'Cat√°logo de recursos geogr√°ficos',
            'Oficios de cierre', 'Fecha de oficio de cierre', 'Plazo de cronograma',
            'Plazo de oficio de cierre', 'Estado', 'Observaci√≥n'
        ]
        
        # A√±adir columnas faltantes si hay datos v√°lidos
        if es_valido:
            for columna in columnas_requeridas:
                if columna not in registros_df.columns:
                    registros_df[columna] = ''
            
            # Crear respaldo autom√°tico de los datos v√°lidos
            crear_respaldo_automatico(registros_df)
            
            # Limpiar valores
            for col in registros_df.columns:
                registros_df[col] = registros_df[col].apply(lambda x: '' if pd.isna(x) or x is None else str(x).strip())
        
        # Cargar metas
        try:
            meta_df = sheets_manager.leer_hoja("Metas")
            
            if meta_df.empty:
                meta_df = crear_estructura_metas_inicial()
                sheets_manager.escribir_hoja(meta_df, "Metas", limpiar_hoja=True)
            else:
                # Limpiar valores de metas
                for col in meta_df.columns:
                    meta_df[col] = meta_df[col].apply(lambda x: '' if pd.isna(x) or x is None else str(x).strip())
        
        except Exception as e:
            meta_df = crear_estructura_metas_inicial()
        
        return registros_df, meta_df
    
    except Exception as e:
        st.error(f"‚ùå Error cr√≠tico cargando datos: {e}")
        
        # √öltimo recurso: crear estructura m√≠nima
        registros_df = crear_estructura_registros_minima()
        meta_df = crear_estructura_metas_inicial()
        
        return registros_df, meta_df


def crear_estructura_registros_minima():
    """Crea estructura m√≠nima de registros cuando todo falla"""
    columnas_minimas = [
        'Cod', 'Funcionario', 'Entidad', 'Nivel Informaci√≥n ', 'Frecuencia actualizacion ',
        'TipoDato', 'Mes Proyectado', 'Acuerdo de compromiso', 'An√°lisis y cronograma',
        'Est√°ndares', 'Publicaci√≥n', 'Fecha de entrega de informaci√≥n',
        'Plazo de an√°lisis', 'Plazo de cronograma', 'Plazo de oficio de cierre',
        'Fecha de oficio de cierre', 'Estado', 'Observaci√≥n'
    ]
    
    return pd.DataFrame(columns=columnas_minimas)


def crear_estructura_metas_inicial():
    """Crea estructura inicial para las metas"""
    return pd.DataFrame({
        0: ["15/01/2025", "31/01/2025", "15/02/2025"],
        1: [0, 0, 0],  # Acuerdo nuevos
        2: [0, 0, 0],  # An√°lisis nuevos
        3: [0, 0, 0],  # Est√°ndares nuevos
        4: [0, 0, 0],  # Publicaci√≥n nuevos
        5: [0, 0, 0],  # Separador
        6: [0, 0, 0],  # Acuerdo actualizar
        7: [0, 0, 0],  # An√°lisis actualizar
        8: [0, 0, 0],  # Est√°ndares actualizar
        9: [0, 0, 0],  # Publicaci√≥n actualizar
    })


def restaurar_desde_respaldo():
    """Funci√≥n manual para restaurar desde respaldo"""
    try:
        sheets_manager = get_sheets_manager()
        
        df_respaldo = sheets_manager.leer_hoja("Respaldo_Registros")
        
        if df_respaldo.empty:
            st.error("‚ùå El respaldo est√° vac√≠o")
            return False, None
        
        # Verificar integridad
        es_valido, mensaje = verificar_integridad_datos(df_respaldo)
        if not es_valido:
            st.error(f"‚ùå El respaldo no es v√°lido: {mensaje}")
            return False, None
        
        # Crear backup del estado actual
        try:
            registros_actuales = sheets_manager.leer_hoja("Registros")
            if not registros_actuales.empty:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                sheets_manager.escribir_hoja(registros_actuales, f"Backup_Manual_{timestamp}", limpiar_hoja=True)
        except:
            pass
        
        # Restaurar
        exito = sheets_manager.escribir_hoja(df_respaldo, "Registros", limpiar_hoja=True)
        
        if exito:
            st.session_state.ultima_restauracion_manual = datetime.now()
            return True, df_respaldo
        else:
            return False, None
    
    except Exception as e:
        st.error(f"‚ùå Error en restauraci√≥n manual: {str(e)}")
        return False, None


def mostrar_panel_restauracion():
    """Panel de restauraci√≥n manual"""
    st.markdown("### üîß Panel de Restauraci√≥n Manual")
    
    tiene_respaldo, info = verificar_disponibilidad_respaldo()
    
    if tiene_respaldo and info['valido']:
        st.info(f"üíæ Respaldo v√°lido disponible: {info['registros']} registros")
        
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ Restaurar Manualmente", type="primary"):
                with st.spinner("Restaurando datos..."):
                    exito, df = restaurar_desde_respaldo()
                    if exito:
                        st.success("‚úÖ Restauraci√≥n manual exitosa")
                        st.balloons()
                        st.rerun()
        
        with col2:
            st.warning("‚ö†Ô∏è Esto sobrescribir√° los datos actuales")
    
    elif tiene_respaldo:
        st.error(f"‚ùå El respaldo existe pero no es v√°lido: {info['mensaje']}")
    else:
        st.warning("‚ö†Ô∏è No hay respaldo disponible")
