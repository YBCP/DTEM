# editor_limpio_corregido.py - NUNCA TOCA METAS + SSL CORREGIDO
"""
Editor de Registros Limpio - PROTECCI√ìN TOTAL DE METAS
JAM√ÅS modifica la hoja Metas, solo lee/escribe en Registros
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date
import time

# ===== IMPORTS SEGUROS - SIN AFECTAR METAS =====
try:
    from data_utils import calcular_porcentaje_avance
except ImportError:
    def calcular_porcentaje_avance(registro):
        try:
            avance = 0
            if str(registro.get('Acuerdo de compromiso', '')).strip().upper() in ['SI', 'S√ç']:
                avance += 25
            if registro.get('An√°lisis y cronograma', '') and str(registro.get('An√°lisis y cronograma', '')).strip():
                avance += 25
            if registro.get('Est√°ndares', '') and str(registro.get('Est√°ndares', '')).strip():
                avance += 25
            if registro.get('Publicaci√≥n', '') and str(registro.get('Publicaci√≥n', '')).strip():
                avance += 25
            return avance
        except:
            return 0

try:
    from validaciones_utils import validar_reglas_negocio
except ImportError:
    def validar_reglas_negocio(df):
        return df

try:
    from fecha_utils import actualizar_plazo_analisis, actualizar_plazo_cronograma, actualizar_plazo_oficio_cierre
except ImportError:
    def actualizar_plazo_analisis(df):
        return df
    def actualizar_plazo_cronograma(df):
        return df
    def actualizar_plazo_oficio_cierre(df):
        return df


# ===== FUNCI√ìN SEGURA DE GUARDADO - SOLO REGISTROS =====
def guardar_solo_registros(df):
    """
    FUNCI√ìN ULTRA SEGURA: Solo guarda en hoja Registros, JAM√ÅS toca Metas
    """
    try:
        # Validar que solo estamos guardando registros
        if 'Cod' not in df.columns or 'Entidad' not in df.columns:
            return False, "Error: Solo se pueden guardar datos de registros"
        
        # Importar de forma segura
        try:
            from sheets_utils import GoogleSheetsManager
            
            # Crear nueva instancia cada vez para evitar problemas SSL
            manager = GoogleSheetsManager()
            
            # IMPORTANTE: Solo escribir en hoja "Registros"
            st.info("üíæ Guardando √∫nicamente en hoja 'Registros'...")
            
            # Limpiar y escribir SOLO en Registros
            exito = manager.escribir_hoja(df, "Registros", limpiar_hoja=True)
            
            if exito:
                # Verificar que se guard√≥ correctamente
                try:
                    df_verificacion = manager.leer_hoja("Registros")
                    if not df_verificacion.empty and len(df_verificacion) >= len(df) * 0.8:
                        return True, "‚úÖ Datos guardados exitosamente en Google Sheets - Hoja 'Registros'"
                    else:
                        return True, "‚úÖ Datos guardados (verificaci√≥n parcial)"
                except:
                    return True, "‚úÖ Datos guardados sin verificaci√≥n"
            else:
                return False, "‚ùå Error al escribir en Google Sheets"
                
        except ImportError:
            return False, "‚ùå Error: M√≥dulo sheets_utils no disponible"
        except Exception as e:
            error_msg = str(e).lower()
            if 'ssl' in error_msg or 'wrong_version_number' in error_msg:
                return False, "‚ùå Error SSL: Problema de conexi√≥n segura. Intenta de nuevo en unos segundos."
            elif 'permission' in error_msg or '403' in error_msg:
                return False, "‚ùå Error de permisos: Verifica que el service account tenga acceso."
            else:
                return False, f"‚ùå Error de conexi√≥n: {str(e)}"
        
    except Exception as e:
        return False, f"‚ùå Error interno: {str(e)}"


def cargar_datos_desde_sheets():
    """
    Carga datos SOLO desde la hoja Registros, nunca toca Metas
    """
    try:
        from sheets_utils import GoogleSheetsManager
        
        # Nueva instancia para evitar problemas SSL
        manager = GoogleSheetsManager()
        
        # Leer SOLO de Registros
        df = manager.leer_hoja("Registros")
        
        if df.empty:
            st.warning("La hoja 'Registros' est√° vac√≠a o no se pudo leer")
            return pd.DataFrame()
        
        return df
        
    except Exception as e:
        error_msg = str(e).lower()
        if 'ssl' in error_msg:
            st.error("‚ùå Error SSL de conexi√≥n. Refresca la p√°gina e intenta de nuevo.")
        else:
            st.error(f"‚ùå Error al cargar datos: {str(e)}")
        return pd.DataFrame()


def generar_nuevo_codigo(registros_df):
    """Genera un nuevo c√≥digo autonum√©rico"""
    try:
        if registros_df.empty:
            return "001"
        
        # Extraer n√∫meros de c√≥digos existentes
        codigos_numericos = []
        for codigo in registros_df['Cod']:
            try:
                # Intentar extraer n√∫meros del c√≥digo
                num_str = ''.join(filter(str.isdigit, str(codigo)))
                if num_str:
                    codigos_numericos.append(int(num_str))
            except:
                continue
        
        if codigos_numericos:
            nuevo_numero = max(codigos_numericos) + 1
        else:
            nuevo_numero = 1
            
        return f"{nuevo_numero:03d}"  # Formato con 3 d√≠gitos: 001, 002, etc.
        
    except Exception as e:
        st.error(f"Error generando c√≥digo: {e}")
        return "001"


def obtener_columnas_completas():
    """Devuelve todas las columnas necesarias para un registro completo"""
    return [
        'Cod', 'Entidad', 'TipoDato', 'Nivel Informaci√≥n ', 'Mes Proyectado',
        'Funcionario de enlace', 'Frecuencia', 'Actas de inter√©s', 'Suscripci√≥n',
        'Entrega', 'Acuerdo de compromiso', 'Acceso a datos', 'An√°lisis de informaci√≥n',
        'Fecha de entrega de informaci√≥n', 'Cronograma concertado',
        'An√°lisis de informaci√≥n (fecha programada)', 'An√°lisis y cronograma',
        'Seguimiento de acuerdos', 'Registro', 'ET', 'CO', 'DD', 'REC', 'SERVICIO',
        'Est√°ndares (fecha programada)', 'Est√°ndares', 'Resultados de orientaci√≥n t√©cnica',
        'Verificaci√≥n del servicio web geogr√°fico', 'Verificar Aprobar', 'Revisar validar',
        'Aprobaci√≥n de resultados', 'Fecha de publicaci√≥n programada', 'Publicaci√≥n',
        'Disponer de los datos tem√°ticos', 'Cat√°logo de recursos geogr√°ficos',
        'Oficios de cierre', 'Fecha de oficio de cierre', 'Estado', 'Observaciones',
        'Plazo de an√°lisis', 'Plazo de cronograma', 'Plazo de oficio de cierre',
        'Porcentaje de Avance'
    ]


def crear_registro_vacio(codigo_nuevo):
    """Crea un registro completamente vac√≠o con el c√≥digo asignado"""
    columnas = obtener_columnas_completas()
    registro = {}
    
    for columna in columnas:
        if columna == 'Cod':
            registro[columna] = codigo_nuevo
        elif columna == 'Porcentaje de Avance':
            registro[columna] = 0
        else:
            registro[columna] = ''
    
    return registro


def mostrar_formulario_registro(row_data, indice, es_nuevo=False):
    """Muestra el formulario para editar o crear un registro"""
    
    # INFORMACI√ìN B√ÅSICA
    st.markdown("**Informaci√≥n B√°sica**")
    col1, col2 = st.columns(2)
    
    with col1:
        codigo = st.text_input("C√≥digo", 
            value=str(row_data.get('Cod', '')), 
            key=f"codigo_{indice}",
            disabled=es_nuevo)  # Solo lectura para nuevos registros
            
        tipo_dato = st.selectbox("Tipo de Dato", 
            options=["", "Geogr√°fico", "Estad√≠stico", "Catastral", "Otro"],
            index=["", "Geogr√°fico", "Estad√≠stico", "Catastral", "Otro"].index(row_data.get('TipoDato', '')) if row_data.get('TipoDato', '') in ["", "Geogr√°fico", "Estad√≠stico", "Catastral", "Otro"] else 0,
            key=f"tipo_dato_{indice}")
            
        entidad = st.text_input("Entidad", 
            value=str(row_data.get('Entidad', '')), 
            key=f"entidad_{indice}")
        
    with col2:
        nivel_info = st.text_input("Nivel de Informaci√≥n", 
            value=str(row_data.get('Nivel Informaci√≥n ', '')), 
            key=f"nivel_{indice}")
            
        mes_proyectado = st.text_input("Mes Proyectado", 
            value=str(row_data.get('Mes Proyectado', '')), 
            key=f"mes_{indice}")
            
        funcionario = st.text_input("Funcionario", 
            value=str(row_data.get('Funcionario de enlace', '')), 
            key=f"funcionario_{indice}")
    
    frecuencia = st.selectbox("Frecuencia",
        options=["", "Anual", "Mensual", "Trimestral", "Semestral"],
        index=["", "Anual", "Mensual", "Trimestral", "Semestral"].index(row_data.get('Frecuencia', '')) if row_data.get('Frecuencia', '') in ["", "Anual", "Mensual", "Trimestral", "Semestral"] else 0,
        key=f"frecuencia_{indice}")
    
    # ACUERDOS Y COMPROMISOS
    st.markdown("**Acuerdos y Compromisos**")
    col1, col2 = st.columns(2)
    
    with col1:
        actas_interes = st.selectbox("Actas de inter√©s",
            options=["", "Si", "No"],
            index=["", "Si", "No"].index(row_data.get('Actas de inter√©s', '')) if row_data.get('Actas de inter√©s', '') in ["", "Si", "No"] else 0,
            key=f"actas_{indice}")
        
        suscripcion = st.selectbox("Suscripci√≥n",
            options=["", "Si", "No", "Pendiente"],
            index=["", "Si", "No", "Pendiente"].index(row_data.get('Suscripci√≥n', '')) if row_data.get('Suscripci√≥n', '') in ["", "Si", "No", "Pendiente"] else 0,
            key=f"suscripcion_{indice}")
    
    with col2:
        entrega = st.selectbox("Entrega",
            options=["", "Si", "No", "Parcial"],
            index=["", "Si", "No", "Parcial"].index(row_data.get('Entrega', '')) if row_data.get('Entrega', '') in ["", "Si", "No", "Parcial"] else 0,
            key=f"entrega_{indice}")
        
        acuerdo_compromiso = st.selectbox("Acuerdo de compromiso",
            options=["", "Si", "No"],
            index=["", "Si", "No"].index(row_data.get('Acuerdo de compromiso', '')) if row_data.get('Acuerdo de compromiso', '') in ["", "Si", "No"] else 0,
            key=f"acuerdo_{indice}")
    
    # GESTI√ìN DE INFORMACI√ìN
    st.markdown("**Gesti√≥n de Informaci√≥n**")
    col1, col2 = st.columns(2)
    
    with col1:
        acceso_datos = st.selectbox("Acceso a datos",
            options=["", "Si", "No", "Limitado"],
            index=["", "Si", "No", "Limitado"].index(row_data.get('Acceso a datos', '')) if row_data.get('Acceso a datos', '') in ["", "Si", "No", "Limitado"] else 0,
            key=f"acceso_{indice}")
        
        analisis_informacion = st.text_input("An√°lisis de informaci√≥n",
            value=str(row_data.get('An√°lisis de informaci√≥n', '')),
            key=f"analisis_info_{indice}")
    
    with col2:
        fecha_entrega = st.text_input("Fecha de entrega (DD/MM/YYYY)",
            value=str(row_data.get('Fecha de entrega de informaci√≥n', '')),
            key=f"fecha_entrega_{indice}")
        
        cronograma_concertado = st.selectbox("Cronograma concertado",
            options=["", "Si", "No", "En proceso"],
            index=["", "Si", "No", "En proceso"].index(row_data.get('Cronograma concertado', '')) if row_data.get('Cronograma concertado', '') in ["", "Si", "No", "En proceso"] else 0,
            key=f"cronograma_{indice}")
    
    # AN√ÅLISIS Y FECHAS
    st.markdown("**An√°lisis y Cronograma**")
    col1, col2 = st.columns(2)
    
    with col1:
        analisis_programada = st.text_input("An√°lisis programada (DD/MM/YYYY)",
            value=str(row_data.get('An√°lisis de informaci√≥n (fecha programada)', '')),
            key=f"analisis_prog_{indice}")
        
        analisis_real = st.text_input("An√°lisis real (DD/MM/YYYY)",
            value=str(row_data.get('An√°lisis y cronograma', '')),
            key=f"analisis_real_{indice}")
    
    with col2:
        seguimiento_acuerdos = st.text_area("Seguimiento de acuerdos",
            value=str(row_data.get('Seguimiento de acuerdos', '')),
            height=80,
            key=f"seguimiento_{indice}")
    
    # EST√ÅNDARES COMPLETOS
    st.markdown("**Est√°ndares**")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        registro = st.selectbox("Registro",
            options=["", "Completo", "Incompleto", "No aplica"],
            index=["", "Completo", "Incompleto", "No aplica"].index(row_data.get('Registro', '')) if row_data.get('Registro', '') in ["", "Completo", "Incompleto", "No aplica"] else 0,
            key=f"registro_{indice}")
            
        et = st.selectbox("ET",
            options=["", "Completo", "Incompleto", "No aplica"],
            index=["", "Completo", "Incompleto", "No aplica"].index(row_data.get('ET', '')) if row_data.get('ET', '') in ["", "Completo", "Incompleto", "No aplica"] else 0,
            key=f"et_{indice}")
    
    with col2:
        co = st.selectbox("CO",
            options=["", "Completo", "Incompleto", "No aplica"],
            index=["", "Completo", "Incompleto", "No aplica"].index(row_data.get('CO', '')) if row_data.get('CO', '') in ["", "Completo", "Incompleto", "No aplica"] else 0,
            key=f"co_{indice}")
            
        dd = st.selectbox("DD",
            options=["", "Completo", "Incompleto", "No aplica"],
            index=["", "Completo", "Incompleto", "No aplica"].index(row_data.get('DD', '')) if row_data.get('DD', '') in ["", "Completo", "Incompleto", "No aplica"] else 0,
            key=f"dd_{indice}")
    
    with col3:
        rec = st.selectbox("REC",
            options=["", "Completo", "Incompleto", "No aplica"],
            index=["", "Completo", "Incompleto", "No aplica"].index(row_data.get('REC', '')) if row_data.get('REC', '') in ["", "Completo", "Incompleto", "No aplica"] else 0,
            key=f"rec_{indice}")
            
        servicio = st.selectbox("SERVICIO",
            options=["", "Completo", "Incompleto", "No aplica"],
            index=["", "Completo", "Incompleto", "No aplica"].index(row_data.get('SERVICIO', '')) if row_data.get('SERVICIO', '') in ["", "Completo", "Incompleto", "No aplica"] else 0,
            key=f"servicio_{indice}")
    
    # FECHAS DE EST√ÅNDARES
    col1, col2 = st.columns(2)
    
    with col1:
        estandares_programada = st.text_input("Est√°ndares programada (DD/MM/YYYY)",
            value=str(row_data.get('Est√°ndares (fecha programada)', '')),
            key=f"estandares_prog_{indice}")
    
    with col2:
        estandares_real = st.text_input("Est√°ndares real (DD/MM/YYYY)",
            value=str(row_data.get('Est√°ndares', '')),
            key=f"estandares_real_{indice}")
    
    # ORIENTACI√ìN Y VERIFICACIONES
    st.markdown("**Orientaci√≥n y Verificaciones**")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        resultados_orientacion = st.selectbox("Resultados orientaci√≥n t√©cnica",
            options=["", "Si", "No", "Completo"],
            index=["", "Si", "No", "Completo"].index(row_data.get('Resultados de orientaci√≥n t√©cnica', '')) if row_data.get('Resultados de orientaci√≥n t√©cnica', '') in ["", "Si", "No", "Completo"] else 0,
            key=f"orientacion_{indice}")
    
    with col2:
        verificacion_servicio = st.selectbox("Verificaci√≥n servicio web",
            options=["", "Si", "No", "Completo"],
            index=["", "Si", "No", "Completo"].index(row_data.get('Verificaci√≥n del servicio web geogr√°fico', '')) if row_data.get('Verificaci√≥n del servicio web geogr√°fico', '') in ["", "Si", "No", "Completo"] else 0,
            key=f"verificacion_{indice}")
    
    with col3:
        verificar_aprobar = st.selectbox("Verificar Aprobar",
            options=["", "Si", "No", "Pendiente"],
            index=["", "Si", "No", "Pendiente"].index(row_data.get('Verificar Aprobar', '')) if row_data.get('Verificar Aprobar', '') in ["", "Si", "No", "Pendiente"] else 0,
            key=f"verificar_aprobar_{indice}")
    
    col1, col2 = st.columns(2)
    
    with col1:
        revisar_validar = st.selectbox("Revisar validar",
            options=["", "Si", "No", "En proceso"],
            index=["", "Si", "No", "En proceso"].index(row_data.get('Revisar validar', '')) if row_data.get('Revisar validar', '') in ["", "Si", "No", "En proceso"] else 0,
            key=f"revisar_{indice}")
    
    with col2:
        aprobacion_resultados = st.selectbox("Aprobaci√≥n resultados",
            options=["", "Si", "No", "Pendiente"],
            index=["", "Si", "No", "Pendiente"].index(row_data.get('Aprobaci√≥n de resultados', '')) if row_data.get('Aprobaci√≥n de resultados', '') in ["", "Si", "No", "Pendiente"] else 0,
            key=f"aprobacion_{indice}")
    
    # PUBLICACI√ìN
    st.markdown("**Publicaci√≥n**")
    col1, col2 = st.columns(2)
    
    with col1:
        publicacion_programada = st.text_input("Publicaci√≥n programada (DD/MM/YYYY)",
            value=str(row_data.get('Fecha de publicaci√≥n programada', '')),
            key=f"pub_prog_{indice}")
        
        publicacion_real = st.text_input("Publicaci√≥n real (DD/MM/YYYY)",
            value=str(row_data.get('Publicaci√≥n', '')),
            key=f"pub_real_{indice}")
    
    with col2:
        disponer_datos = st.selectbox("Disponer datos tem√°ticos",
            options=["", "Si", "No", "En proceso"],
            index=["", "Si", "No", "En proceso"].index(row_data.get('Disponer de los datos tem√°ticos', '')) if row_data.get('Disponer de los datos tem√°ticos', '') in ["", "Si", "No", "En proceso"] else 0,
            key=f"disponer_{indice}")
        
        catalogo_recursos = st.selectbox("Cat√°logo recursos",
            options=["", "Si", "No", "En proceso"],
            index=["", "Si", "No", "En proceso"].index(row_data.get('Cat√°logo de recursos geogr√°ficos', '')) if row_data.get('Cat√°logo de recursos geogr√°ficos', '') in ["", "Si", "No", "En proceso"] else 0,
            key=f"catalogo_{indice}")
    
    # CIERRE
    st.markdown("**Cierre**")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        oficios_cierre = st.selectbox("Oficios de cierre",
            options=["", "Si", "No", "Pendiente"],
            index=["", "Si", "No", "Pendiente"].index(row_data.get('Oficios de cierre', '')) if row_data.get('Oficios de cierre', '') in ["", "Si", "No", "Pendiente"] else 0,
            key=f"oficios_{indice}")
    
    with col2:
        fecha_oficio_cierre = st.text_input("Fecha oficio cierre (DD/MM/YYYY)",
            value=str(row_data.get('Fecha de oficio de cierre', '')),
            key=f"fecha_oficio_{indice}")
    
    with col3:
        estado_final = st.selectbox("Estado final",
            options=["", "Completo", "Incompleto", "Cancelado"],
            index=["", "Completo", "Incompleto", "Cancelado"].index(row_data.get('Estado', '')) if row_data.get('Estado', '') in ["", "Completo", "Incompleto", "Cancelado"] else 0,
            key=f"estado_{indice}")
    
    # PLAZOS CALCULADOS (solo lectura)
    st.markdown("**Plazos Calculados**")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.text_input("Plazo an√°lisis", 
            value=str(row_data.get('Plazo de an√°lisis', '')), 
            disabled=True,
            key=f"plazo_analisis_{indice}")
    
    with col2:
        st.text_input("Plazo cronograma", 
            value=str(row_data.get('Plazo de cronograma', '')), 
            disabled=True,
            key=f"plazo_cronograma_{indice}")
    
    with col3:
        st.text_input("Plazo oficio cierre", 
            value=str(row_data.get('Plazo de oficio de cierre', '')), 
            disabled=True,
            key=f"plazo_oficio_{indice}")
    
    # OBSERVACIONES
    st.markdown("**Observaciones**")
    observaciones = st.text_area("Observaciones",
        value=str(row_data.get('Observaciones', '')),
        height=100,
        key=f"observaciones_{indice}")
    
    # COMPLETITUD CALCULADA (solo lectura)
    porcentaje_actual = calcular_porcentaje_avance(row_data)
    st.text_input("Porcentaje de completitud (%)", 
        value=f"{porcentaje_actual}%", 
        disabled=True,
        key=f"completitud_{indice}")
    
    # Retornar todos los valores del formulario
    return {
        'Cod': codigo,
        'Entidad': entidad,
        'TipoDato': tipo_dato,
        'Nivel Informaci√≥n ': nivel_info,
        'Mes Proyectado': mes_proyectado,
        'Funcionario de enlace': funcionario,
        'Frecuencia': frecuencia,
        'Actas de inter√©s': actas_interes,
        'Suscripci√≥n': suscripcion,
        'Entrega': entrega,
        'Acuerdo de compromiso': acuerdo_compromiso,
        'Acceso a datos': acceso_datos,
        'An√°lisis de informaci√≥n': analisis_informacion,
        'Fecha de entrega de informaci√≥n': fecha_entrega,
        'Cronograma concertado': cronograma_concertado,
        'An√°lisis de informaci√≥n (fecha programada)': analisis_programada,
        'An√°lisis y cronograma': analisis_real,
        'Seguimiento de acuerdos': seguimiento_acuerdos,
        'Registro': registro,
        'ET': et,
        'CO': co,
        'DD': dd,
        'REC': rec,
        'SERVICIO': servicio,
        'Est√°ndares (fecha programada)': estandares_programada,
        'Est√°ndares': estandares_real,
        'Resultados de orientaci√≥n t√©cnica': resultados_orientacion,
        'Verificaci√≥n del servicio web geogr√°fico': verificacion_servicio,
        'Verificar Aprobar': verificar_aprobar,
        'Revisar validar': revisar_validar,
        'Aprobaci√≥n de resultados': aprobacion_resultados,
        'Fecha de publicaci√≥n programada': publicacion_programada,
        'Publicaci√≥n': publicacion_real,
        'Disponer de los datos tem√°ticos': disponer_datos,
        'Cat√°logo de recursos geogr√°ficos': catalogo_recursos,
        'Oficios de cierre': oficios_cierre,
        'Fecha de oficio de cierre': fecha_oficio_cierre,
        'Estado': estado_final,
        'Observaciones': observaciones
    }


def mostrar_edicion_registros(registros_df):
    """Editor limpio con opciones de editar existente o crear nuevo"""
    
    st.subheader("Editor de Registros")
    
    # Bot√≥n para recargar datos desde Google Sheets
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.info("üí° Este editor NUNCA modifica la hoja 'Metas', solo trabaja con 'Registros'")
    
    with col2:
        if st.button("üîÑ Recargar desde Google Sheets", help="Carga los datos m√°s recientes"):
            with st.spinner("Cargando datos..."):
                registros_actualizados = cargar_datos_desde_sheets()
                if not registros_actualizados.empty:
                    st.success("‚úÖ Datos recargados exitosamente")
                    # Actualizar los datos en session_state si existe
                    if 'registros_df' in st.session_state:
                        st.session_state.registros_df = registros_actualizados
                    st.rerun()
                else:
                    st.warning("‚ö†Ô∏è No se pudieron cargar datos nuevos")
    
    with col3:
        total_registros = len(registros_df) if not registros_df.empty else 0
        st.metric("Total Registros", total_registros)
    
    # Pesta√±as para editar o crear
    tab1, tab2 = st.tabs(["Editar Existente", "Crear Nuevo Registro"])
    
    with tab1:
        if registros_df.empty:
            st.warning("No hay registros disponibles para editar.")
            st.info("üí° Usa el bot√≥n 'Recargar desde Google Sheets' o crea un nuevo registro.")
            return registros_df
        
        # Selector de registro
        opciones_registros = [
            f"{registros_df.iloc[i]['Cod']} - {registros_df.iloc[i]['Entidad']} - {registros_df.iloc[i].get('Nivel Informaci√≥n ', 'N/A')}"
            for i in range(len(registros_df))
        ]
        
        seleccion_registro = st.selectbox(
            "Seleccionar registro:",
            options=opciones_registros,
            key="selector_registro_editar"
        )
        
        indice_seleccionado = opciones_registros.index(seleccion_registro)
        row_original = registros_df.iloc[indice_seleccionado].copy()
        
        st.markdown(f"**Editando:** {row_original['Cod']} - {row_original['Entidad']}")
        
        # FORMULARIO DE EDICI√ìN
        form_key = f"form_editor_edit_{row_original['Cod']}_{int(time.time())}"
        
        with st.form(form_key, clear_on_submit=False):
            
            # Mostrar formulario
            valores_form = mostrar_formulario_registro(row_original, indice_seleccionado, es_nuevo=False)
            
            # BOT√ìN DE GUARDAR
            submitted = st.form_submit_button("üíæ Actualizar Registro", type="primary", use_container_width=True)
            
            if submitted:
                try:
                    # Crear registro actualizado
                    registro_actualizado = row_original.copy()
                    
                    # Actualizar todos los campos del formulario
                    for campo, valor in valores_form.items():
                        registro_actualizado[campo] = valor
                    
                    # Calcular nuevo porcentaje de avance
                    nuevo_porcentaje = calcular_porcentaje_avance(registro_actualizado)
                    registro_actualizado['Porcentaje de Avance'] = nuevo_porcentaje
                    
                    # Actualizar DataFrame
                    registros_df.iloc[indice_seleccionado] = registro_actualizado
                    
                    # Aplicar validaciones y actualizar plazos
                    registros_df = validar_reglas_negocio(registros_df)
                    registros_df = actualizar_plazo_analisis(registros_df)
                    registros_df = actualizar_plazo_cronograma(registros_df)
                    registros_df = actualizar_plazo_oficio_cierre(registros_df)
                    
                    # Guardar SOLO en hoja Registros (NUNCA en Metas)
                    exito, mensaje = guardar_solo_registros(registros_df)
                    
                    if exito:
                        st.success(f"‚úÖ {mensaje}")
                        st.success(f"üìä Avance del registro: {nuevo_porcentaje}%")
                        
                        # Actualizar timestamp de √∫ltimo guardado
                        st.session_state.ultimo_guardado = datetime.now().strftime("%H:%M:%S")
                        
                        # Esperar un momento antes de recargar
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error(f"‚ùå {mensaje}")
                        if "ssl" in mensaje.lower():
                            st.info("üí° Error SSL detectado. Intenta recargar la p√°gina e intentar de nuevo.")
                        
                except Exception as e:
                    st.error(f"‚ùå Error al procesar los cambios: {str(e)}")
                    st.code(f"Detalle del error: {type(e).__name__}: {str(e)}")
    
    with tab2:
        st.markdown("**Crear Nuevo Registro**")
        
        # Generar c√≥digo autom√°tico
        nuevo_codigo = generar_nuevo_codigo(registros_df)
        st.info(f"üìù C√≥digo asignado autom√°ticamente: **{nuevo_codigo}**")
        
        # FORMULARIO DE NUEVO REGISTRO
        form_key_nuevo = f"form_editor_nuevo_{nuevo_codigo}_{int(time.time())}"
        
        with st.form(form_key_nuevo, clear_on_submit=True):
            
            # Crear registro vac√≠o con c√≥digo asignado
            registro_vacio = crear_registro_vacio(nuevo_codigo)
            
            # Mostrar formulario
            valores_form_nuevo = mostrar_formulario_registro(registro_vacio, "nuevo", es_nuevo=True)
            
            # BOT√ìN DE CREAR
            submitted_nuevo = st.form_submit_button("‚ûï Crear Nuevo Registro", type="primary", use_container_width=True)
            
            if submitted_nuevo:
                try:
                    # Validar campos obligatorios
                    if not valores_form_nuevo['Entidad'].strip():
                        st.error("‚ùå El campo 'Entidad' es obligatorio")
                        return registros_df
                    
                    # Crear registro completo
                    nuevo_registro = crear_registro_vacio(nuevo_codigo)
                    
                    # Actualizar con valores del formulario
                    for campo, valor in valores_form_nuevo.items():
                        if campo in nuevo_registro:
                            nuevo_registro[campo] = valor
                    
                    # Calcular porcentaje de avance
                    nuevo_porcentaje = calcular_porcentaje_avance(nuevo_registro)
                    nuevo_registro['Porcentaje de Avance'] = nuevo_porcentaje
                    
                    # Asegurar que todas las columnas est√©n presentes
                    columnas_completas = obtener_columnas_completas()
                    for columna in columnas_completas:
                        if columna not in nuevo_registro:
                            nuevo_registro[columna] = ''
                    
                    # Convertir a DataFrame y concatenar
                    df_nuevo_registro = pd.DataFrame([nuevo_registro])
                    
                    if registros_df.empty:
                        # Si no hay registros, crear DataFrame con el nuevo
                        registros_df = df_nuevo_registro
                    else:
                        # Asegurar que ambos DataFrames tengan las mismas columnas
                        for columna in columnas_completas:
                            if columna not in registros_df.columns:
                                registros_df[columna] = ''
                        
                        # Concatenar el nuevo registro
                        registros_df = pd.concat([registros_df, df_nuevo_registro], ignore_index=True)
                    
                    # Aplicar validaciones y actualizar plazos
                    registros_df = validar_reglas_negocio(registros_df)
                    registros_df = actualizar_plazo_analisis(registros_df)
                    registros_df = actualizar_plazo_cronograma(registros_df)
                    registros_df = actualizar_plazo_oficio_cierre(registros_df)
                    
                    # Guardar SOLO en hoja Registros (NUNCA en Metas)
                    exito, mensaje = guardar_solo_registros(registros_df)
                    
                    if exito:
                        st.success(f"‚úÖ Nuevo registro creado exitosamente: **{nuevo_codigo}**")
                        st.success(f"üìä {mensaje}")
                        st.success(f"üìà Avance inicial: {nuevo_porcentaje}%")
                        st.balloons()
                        
                        # Actualizar timestamp de √∫ltimo guardado
                        st.session_state.ultimo_guardado = datetime.now().strftime("%H:%M:%S")
                        
                        # Esperar un momento antes de recargar
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error(f"‚ùå Error al guardar el nuevo registro: {mensaje}")
                        if "ssl" in mensaje.lower():
                            st.info("üí° Error SSL detectado. Intenta recargar la p√°gina e intentar de nuevo.")
                        
                except Exception as e:
                    st.error(f"‚ùå Error al crear el nuevo registro: {str(e)}")
                    st.code(f"Detalle del error: {type(e).__name__}: {str(e)}")
    
    return registros_df


def verificar_conexion_sheets():
    """Verifica si la conexi√≥n con Google Sheets est√° funcionando - SOLO LEE REGISTROS"""
    try:
        from sheets_utils import GoogleSheetsManager
        
        # Nueva instancia para evitar problemas SSL
        manager = GoogleSheetsManager()
        
        # Listar hojas disponibles
        hojas = manager.listar_hojas()
        
        if hojas:
            hojas_str = ', '.join(hojas)
            # Verificar espec√≠ficamente la hoja Registros
            if 'Registros' in hojas:
                try:
                    df_test = manager.leer_hoja("Registros")
                    num_registros = len(df_test) if not df_test.empty else 0
                    return True, f"‚úÖ Conexi√≥n exitosa. Hojas: {hojas_str}. Registros disponibles: {num_registros}"
                except Exception as e:
                    return True, f"‚úÖ Conexi√≥n exitosa. Hojas: {hojas_str}. Error leyendo Registros: {str(e)}"
            else:
                return True, f"‚úÖ Conexi√≥n exitosa. Hojas: {hojas_str}. ‚ö†Ô∏è Hoja 'Registros' no encontrada"
        else:
            return False, "‚ùå No se pudieron listar las hojas"
            
    except Exception as e:
        error_msg = str(e).lower()
        if 'ssl' in error_msg or 'wrong_version_number' in error_msg:
            return False, "‚ùå Error SSL: Problema de conexi√≥n segura. Refresca la p√°gina e intenta de nuevo."
        elif 'permission' in error_msg or '403' in error_msg:
            return False, "‚ùå Error de permisos: Verifica que el service account tenga acceso al spreadsheet."
        elif 'not found' in error_msg or '404' in error_msg:
            return False, "‚ùå Spreadsheet no encontrado: Verifica el SPREADSHEET_ID en la configuraci√≥n."
        else:
            return False, f"‚ùå Error de conexi√≥n: {str(e)}"


def mostrar_edicion_registros_con_autenticacion(registros_df):
    """Wrapper con autenticaci√≥n para el editor limpio - PROTECCI√ìN TOTAL DE METAS"""
    
    try:
        from auth_utils import verificar_autenticacion
        
        if verificar_autenticacion():
            
            # Panel de estado - SIN TOCAR METAS
            with st.expander("üîß Estado de Conexi√≥n (Solo Registros)", expanded=False):
                
                st.warning("üõ°Ô∏è **PROTECCI√ìN ACTIVA**: Este editor JAM√ÅS modifica la hoja 'Metas'")
                
                col1, col2 = st.columns([3, 1])
                
                with col1:
                    if st.button("üîÑ Verificar Conexi√≥n Google Sheets", key="verificar_sheets_seguro"):
                        with st.spinner("Verificando conexi√≥n (solo lectura Registros)..."):
                            conexion_ok, mensaje = verificar_conexion_sheets()
                            if conexion_ok:
                                st.success(mensaje)
                            else:
                                st.error(mensaje)
                                
                                # Mostrar sugerencias espec√≠ficas para cada tipo de error
                                if "ssl" in mensaje.lower():
                                    st.info("""
                                    üîß **Soluci√≥n para Error SSL:**
                                    1. Refresca la p√°gina (Ctrl+F5)
                                    2. Espera 30 segundos e intenta de nuevo
                                    3. Si persiste, verifica tu conexi√≥n a internet
                                    """)
                                elif "permission" in mensaje.lower() or "403" in mensaje.lower():
                                    st.info("""
                                    üîß **Soluci√≥n para Error de Permisos:**
                                    1. Verifica que el service account tenga acceso al spreadsheet
                                    2. Comprueba que el correo del service account est√© invitado
                                    3. Aseg√∫rate de que tenga permisos de edici√≥n
                                    """)
                                elif "not found" in mensaje.lower() or "404" in mensaje.lower():
                                    st.info("""
                                    üîß **Soluci√≥n para Spreadsheet No Encontrado:**
                                    1. Verifica el SPREADSHEET_ID en tu configuraci√≥n
                                    2. Aseg√∫rate de que el spreadsheet existe
                                    3. Confirma que el ID sea correcto (debe tener ~44 caracteres)
                                    """)
                                else:
                                    st.info("""
                                    üîß **Sugerencias Generales:**
                                    - Verifica tu conexi√≥n a internet
                                    - Comprueba que el archivo `credentials.json` est√© presente
                                    - Aseg√∫rate de que el SPREADSHEET_ID sea correcto
                                    - Verifica los permisos de la cuenta de servicio
                                    """)
                
                with col2:
                    # Mostrar √∫ltimo guardado si existe
                    if 'ultimo_guardado' in st.session_state:
                        st.success(f"‚è∞ √öltimo guardado:\n{st.session_state.ultimo_guardado}")
                    else:
                        st.info("üïê Sin guardados\nrecientes")
                
                # Informaci√≥n de seguridad
                st.success("""
                üõ°Ô∏è **GARANT√çAS DE SEGURIDAD:**
                ‚úÖ Solo modifica hoja 'Registros'
                ‚úÖ NUNCA toca hoja 'Metas'
                ‚úÖ Crea nueva instancia en cada operaci√≥n
                ‚úÖ Validaciones antes de guardar
                """)
            
            return mostrar_edicion_registros(registros_df)
            
        else:
            st.subheader("üîê Acceso Restringido")
            st.warning("Se requiere autenticaci√≥n para editar registros")
            
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.info("""
                **Para acceder al editor seguro:**
                1. üîê Use el panel 'Acceso Administrativo' en la barra lateral
                2. üë§ Ingrese las credenciales de administrador
                3. ‚úÖ Podr√° editar registros sin afectar Metas
                """)
            
            with col2:
                # Mostrar vista previa de funcionalidades
                st.markdown("**üéØ Funcionalidades disponibles:**")
                st.markdown("""
                - ‚úèÔ∏è Editar registros existentes
                - ‚ûï Crear nuevos registros
                - üî¢ Autonumeraci√≥n de c√≥digos
                - üíæ Guardado seguro (solo Registros)
                - üõ°Ô∏è PROTECCI√ìN de hoja Metas
                - üìä C√°lculo autom√°tico de avance
                - üîÑ Validaciones autom√°ticas
                - üö´ SSL error handling
                """)
            
            return registros_df
            
    except ImportError:
        st.warning("‚ö†Ô∏è Sistema de autenticaci√≥n no disponible. Acceso directo habilitado.")
        st.error("üõ°Ô∏è IMPORTANTE: Se aplicar√° protecci√≥n de hoja Metas")
        return mostrar_edicion_registros(registros_df)
