import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.figure_factory as ff
import plotly.graph_objects as go
from datetime import datetime, timedelta, date
from validaciones_utils import validar_reglas_negocio, mostrar_estado_validaciones, verificar_condiciones_estandares, verificar_condiciones_oficio_cierre
import io
import matplotlib
import base64
import os
import re
from fecha_utils import calcular_plazo_analisis, actualizar_plazo_analisis, calcular_plazo_cronograma, actualizar_plazo_cronograma, calcular_plazo_oficio_cierre, actualizar_plazo_oficio_cierre

# Importar las funciones corregidas
from config import setup_page, load_css
from data_utils import (
    cargar_datos, procesar_metas, calcular_porcentaje_avance,
    verificar_estado_fechas, formatear_fecha, es_fecha_valida,
    validar_campos_fecha, guardar_datos_editados, guardar_datos_editados_rapido, procesar_fecha,
    contar_registros_completados_por_fecha, cargar_datos_desde_excel
)
from visualization import crear_gantt, comparar_avance_metas
from constants import REGISTROS_DATA, META_DATA
from sheets_utils import test_connection, get_sheets_manager

# Funci√≥n para mostrar el header con logos
def mostrar_header_logos():
    """Muestra el header con los logos de las entidades."""
    st.markdown("""
    <style>
    .header-container {
        background: linear-gradient(90deg, #2E5BBA 0%, #4A90E2 100%);
        padding: 1rem 2rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    
    .logos-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }
    
    .logo-group {
        display: flex;
        align-items: center;
        gap: 1rem;
    }
    
    .title-main {
        color: white;
        font-size: 2.5rem;
        font-weight: bold;
        text-align: center;
        margin: 0;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }
    
    .gov-logo {
        height: 40px;
        filter: brightness(0) invert(1);
    }
    
    .entity-logos {
        height: 50px;
    }
    </style>
    
    <div class="header-container">
        <div class="logos-container">
            <div class="logo-group">
                <!-- Logo GOV.CO (simulado con texto) -->
                <div style="color: white; font-weight: bold; font-size: 1.2rem; background: rgba(255,255,255,0.2); padding: 0.5rem 1rem; border-radius: 5px;">
                    üèõÔ∏è GOV.CO
                </div>
            </div>
            <div class="logo-group">
                <!-- Logos de entidades (simulados con texto) -->
                <div style="color: white; font-weight: bold; background: rgba(255,255,255,0.2); padding: 0.5rem; border-radius: 5px;">
                    üìç IDECA
                </div>
                <div style="color: white; font-weight: bold; background: rgba(255,255,255,0.2); padding: 0.5rem; border-radius: 5px;">
                    üèõÔ∏è UAECD
                </div>
                <div style="color: white; font-weight: bold; background: rgba(255,255,255,0.2); padding: 0.5rem; border-radius: 5px;">
                    üèôÔ∏è BOGOT√Å
                </div>
            </div>
        </div>
        <h1 class="title-main">DASHBOARD DE SEGUIMIENTO A DATOS TEM√ÅTICOS</h1>
    </div>
    """, unsafe_allow_html=True)

# Funci√≥n para convertir fecha string a datetime
def string_a_fecha(fecha_str):
    """Convierte un string de fecha a objeto datetime para mostrar en el selector de fecha."""
    if not fecha_str or fecha_str == "":
        return None
    fecha = procesar_fecha(fecha_str)
    return fecha

# Funci√≥n para colorear filas seg√∫n estado de fechas - definida fuera de los bloques try
def highlight_estado_fechas(s):
    """Funci√≥n para aplicar estilo seg√∫n el valor de 'Estado Fechas'"""
    if 'Estado Fechas' in s and s['Estado Fechas'] == 'vencido':
        return ['background-color: #fee2e2'] * len(s)
    elif 'Estado Fechas' in s and s['Estado Fechas'] == 'proximo':
        return ['background-color: #fef3c7'] * len(s)
    else:
        return ['background-color: #ffffff'] * len(s)

def mostrar_configuracion_sheets():
    """Muestra la configuraci√≥n y estado de Google Sheets"""
    with st.sidebar.expander("üîß Configuraci√≥n Google Sheets"):
        st.markdown("### Estado de Conexi√≥n")
        
        # Bot√≥n para probar conexi√≥n
        if st.button("üîÑ Probar Conexi√≥n", help="Verifica la conexi√≥n con Google Sheets"):
            with st.spinner("Probando conexi√≥n..."):
                test_connection()
        
        # Mostrar hojas disponibles
        try:
            manager = get_sheets_manager()
            hojas = manager.listar_hojas()
            st.markdown("**Hojas disponibles:**")
            for hoja in hojas:
                st.markdown(f"- {hoja}")
        except:
            st.warning("No se pudo obtener la lista de hojas")
        
        # Link a configuraci√≥n
        st.markdown("---")
        st.markdown("**¬øNecesitas configurar Google Sheets?**")
        st.markdown("[üìã Ver instrucciones completas](https://github.com/tu-repo/INSTRUCCIONES_CONFIGURACION.md)")
        
        # Informaci√≥n de seguridad
        st.info("üîí Los datos se guardan de forma segura en Google Sheets con autenticaci√≥n OAuth2")

def mostrar_carga_archivos():
    """Muestra la secci√≥n de carga de archivos Excel/CSV"""
    with st.sidebar.expander("üìÅ Cargar Datos desde Excel"):
        st.markdown("### Subir Archivo Excel")
        
        uploaded_file = st.file_uploader(
            "Selecciona un archivo Excel",
            type=['xlsx', 'xls'],
            help="El archivo se sincronizar√° autom√°ticamente con Google Sheets"
        )
        
        if uploaded_file is not None:
            if st.button("üîÑ Sincronizar con Google Sheets"):
                with st.spinner("Procesando y sincronizando archivo..."):
                    nuevos_registros, nuevas_metas = cargar_datos_desde_excel(uploaded_file)
                    
                    if nuevos_registros is not None:
                        st.success("‚úÖ Archivo sincronizado exitosamente!")
                        st.info("üîÑ Recargando la aplicaci√≥n con los nuevos datos...")
                        st.rerun()
                    else:
                        st.error("‚ùå Error al procesar el archivo")
        
        st.markdown("---")
        st.markdown("**Formato esperado:**")
        st.markdown("- **Hoja 'Registros':** Datos principales")
        st.markdown("- **Hoja 'Metas':** Metas quincenales")
        st.warning("‚ö†Ô∏è La sincronizaci√≥n sobrescribir√° los datos existentes en Google Sheets")

def mostrar_dashboard(df_filtrado, metas_nuevas_df, metas_actualizar_df, registros_df, 
                     entidad_seleccionada, funcionario_seleccionado, nivel_seleccionado):
    """Muestra el dashboard principal con m√©tricas y gr√°ficos."""
    # Mostrar m√©tricas generales
    st.markdown('<div class="subtitle">M√©tricas Generales</div>', unsafe_allow_html=True)

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_registros = len(df_filtrado)
        st.markdown(f"""
        <div class="metric-card">
            <p style="font-size: 1rem; color: #64748b;">Total Registros</p>
            <p style="font-size: 2.5rem; font-weight: bold; color: #1E40AF;">{total_registros}</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        avance_promedio = df_filtrado['Porcentaje Avance'].mean()
        st.markdown(f"""
        <div class="metric-card">
            <p style="font-size: 1rem; color: #64748b;">Avance Promedio</p>
            <p style="font-size: 2.5rem; font-weight: bold; color: #047857;">{avance_promedio:.2f}%</p>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        registros_completados = len(df_filtrado[df_filtrado['Porcentaje Avance'] == 100])
        st.markdown(f"""
        <div class="metric-card">
            <p style="font-size: 1rem; color: #64748b;">Registros Completados</p>
            <p style="font-size: 2.5rem; font-weight: bold; color: #B45309;">{registros_completados}</p>
        </div>
        """, unsafe_allow_html=True)

    with col4:
        porcentaje_completados = (registros_completados / total_registros * 100) if total_registros > 0 else 0
        st.markdown(f"""
        <div class="metric-card">
            <p style="font-size: 1rem; color: #64748b;">% Completados</p>
            <p style="font-size: 2.5rem; font-weight: bold; color: #BE185D;">{porcentaje_completados:.2f}%</p>
        </div>
        """, unsafe_allow_html=True)

    # Comparaci√≥n con metas - MODIFICADO: gradiente de rojo a verde
    st.markdown('<div class="subtitle">Comparaci√≥n con Metas Quincenales</div>', unsafe_allow_html=True)

    # Calcular comparaci√≥n con metas
    comparacion_nuevos, comparacion_actualizar, fecha_meta = comparar_avance_metas(df_filtrado, metas_nuevas_df,
                                                                                   metas_actualizar_df)

    # Mostrar fecha de la meta
    st.markdown(f"**Meta m√°s cercana a la fecha actual: {fecha_meta.strftime('%d/%m/%Y')}**")

    # Mostrar comparaci√≥n en dos columnas
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### Registros Nuevos")
        
        # MODIFICADO: Crear gradiente personalizado rojo-verde para valores 0-100, verde para >100
        def crear_gradiente_personalizado(df, columna):
            def aplicar_color(val):
                if pd.isna(val):
                    return 'background-color: #f8f9fa'
                elif val == 0:
                    return 'background-color: #dc2626; color: white; font-weight: bold'
                elif 0 < val < 25:
                    return 'background-color: #ef4444; color: white; font-weight: bold'
                elif 25 <= val < 50:
                    return 'background-color: #f97316; color: white; font-weight: bold'
                elif 50 <= val < 75:
                    return 'background-color: #eab308; color: black; font-weight: bold'
                elif 75 <= val < 100:
                    return 'background-color: #84cc16; color: black; font-weight: bold'
                else:  # val >= 100
                    return 'background-color: #16a34a; color: white; font-weight: bold'
            
            return df.style.format({
                'Porcentaje': '{:.2f}%'
            }).applymap(aplicar_color, subset=['Porcentaje'])
        
        st.dataframe(crear_gradiente_personalizado(comparacion_nuevos, 'Porcentaje'))

        # Gr√°fico de barras para registros nuevos
        fig_nuevos = px.bar(
            comparacion_nuevos.reset_index(),
            x='index',
            y=['Completados', 'Meta'],
            barmode='group',
            labels={'index': 'Hito', 'value': 'Cantidad', 'variable': 'Tipo'},
            title='Comparaci√≥n de Avance vs. Meta - Registros Nuevos',
            color_discrete_map={'Completados': '#4B5563', 'Meta': '#1E40AF'}
        )
        st.plotly_chart(fig_nuevos, use_container_width=True)

    with col2:
        st.markdown("### Registros a Actualizar")
        st.dataframe(crear_gradiente_personalizado(comparacion_actualizar, 'Porcentaje'))

        # Gr√°fico de barras para registros a actualizar
        fig_actualizar = px.bar(
            comparacion_actualizar.reset_index(),
            x='index',
            y=['Completados', 'Meta'],
            barmode='group',
            labels={'index': 'Hito', 'value': 'Cantidad', 'variable': 'Tipo'},
            title='Comparaci√≥n de Avance vs. Meta - Registros a Actualizar',
            color_discrete_map={'Completados': '#4B5563', 'Meta': '#047857'}
        )
        st.plotly_chart(fig_actualizar, use_container_width=True)

    # MODIFICADO: Diagrama de Gantt - solo mostrar cuando hay filtros espec√≠ficos
    st.markdown('<div class="subtitle">Diagrama de Gantt - Cronograma de Hitos por Nivel de Informaci√≥n</div>',
                unsafe_allow_html=True)

    # Verificar si hay filtros activos
    filtros_activos = (
        entidad_seleccionada != 'Todas' or 
        funcionario_seleccionado != 'Todos' or 
        nivel_seleccionado != 'Todos'
    )

    if filtros_activos:
        # Crear el diagrama de Gantt
        fig_gantt = crear_gantt(df_filtrado)
        if fig_gantt is not None:
            st.plotly_chart(fig_gantt, use_container_width=True)
        else:
            st.warning("No hay datos suficientes para crear el diagrama de Gantt con los filtros aplicados.")
    else:
        # Mostrar mensaje cuando no hay filtros
        st.markdown("""
        <div style="background-color: #f0f9ff; border-left: 4px solid #0ea5e9; padding: 1.5rem; margin: 1rem 0; border-radius: 0.5rem;">
            <h4 style="color: #0369a1; margin: 0 0 0.5rem 0; font-size: 1.25rem;">
                üìä VISUALIZA EL DIAGRAMA DE GANTT SELECCIONANDO EL FUNCIONARIO O ENTIDAD DE INTER√âS
            </h4>
            <p style="color: #0369a1; margin: 0; font-size: 1rem;">
                Para ver el cronograma detallado, selecciona uno o m√°s filtros en la secci√≥n de arriba (Entidad, Funcionario o Nivel de Informaci√≥n).
            </p>
        </div>
        """, unsafe_allow_html=True)

    # Tabla de registros con porcentaje de avance
    st.markdown('<div class="subtitle">Detalle de Registros</div>', unsafe_allow_html=True)

    # Definir el nuevo orden exacto de las columnas seg√∫n lo solicitado
    columnas_mostrar = [
        # Datos b√°sicos
        'Cod', 'Entidad', 'Nivel Informaci√≥n ', 'Funcionario',  # Incluir Funcionario despu√©s de datos b√°sicos
        # Columnas adicionales en el orden espec√≠fico
        'Frecuencia actualizacion ', 'TipoDato',
        'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
        'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'Plazo de cronograma',
        'An√°lisis y cronograma',
        'Registro (completo)', 'ET (completo)', 'CO (completo)', 'DD (completo)', 'REC (completo)',
        'SERVICIO (completo)',
        'Est√°ndares (fecha programada)', 'Est√°ndares',
        'Fecha de publicaci√≥n programada', 'Publicaci√≥n',
        'Plazo de oficio de cierre', 'Fecha de oficio de cierre',
        'Estado', 'Observaci√≥n', 'Porcentaje Avance'
    ]

    # Mostrar tabla con colores por estado de fechas
    try:
        # Verificar que todas las columnas existan en df_filtrado
        columnas_mostrar_existentes = [col for col in columnas_mostrar if col in df_filtrado.columns]
        df_mostrar = df_filtrado[columnas_mostrar_existentes].copy()

        # Aplicar formato a las fechas
        columnas_fecha = [
            'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
            'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'Plazo de cronograma',
            'An√°lisis y cronograma', 'Est√°ndares (fecha programada)', 'Est√°ndares',
            'Fecha de publicaci√≥n programada', 'Publicaci√≥n',
            'Plazo de oficio de cierre', 'Fecha de oficio de cierre'
        ]

        for col in columnas_fecha:
            if col in df_mostrar.columns:
                df_mostrar[col] = df_mostrar[col].apply(lambda x: formatear_fecha(x) if es_fecha_valida(x) else "")

        # MODIFICADO: Aplicar gradiente personalizado tambi√©n a la tabla principal
        def aplicar_gradiente_porcentaje(df):
            def color_porcentaje(val):
                if pd.isna(val):
                    return 'background-color: #f8f9fa'
                elif val == 0:
                    return 'background-color: #dc2626; color: white; font-weight: bold'
                elif 0 < val < 25:
                    return 'background-color: #ef4444; color: white; font-weight: bold'
                elif 25 <= val < 50:
                    return 'background-color: #f97316; color: white; font-weight: bold'
                elif 50 <= val < 75:
                    return 'background-color: #eab308; color: black; font-weight: bold'
                elif 75 <= val < 100:
                    return 'background-color: #84cc16; color: black; font-weight: bold'
                else:  # val >= 100
                    return 'background-color: #16a34a; color: white; font-weight: bold'
            
            # Aplicar estilo a la columna de porcentaje
            styled_df = df.style.format({'Porcentaje Avance': '{:.2f}%'})
            styled_df = styled_df.applymap(color_porcentaje, subset=['Porcentaje Avance'])
            styled_df = styled_df.apply(highlight_estado_fechas, axis=1)
            
            return styled_df

        # Mostrar el dataframe con formato
        st.dataframe(aplicar_gradiente_porcentaje(df_mostrar), use_container_width=True)

        # SECCI√ìN DE DESCARGA
        st.markdown("### Descargar Datos")

        col1, col2 = st.columns(2)

        with col1:
            # Bot√≥n para descargar los datos filtrados
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df_mostrar.to_excel(writer, sheet_name='Registros Filtrados', index=False)

            excel_data = output.getvalue()
            st.download_button(
                label="üìä Descargar datos filtrados (Excel)",
                data=excel_data,
                file_name="registros_filtrados.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                help="Descarga los datos filtrados en formato Excel"
            )

        with col2:
            # BOT√ìN PARA DESCARGAR TODOS LOS REGISTROS (datos completos)
            output_completo = io.BytesIO()
            with pd.ExcelWriter(output_completo, engine='openpyxl') as writer:
                registros_df.to_excel(writer, sheet_name='Registros Completos', index=False)

                # A√±adir hojas adicionales con categor√≠as
                if 'TipoDato' in registros_df.columns:
                    # Hoja para registros nuevos
                    registros_nuevos = registros_df[registros_df['TipoDato'].str.upper() == 'NUEVO']
                    if not registros_nuevos.empty:
                        registros_nuevos.to_excel(writer, sheet_name='Registros Nuevos', index=False)

                    # Hoja para registros a actualizar
                    registros_actualizar = registros_df[registros_df['TipoDato'].str.upper() == 'ACTUALIZAR']
                    if not registros_actualizar.empty:
                        registros_actualizar.to_excel(writer, sheet_name='Registros a Actualizar', index=False)

            excel_data_completo = output_completo.getvalue()

            # Bot√≥n para descargar todos los registros
            st.download_button(
                label="üì• Descargar TODOS los registros (Excel)",
                data=excel_data_completo,
                file_name="todos_los_registros.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                help="Descarga todos los registros en formato Excel, sin filtros aplicados",
                use_container_width=True
            )

        # A√±adir informaci√≥n sobre el contenido
        num_registros = len(registros_df)
        num_campos = len(registros_df.columns)
        st.info(
            f"El archivo de TODOS los registros incluir√° {num_registros} registros con {num_campos} campos originales.")

    except Exception as e:
        st.error(f"Error al mostrar la tabla de registros: {e}")
        if columnas_mostrar_existentes:
            st.dataframe(df_filtrado[columnas_mostrar_existentes])

# Funci√≥n de callback para manejar cambios
def on_change_callback():
    """Callback para marcar que hay cambios pendientes."""
    st.session_state.cambios_pendientes = True

# Funci√≥n para convertir fecha para mostrar en selectores de fecha
def fecha_para_selector(fecha_str):
    """Convierte una fecha en string a un objeto datetime para el selector."""
    if not fecha_str or pd.isna(fecha_str) or fecha_str == '':
        return None

    try:
        fecha = procesar_fecha(fecha_str)
        if fecha is not None:
            return fecha
    except:
        pass

    return None

# Funci√≥n para formatear fecha desde el selector para guardar en DataFrame
def fecha_desde_selector_a_string(fecha):
    """Convierte un objeto datetime del selector a string con formato DD/MM/AAAA."""
    if fecha is None:
        return ""
    return fecha.strftime('%d/%m/%Y')

def mostrar_edicion_registros(registros_df):
    """Muestra la pesta√±a de edici√≥n de registros."""
    st.markdown('<div class="subtitle">Edici√≥n de Registros</div>', unsafe_allow_html=True)

    st.info(
        "Esta secci√≥n permite editar los datos usando selectores de fecha y opciones. Los cambios se guardan autom√°ticamente en Google Sheets.")

    # Explicaci√≥n adicional sobre las fechas y reglas de validaci√≥n
    st.warning("""
    **Importante**: 
    - Para los campos de fecha, utilice el selector de calendario que aparece.
    - El campo "Plazo de an√°lisis" se calcula autom√°ticamente como 5 d√≠as h√°biles despu√©s de la "Fecha de entrega de informaci√≥n", sin contar fines de semana ni festivos.
    - El campo "Plazo de cronograma" se calcula autom√°ticamente como 3 d√≠as h√°biles despu√©s del "Plazo de an√°lisis", sin contar fines de semana ni festivos.
    - El campo "Plazo de oficio de cierre" se calcula autom√°ticamente como 7 d√≠as h√°biles despu√©s de la fecha real de "Publicaci√≥n", sin contar fines de semana ni festivos.
    - Los datos se guardan autom√°ticamente en Google Sheets con cada modificaci√≥n.
    """)
    
    # Mostrar mensaje de guardado si existe
    if st.session_state.mensaje_guardado:
        if st.session_state.mensaje_guardado[0] == "success":
            st.success(st.session_state.mensaje_guardado[1])
        else:
            st.error(st.session_state.mensaje_guardado[1])
        # Limpiar mensaje despu√©s de mostrarlo
        st.session_state.mensaje_guardado = None

    st.markdown("### Edici√≥n Individual de Registros")

    # Selector de registro - mostrar lista completa de registros para seleccionar
    codigos_registros = registros_df['Cod'].astype(str).tolist()
    entidades_registros = registros_df['Entidad'].tolist()
    niveles_registros = registros_df['Nivel Informaci√≥n '].tolist()

    # Crear opciones para el selector combinando informaci√≥n
    opciones_registros = [f"{codigos_registros[i]} - {entidades_registros[i]} - {niveles_registros[i]}"
                          for i in range(len(codigos_registros))]

    # Agregar el selector de registro
    seleccion_registro = st.selectbox(
        "Seleccione un registro para editar:",
        options=opciones_registros,
        key="selector_registro"
    )

    # Obtener el √≠ndice del registro seleccionado
    indice_seleccionado = opciones_registros.index(seleccion_registro)

    # Mostrar el registro seleccionado para edici√≥n
    try:
        # Obtener el registro seleccionado
        row = registros_df.iloc[indice_seleccionado].copy()

        # Flag para detectar cambios
        edited = False

        # Contenedor para los datos de edici√≥n
        with st.container():
            st.markdown("---")
            # T√≠tulo del registro
            st.markdown(f"### Editando Registro #{row['Cod']} - {row['Entidad']}")
            st.markdown(f"**Nivel de Informaci√≥n:** {row['Nivel Informaci√≥n ']}")
            st.markdown("---")

            # SECCI√ìN 1: INFORMACI√ìN B√ÅSICA
            st.markdown("### 1. Informaci√≥n B√°sica")
            col1, col2, col3 = st.columns(3)

            with col1:
                # Campos no editables
                st.text_input("C√≥digo", value=row['Cod'], disabled=True)

            with col2:
                # Tipo de Dato
                nuevo_tipo = st.selectbox(
                    "Tipo de Dato",
                    options=["Nuevo", "Actualizar"],
                    index=0 if row['TipoDato'].upper() == "NUEVO" else 1,
                    key=f"tipo_{indice_seleccionado}",
                    on_change=on_change_callback
                )
                if nuevo_tipo != row['TipoDato']:
                    registros_df.at[registros_df.index[indice_seleccionado], 'TipoDato'] = nuevo_tipo
                    edited = True

            with col3:
                # Nivel de Informaci√≥n
                nuevo_nivel = st.text_input(
                    "Nivel de Informaci√≥n",
                    value=row['Nivel Informaci√≥n '] if pd.notna(row['Nivel Informaci√≥n ']) else "",
                    key=f"nivel_info_{indice_seleccionado}",
                    on_change=on_change_callback
                )
                if nuevo_nivel != row['Nivel Informaci√≥n ']:
                    registros_df.at[registros_df.index[indice_seleccionado], 'Nivel Informaci√≥n '] = nuevo_nivel
                    edited = True

            # Mostrar bot√≥n de guardar si se han hecho cambios
            if edited or st.session_state.cambios_pendientes:
                if st.button("üíæ Guardar Todos los Cambios", key=f"guardar_{indice_seleccionado}"):
                    # Aplicar validaciones de reglas de negocio antes de guardar
                    registros_df = validar_reglas_negocio(registros_df)

                    # Actualizar los plazos autom√°ticamente
                    registros_df = actualizar_plazo_analisis(registros_df)
                    registros_df = actualizar_plazo_cronograma(registros_df)
                    registros_df = actualizar_plazo_oficio_cierre(registros_df)

                    # Guardar los datos en Google Sheets
                    with st.spinner("üíæ Guardando en Google Sheets..."):
                        exito, mensaje = guardar_datos_editados(registros_df, crear_backup=True)

                    if exito:
                        st.session_state.mensaje_guardado = ("success", mensaje)
                        st.session_state.cambios_pendientes = False
                        st.rerun()
                    else:
                        st.session_state.mensaje_guardado = ("error", mensaje)

    except Exception as e:
        st.error(f"Error al editar el registro: {e}")

    return registros_df

def mostrar_reportes(registros_df, tipo_dato_filtro, acuerdo_filtro, analisis_filtro, 
                    estandares_filtro, publicacion_filtro, finalizado_filtro):
    """Muestra la pesta√±a de reportes con tabla completa y filtros espec√≠ficos."""
    st.markdown('<div class="subtitle">Reportes de Registros</div>', unsafe_allow_html=True)
    
    # Aplicar filtros
    df_filtrado = registros_df.copy()
    
    # Filtro por tipo de dato
    if tipo_dato_filtro != 'Todos':
        df_filtrado = df_filtrado[df_filtrado['TipoDato'].str.upper() == tipo_dato_filtro.upper()]
    
    # Filtro por acuerdo de compromiso suscrito
    if acuerdo_filtro != 'Todos':
        if acuerdo_filtro == 'Suscrito':
            df_filtrado = df_filtrado[
                ((df_filtrado['Suscripci√≥n acuerdo de compromiso'].notna()) & 
                 (df_filtrado['Suscripci√≥n acuerdo de compromiso'] != '')) |
                ((df_filtrado['Entrega acuerdo de compromiso'].notna()) & 
                 (df_filtrado['Entrega acuerdo de compromiso'] != ''))
            ]
        else:  # No Suscrito
            df_filtrado = df_filtrado[
                ((df_filtrado['Suscripci√≥n acuerdo de compromiso'].isna()) | 
                 (df_filtrado['Suscripci√≥n acuerdo de compromiso'] == '')) &
                ((df_filtrado['Entrega acuerdo de compromiso'].isna()) | 
                 (df_filtrado['Entrega acuerdo de compromiso'] == ''))
            ]
    
    # Filtro por an√°lisis y cronograma
    if analisis_filtro != 'Todos':
        if analisis_filtro == 'Completado':
            df_filtrado = df_filtrado[
                (df_filtrado['An√°lisis y cronograma'].notna()) & 
                (df_filtrado['An√°lisis y cronograma'] != '')
            ]
        else:  # No Completado
            df_filtrado = df_filtrado[
                (df_filtrado['An√°lisis y cronograma'].isna()) | 
                (df_filtrado['An√°lisis y cronograma'] == '')
            ]
    
    # Filtro por est√°ndares completado
    if estandares_filtro != 'Todos':
        if estandares_filtro == 'Completado':
            df_filtrado = df_filtrado[
                (df_filtrado['Est√°ndares'].notna()) & 
                (df_filtrado['Est√°ndares'] != '')
            ]
        else:  # No Completado
            df_filtrado = df_filtrado[
                (df_filtrado['Est√°ndares'].isna()) | 
                (df_filtrado['Est√°ndares'] == '')
            ]
    
    # Filtro por publicaci√≥n
    if publicacion_filtro != 'Todos':
        if publicacion_filtro == 'Completado':
            df_filtrado = df_filtrado[
                (df_filtrado['Publicaci√≥n'].notna()) & 
                (df_filtrado['Publicaci√≥n'] != '')
            ]
        else:  # No Completado
            df_filtrado = df_filtrado[
                (df_filtrado['Publicaci√≥n'].isna()) | 
                (df_filtrado['Publicaci√≥n'] == '')
            ]
    
    # Filtro por finalizado
    if finalizado_filtro != 'Todos':
        if finalizado_filtro == 'Finalizado':
            df_filtrado = df_filtrado[
                (df_filtrado['Fecha de oficio de cierre'].notna()) & 
                (df_filtrado['Fecha de oficio de cierre'] != '')
            ]
        else:  # No Finalizado
            df_filtrado = df_filtrado[
                (df_filtrado['Fecha de oficio de cierre'].isna()) | 
                (df_filtrado['Fecha de oficio de cierre'] == '')
            ]
    
    # Mostrar estad√≠sticas del filtrado
    st.markdown("### Resumen de Registros Filtrados")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_filtrados = len(df_filtrado)
        st.markdown(f"""
        <div class="metric-card">
            <p style="font-size: 1rem; color: #64748b;">Total Filtrados</p>
            <p style="font-size: 2.5rem; font-weight: bold; color: #1E40AF;">{total_filtrados}</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        if total_filtrados > 0:
            avance_promedio = df_filtrado['Porcentaje Avance'].mean()
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">Avance Promedio</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #047857;">{avance_promedio:.1f}%</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">Avance Promedio</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #047857;">0%</p>
            </div>
            """, unsafe_allow_html=True)

    with col3:
        if total_filtrados > 0:
            completados = len(df_filtrado[df_filtrado['Porcentaje Avance'] == 100])
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">Completados</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #B45309;">{completados}</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">Completados</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #B45309;">0</p>
            </div>
            """, unsafe_allow_html=True)

    with col4:
        if total_filtrados > 0:
            porcentaje_completados = (len(df_filtrado[df_filtrado['Porcentaje Avance'] == 100]) / total_filtrados * 100)
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">% Completados</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #BE185D;">{porcentaje_completados:.1f}%</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">% Completados</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #BE185D;">0%</p>
            </div>
            """, unsafe_allow_html=True)

    # Mostrar tabla de registros filtrados
    st.markdown("### Tabla de Registros")
    
    if df_filtrado.empty:
        st.warning("No se encontraron registros que coincidan con los filtros seleccionados.")
        return
    
    # Definir columnas a mostrar (misma estructura que el dashboard)
    columnas_mostrar = [
        'Cod', 'Entidad', 'Nivel Informaci√≥n ', 'Funcionario',
        'Frecuencia actualizacion ', 'TipoDato',
        'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
        'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'Plazo de cronograma',
        'An√°lisis y cronograma',
        'Registro (completo)', 'ET (completo)', 'CO (completo)', 'DD (completo)', 'REC (completo)',
        'SERVICIO (completo)',
        'Est√°ndares (fecha programada)', 'Est√°ndares',
        'Fecha de publicaci√≥n programada', 'Publicaci√≥n',
        'Plazo de oficio de cierre', 'Fecha de oficio de cierre',
        'Estado', 'Observaci√≥n', 'Porcentaje Avance'
    ]
    
    # Verificar que todas las columnas existan
    columnas_mostrar_existentes = [col for col in columnas_mostrar if col in df_filtrado.columns]
    df_mostrar = df_filtrado[columnas_mostrar_existentes].copy()
    
    # Aplicar formato a las fechas
    columnas_fecha = [
        'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
        'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'Plazo de cronograma',
        'An√°lisis y cronograma', 'Est√°ndares (fecha programada)', 'Est√°ndares',
        'Fecha de publicaci√≥n programada', 'Publicaci√≥n',
        'Plazo de oficio de cierre', 'Fecha de oficio de cierre'
    ]
    
    for col in columnas_fecha:
        if col in df_mostrar.columns:
            df_mostrar[col] = df_mostrar[col].apply(lambda x: formatear_fecha(x) if es_fecha_valida(x) else "")
    
    # Mostrar dataframe con formato
    st.dataframe(
        df_mostrar
        .style.format({'Porcentaje Avance': '{:.2f}%'})
        .apply(highlight_estado_fechas, axis=1)
        .background_gradient(cmap='RdYlGn', subset=['Porcentaje Avance']),
        use_container_width=True
    )
    
    # Bot√≥n para descargar reporte
    st.markdown("### Descargar Reporte")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Descargar como Excel
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_mostrar.to_excel(writer, sheet_name='Reporte Filtrado', index=False)

        excel_data = output.getvalue()
        st.download_button(
            label="üìä Descargar reporte como Excel",
            data=excel_data,
            file_name=f"reporte_registros_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            help="Descarga el reporte filtrado en formato Excel"
        )
    
    with col2:
        # Descargar como CSV
        csv = df_mostrar.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üìÑ Descargar reporte como CSV",
            data=csv,
            file_name=f"reporte_registros_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv",
            help="Descarga el reporte filtrado en formato CSV"
        )

def mostrar_alertas_vencimientos(registros_df):
    """Muestra alertas de vencimientos de fechas en los registros."""
    st.markdown('<div class="subtitle">Alertas de Vencimientos</div>', unsafe_allow_html=True)

    # Fecha actual para comparaciones
    fecha_actual = datetime.now().date()

    # Funci√≥n para calcular d√≠as h√°biles entre fechas (excluyendo fines de semana y festivos)
    def calcular_dias_habiles(fecha_inicio, fecha_fin):
        if not fecha_inicio or not fecha_fin:
            return None

        # Convertir a objetos date si son datetime
        if isinstance(fecha_inicio, datetime):
            fecha_inicio = fecha_inicio.date()
        if isinstance(fecha_fin, datetime):
            fecha_fin = fecha_fin.date()

        # Si la fecha de inicio es posterior a la fecha fin, devolver d√≠as negativos
        if fecha_inicio > fecha_fin:
            return -calcular_dias_habiles(fecha_fin, fecha_inicio)

        # Calcular d√≠as h√°biles
        dias = 0
        fecha_actual_calc = fecha_inicio
        while fecha_actual_calc <= fecha_fin:
            # Si no es fin de semana (0=lunes, 6=domingo)
            if fecha_actual_calc.weekday() < 5:
                dias += 1
            fecha_actual_calc += timedelta(days=1)

        return dias

    # Mostrar mensaje b√°sico
    st.success("üéâ ¬°No hay alertas de vencimientos pendientes!")

def mostrar_diagnostico(registros_df, meta_df, metas_nuevas_df, metas_actualizar_df, df_filtrado):
    """Muestra la secci√≥n de diagn√≥stico con an√°lisis detallado de los datos."""
    with st.expander("üîç Diagn√≥stico de Datos"):
        st.markdown("### Diagn√≥stico de Datos")
        st.markdown("Esta secci√≥n proporciona un diagn√≥stico detallado de los datos cargados desde Google Sheets.")

        # Informaci√≥n general
        st.markdown("#### Informaci√≥n General")
        col1, col2 = st.columns(2)

        with col1:
            st.metric("Total de Registros", len(registros_df))
            st.metric("Registros Filtrados", len(df_filtrado))

        with col2:
            if 'TipoDato' in registros_df.columns:
                st.metric("Registros Nuevos", len(registros_df[registros_df['TipoDato'].str.upper() == 'NUEVO']))
                st.metric("Registros a Actualizar",
                          len(registros_df[registros_df['TipoDato'].str.upper() == 'ACTUALIZAR']))

        # Estado de Google Sheets
        st.markdown("#### Estado de Google Sheets")
        try:
            manager = get_sheets_manager()
            hojas = manager.listar_hojas()
            st.success(f"‚úÖ Conectado a Google Sheets. Hojas disponibles: {', '.join(hojas)}")
        except Exception as e:
            st.error(f"‚ùå Error de conexi√≥n con Google Sheets: {str(e)}")

def mostrar_ayuda():
    """Muestra la secci√≥n de ayuda con informaci√≥n sobre el uso del tablero."""
    with st.expander("‚ùì Ayuda"):
        st.markdown("### Ayuda del Tablero de Control")
        st.markdown("""
        Este tablero de control permite visualizar y gestionar el seguimiento de cronogramas con **persistencia permanente en Google Sheets**.

        #### üîó Caracter√≠sticas Principales
        - **‚úÖ Datos sincronizados en tiempo real** con Google Sheets
        - **üîí Respaldo autom√°tico** de cada cambio
        - **üë• Colaboraci√≥n simult√°nea** de m√∫ltiples usuarios
        - **üì± Acceso desde cualquier dispositivo**

        #### üìä Navegaci√≥n
        - **Dashboard**: M√©tricas generales, comparaci√≥n con metas y diagrama de Gantt
        - **Edici√≥n de Registros**: Edici√≥n individual con validaciones autom√°ticas
        - **Alertas de Vencimientos**: Seguimiento de fechas cr√≠ticas
        - **Reportes**: An√°lisis avanzados con filtros personalizados

        #### üîß Funcionalidades Google Sheets
        - **Carga desde Excel**: Sube archivos Excel para sincronizar autom√°ticamente
        - **Descarga completa**: Exporta todos los datos en formato Excel
        - **Backup autom√°tico**: Cada cambio crea una copia de seguridad
        - **Edici√≥n directa**: Tambi√©n puedes editar directamente en Google Sheets

        #### üíæ Guardado Autom√°tico
        Los cambios se guardan autom√°ticamente en Google Sheets al:
        - Modificar cualquier campo de fecha
        - Cambiar estados o valores
        - Aplicar validaciones de reglas de negocio

        #### üÜò Soporte
        Para configuraci√≥n inicial o problemas t√©cnicos:
        - üìã Consulta las [Instrucciones de Configuraci√≥n](https://github.com/tu-repo/INSTRUCCIONES_CONFIGURACION.md)
        - üîß Usa el panel "Configuraci√≥n Google Sheets" en la barra lateral
        - üîÑ Utiliza el bot√≥n "Reconectar" si hay problemas de conexi√≥n
        """)

def main():
    try:
        # Inicializar estado de sesi√≥n para registro de cambios
        if 'cambios_pendientes' not in st.session_state:
            st.session_state.cambios_pendientes = False

        if 'mensaje_guardado' not in st.session_state:
            st.session_state.mensaje_guardado = None

        # Inicializar lista de funcionarios en el estado de sesi√≥n
        if 'funcionarios' not in st.session_state:
            st.session_state.funcionarios = []

        # Configuraci√≥n de la p√°gina
        setup_page()

        # Cargar estilos
        load_css()

        # MODIFICADO: Mostrar el header con logos
        mostrar_header_logos()
        
        # Mostrar estado de Google Sheets
        st.markdown("### üîó Estado de Google Sheets")
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.info("üîÑ Cargando datos desde Google Sheets...")
        
        with col2:
            if st.button("üîÑ Reconectar"):
                st.rerun()

        # Sidebar con configuraciones
        mostrar_configuracion_sheets()
        mostrar_carga_archivos()

        # Informaci√≥n sobre el tablero
        st.sidebar.markdown('<div class="subtitle">Informaci√≥n</div>', unsafe_allow_html=True)
        st.sidebar.markdown("""
        <div class="info-box">
        <p><strong>Dashboard de Seguimiento a Datos Tem√°ticos</strong></p>
        <p>Este tablero muestra el seguimiento de cronogramas conectado a Google Sheets para persistencia permanente de datos.</p>
        <p><strong>‚úÖ Datos sincronizados en tiempo real</strong></p>
        <p><strong>üîí Respaldo autom√°tico</strong></p>
        <p><strong>üë• Colaboraci√≥n en tiempo real</strong></p>
        </div>
        """, unsafe_allow_html=True)

        # Cargar datos
        registros_df, meta_df = cargar_datos()

        # Verificar si los DataFrames est√°n vac√≠os o no tienen registros
        if registros_df.empty:
            st.warning(
                "‚ö†Ô∏è No hay datos de registros en Google Sheets. Puedes:")
            col1, col2 = st.columns(2)
            with col1:
                st.markdown("- üìÅ Subir un archivo Excel usando el panel lateral")
            with col2:
                st.markdown("- ‚ûï Agregar datos directamente en Google Sheets")
            
            # Crear estructura m√≠nima para que la app funcione
            registros_df = pd.DataFrame(columns=[
                'Cod', 'Entidad', 'TipoDato', 'Nivel Informaci√≥n ',
                'Acuerdo de compromiso', 'An√°lisis y cronograma',
                'Est√°ndares', 'Publicaci√≥n', 'Fecha de entrega de informaci√≥n',
                'Plazo de an√°lisis', 'Plazo de cronograma', 'Plazo de oficio de cierre'
            ])

        # Asegurar que las columnas requeridas existan
        columnas_requeridas = ['Cod', 'Entidad', 'TipoDato', 'Acuerdo de compromiso',
                               'An√°lisis y cronograma', 'Est√°ndares', 'Publicaci√≥n',
                               'Nivel Informaci√≥n ', 'Fecha de entrega de informaci√≥n',
                               'Plazo de an√°lisis', 'Plazo de cronograma', 'Plazo de oficio de cierre']

        for columna in columnas_requeridas:
            if columna not in registros_df.columns:
                registros_df[columna] = ''

        # Aplicar validaciones de reglas de negocio
        registros_df = validar_reglas_negocio(registros_df)

        # Procesar las metas
        metas_nuevas_df, metas_actualizar_df = procesar_metas(meta_df)

        # Agregar columna de porcentaje de avance
        registros_df['Porcentaje Avance'] = registros_df.apply(calcular_porcentaje_avance, axis=1)

        # Agregar columna de estado de fechas
        registros_df['Estado Fechas'] = registros_df.apply(verificar_estado_fechas, axis=1)

        # Crear pesta√±as
        tab1, tab2, tab3, tab4 = st.tabs(["Dashboard", "Edici√≥n de Registros", "Alertas de Vencimientos", "Reportes"])
     
        with tab1:
            # FILTROS PARA DASHBOARD
            st.markdown("### üîç Filtros")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                # Filtro por entidad
                entidades = ['Todas'] + sorted(registros_df['Entidad'].unique().tolist())
                entidad_seleccionada = st.selectbox('Entidad', entidades, key="dash_entidad")
            
            with col2:
                # Filtro por funcionario
                funcionarios = ['Todos']
                if 'Funcionario' in registros_df.columns:
                    funcionarios += sorted(registros_df['Funcionario'].dropna().unique().tolist())
                funcionario_seleccionado = st.selectbox('Funcionario', funcionarios, key="dash_funcionario")
            
            with col3:
                # Filtro por tipo de dato
                tipos_dato = ['Todos'] + sorted(registros_df['TipoDato'].dropna().unique().tolist())
                tipo_dato_seleccionado = st.selectbox('Tipo de Dato', tipos_dato, key="dash_tipo")
            
            with col4:
                # MODIFICADO: Filtro por nivel de informaci√≥n dependiente de entidad
                if entidad_seleccionada != 'Todas':
                    # Filtrar niveles seg√∫n la entidad seleccionada
                    niveles_entidad = registros_df[registros_df['Entidad'] == entidad_seleccionada]['Nivel Informaci√≥n '].dropna().unique().tolist()
                    niveles = ['Todos'] + sorted(niveles_entidad)
                    nivel_seleccionado = st.selectbox('Nivel de Informaci√≥n', niveles, key="dash_nivel")
                else:
                    # Si no hay entidad seleccionada, no mostrar el filtro de nivel
                    nivel_seleccionado = 'Todos'
            
            # Aplicar filtros
            df_filtrado = registros_df.copy()
            
            if entidad_seleccionada != 'Todas':
                df_filtrado = df_filtrado[df_filtrado['Entidad'] == entidad_seleccionada]
            
            if funcionario_seleccionado != 'Todos' and 'Funcionario' in df_filtrado.columns:
                df_filtrado = df_filtrado[df_filtrado['Funcionario'] == funcionario_seleccionado]
            
            if tipo_dato_seleccionado != 'Todos':
                df_filtrado = df_filtrado[df_filtrado['TipoDato'].str.upper() == tipo_dato_seleccionado.upper()]
            
            if nivel_seleccionado != 'Todos':
                df_filtrado = df_filtrado[df_filtrado['Nivel Informaci√≥n '] == nivel_seleccionado]
            
            st.markdown("---")  # Separador visual
            
            # MODIFICADO: Pasar los valores de filtros al dashboard
            mostrar_dashboard(df_filtrado, metas_nuevas_df, metas_actualizar_df, registros_df,
                            entidad_seleccionada, funcionario_seleccionado, nivel_seleccionado)     

        with tab2:
            registros_df = mostrar_edicion_registros(registros_df)

        with tab3:
            st.markdown("---")  # Separador visual
            mostrar_alertas_vencimientos(registros_df)

        with tab4:
            # Nueva pesta√±a de Reportes
            st.markdown("### üîç Filtros")
            
            # Primera fila de filtros
            col1, col2, col3 = st.columns(3)
            
            with col1:
                # 1. Filtro por tipo de dato
                tipos_dato_reporte = ['Todos'] + sorted(registros_df['TipoDato'].dropna().unique().tolist())
                tipo_dato_reporte = st.selectbox('Tipo de Dato', tipos_dato_reporte, key="reporte_tipo")
            
            with col2:
                # 2. Filtro por acuerdo de compromiso suscrito
                acuerdo_opciones = ['Todos', 'Suscrito', 'No Suscrito']
                acuerdo_filtro = st.selectbox('Acuerdo de Compromiso', acuerdo_opciones, key="reporte_acuerdo")
            
            with col3:
                # 3. Filtro por an√°lisis y cronograma
                analisis_opciones = ['Todos', 'Completado', 'No Completado']
                analisis_filtro = st.selectbox('An√°lisis y Cronograma', analisis_opciones, key="reporte_analisis")
            
            # Segunda fila de filtros
            col4, col5, col6 = st.columns(3)
            
            with col4:
                # 4. Filtro por est√°ndares completado
                estandares_opciones = ['Todos', 'Completado', 'No Completado']
                estandares_filtro = st.selectbox('Est√°ndares', estandares_opciones, key="reporte_estandares")
            
            with col5:
                # 5. Filtro por publicaci√≥n
                publicacion_opciones = ['Todos', 'Completado', 'No Completado']
                publicacion_filtro = st.selectbox('Publicaci√≥n', publicacion_opciones, key="reporte_publicacion")
            
            with col6:
                # 6. Filtro por finalizado
                finalizado_opciones = ['Todos', 'Finalizado', 'No Finalizado']
                finalizado_filtro = st.selectbox('Finalizado', finalizado_opciones, key="reporte_finalizado")
            
            st.markdown("---")  # Separador visual
            
            mostrar_reportes(registros_df, tipo_dato_reporte, acuerdo_filtro, analisis_filtro, 
                           estandares_filtro, publicacion_filtro, finalizado_filtro)

        # Agregar secci√≥n de diagn√≥stico
        mostrar_diagnostico(registros_df, meta_df, metas_nuevas_df, metas_actualizar_df, df_filtrado)

        # Agregar secci√≥n de ayuda
        mostrar_ayuda()

    except Exception as e:
        st.error(f"‚ùå Error cr√≠tico: {str(e)}")
        st.markdown("### üÜò Soluci√≥n de Problemas")
        st.markdown("""
        **Posibles causas:**
        1. **Configuraci√≥n de Google Sheets:** Verifica las credenciales y permisos
        2. **Conexi√≥n a Internet:** Aseg√∫rate de tener conexi√≥n estable
        3. **Estructura de datos:** Verifica que las hojas tengan la estructura correcta
        
        **Acciones recomendadas:**
        - üîÑ Usa el bot√≥n "Reconectar" en la parte superior
        - üîß Revisa la configuraci√≥n en el panel lateral
        - üìã Consulta las instrucciones de configuraci√≥n
        """)

if __name__ == "__main__":
    main()
