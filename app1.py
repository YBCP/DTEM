import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.figure_factory as ff
import plotly.graph_objects as go
from datetime import datetime, timedelta, date
from validaciones_utils import validar_reglas_negocio, mostrar_estado_validaciones, verificar_condiciones_estandares, verificar_condiciones_oficio_cierre
import io
import matplotlib
import base64
import os
import re
from fecha_utils import calcular_plazo_analisis, actualizar_plazo_analisis, calcular_plazo_cronograma, actualizar_plazo_cronograma, calcular_plazo_oficio_cierre, actualizar_plazo_oficio_cierre

# Importar las funciones corregidas
from config import setup_page, load_css
from data_utils import (
    cargar_datos, procesar_metas, calcular_porcentaje_avance,
    verificar_estado_fechas, formatear_fecha, es_fecha_valida,
    validar_campos_fecha, guardar_datos_editados, guardar_datos_editados_rapido, procesar_fecha,
    contar_registros_completados_por_fecha, cargar_datos_desde_excel
)
from visualization import crear_gantt, comparar_avance_metas
from constants import REGISTROS_DATA, META_DATA
from sheets_utils import test_connection, get_sheets_manager

# ========== FUNCIONES AUXILIARES RESTAURADAS ==========

def string_a_fecha(fecha_str):
    """Convierte un string de fecha a objeto datetime para mostrar en el selector de fecha."""
    if not fecha_str or fecha_str == "":
        return None
    fecha = procesar_fecha(fecha_str)
    return fecha

def highlight_estado_fechas(s):
    """Funci√≥n para aplicar estilo seg√∫n el valor de 'Estado Fechas'"""
    if 'Estado Fechas' in s and s['Estado Fechas'] == 'vencido':
        return ['background-color: #fee2e2'] * len(s)
    elif 'Estado Fechas' in s and s['Estado Fechas'] == 'proximo':
        return ['background-color: #fef3c7'] * len(s)
    else:
        return ['background-color: #ffffff'] * len(s)

def on_change_callback():
    """Callback para marcar que hay cambios pendientes."""
    st.session_state.cambios_pendientes = True

def fecha_para_selector(fecha_str):
    """Convierte una fecha en string a un objeto datetime para el selector."""
    if not fecha_str or pd.isna(fecha_str) or fecha_str == '':
        return None
    try:
        fecha = procesar_fecha(fecha_str)
        if fecha is not None:
            return fecha
    except:
        pass
    return None

def fecha_desde_selector_a_string(fecha):
    """Convierte un objeto datetime del selector a string con formato DD/MM/AAAA."""
    if fecha is None:
        return ""
    return fecha.strftime('%d/%m/%Y')

# ========== FUNCIONES DE CONFIGURACI√ìN RESTAURADAS ==========

def mostrar_configuracion_sheets():
    """Muestra la configuraci√≥n y estado de Google Sheets"""
    with st.sidebar.expander("üîß Configuraci√≥n Google Sheets"):
        st.markdown("### Estado de Conexi√≥n")
        
        if st.button("üîÑ Probar Conexi√≥n", help="Verifica la conexi√≥n con Google Sheets"):
            with st.spinner("Probando conexi√≥n..."):
                test_connection()
        
        try:
            manager = get_sheets_manager()
            hojas = manager.listar_hojas()
            st.markdown("**Hojas disponibles:**")
            for hoja in hojas:
                st.markdown(f"- {hoja}")
        except:
            st.warning("No se pudo obtener la lista de hojas")
        
        st.markdown("---")
        st.markdown("**¬øNecesitas configurar Google Sheets?**")
        st.markdown("[üìã Ver instrucciones completas](https://github.com/tu-repo/INSTRUCCIONES_CONFIGURACION.md)")
        st.info("üîí Los datos se guardan de forma segura en Google Sheets con autenticaci√≥n OAuth2")

def mostrar_carga_archivos():
    """Muestra la secci√≥n de carga de archivos Excel/CSV"""
    with st.sidebar.expander("üìÅ Cargar Datos desde Excel"):
        st.markdown("### Subir Archivo Excel")
        
        uploaded_file = st.file_uploader(
            "Selecciona un archivo Excel",
            type=['xlsx', 'xls'],
            help="El archivo se sincronizar√° autom√°ticamente con Google Sheets"
        )
        
        if uploaded_file is not None:
            if st.button("üîÑ Sincronizar con Google Sheets"):
                with st.spinner("Procesando y sincronizando archivo..."):
                    nuevos_registros, nuevas_metas = cargar_datos_desde_excel(uploaded_file)
                    
                    if nuevos_registros is not None:
                        st.success("‚úÖ Archivo sincronizado exitosamente!")
                        st.info("üîÑ Recargando la aplicaci√≥n con los nuevos datos...")
                        st.rerun()
                    else:
                        st.error("‚ùå Error al procesar el archivo")
        
        st.markdown("---")
        st.markdown("**Formato esperado:**")
        st.markdown("- **Hoja 'Registros':** Datos principales")
        st.markdown("- **Hoja 'Metas':** Metas quincenales")
        st.warning("‚ö†Ô∏è La sincronizaci√≥n sobrescribir√° los datos existentes en Google Sheets")

# ========== FUNCI√ìN DE EDICI√ìN RESTAURADA Y MEJORADA ==========

def mostrar_edicion_registros(registros_df):
    """Muestra la pesta√±a de edici√≥n de registros - VERSI√ìN COMPLETA RESTAURADA."""
    st.markdown('<div class="subtitle">Edici√≥n de Registros</div>', unsafe_allow_html=True)

    st.info(
        "Esta secci√≥n permite editar los datos usando selectores de fecha y opciones. Los cambios se guardan autom√°ticamente en Google Sheets.")

    # Explicaci√≥n adicional sobre las fechas y reglas de validaci√≥n
    st.warning("""
    **Importante**: 
    - Para los campos de fecha, utilice el selector de calendario que aparece.
    - El campo "Plazo de an√°lisis" se calcula autom√°ticamente como 5 d√≠as h√°biles despu√©s de la "Fecha de entrega de informaci√≥n", sin contar fines de semana ni festivos.
    - El campo "Plazo de cronograma" se calcula autom√°ticamente como 3 d√≠as h√°biles despu√©s del "Plazo de an√°lisis", sin contar fines de semana ni festivos.
    - El campo "Plazo de oficio de cierre" se calcula autom√°ticamente como 7 d√≠as h√°biles despu√©s de la fecha real de "Publicaci√≥n", sin contar fines de semana ni festivos.
    - Se aplicar√°n autom√°ticamente las siguientes validaciones:
        1. Si 'Entrega acuerdo de compromiso' no est√° vac√≠o, 'Acuerdo de compromiso' se actualizar√° a 'SI'
        2. Si 'An√°lisis y cronograma' tiene fecha, 'An√°lisis de informaci√≥n' se actualizar√° a 'SI'
        3. Al introducir fecha en 'Est√°ndares', los campos que no est√©n 'Completo' se actualizar√°n autom√°ticamente a 'No aplica'
        4. Si introduce fecha en 'Publicaci√≥n', 'Disponer datos tem√°ticos' se actualizar√° autom√°ticamente a 'SI'
        5. Para introducir una fecha en 'Fecha de oficio de cierre', debe tener la etapa de Publicaci√≥n completada (con fecha)
        6. Al introducir una fecha en 'Fecha de oficio de cierre', el campo 'Estado' se actualizar√° autom√°ticamente a 'Completado'
        7. Si se elimina la fecha de oficio de cierre, el Estado se cambiar√° autom√°ticamente a 'En proceso'
    """)
    
    # Mostrar mensaje de guardado si existe
    if st.session_state.mensaje_guardado:
        if st.session_state.mensaje_guardado[0] == "success":
            st.success(st.session_state.mensaje_guardado[1])
        else:
            st.error(st.session_state.mensaje_guardado[1])
        # Limpiar mensaje despu√©s de mostrarlo
        st.session_state.mensaje_guardado = None

    st.markdown("### Edici√≥n Individual de Registros")

    # Selector de registro - mostrar lista completa de registros para seleccionar
    codigos_registros = registros_df['Cod'].astype(str).tolist()
    entidades_registros = registros_df['Entidad'].tolist()
    niveles_registros = registros_df['Nivel Informaci√≥n '].tolist()

    # Crear opciones para el selector combinando informaci√≥n
    opciones_registros = [f"{codigos_registros[i]} - {entidades_registros[i]} - {niveles_registros[i]}"
                          for i in range(len(codigos_registros))]

    # Agregar el selector de registro
    seleccion_registro = st.selectbox(
        "Seleccione un registro para editar:",
        options=opciones_registros,
        key="selector_registro"
    )

    # Obtener el √≠ndice del registro seleccionado
    indice_seleccionado = opciones_registros.index(seleccion_registro)

    # Mostrar el registro seleccionado para edici√≥n
    try:
        # Obtener el registro seleccionado
        row = registros_df.iloc[indice_seleccionado].copy()

        # Flag para detectar cambios
        edited = False

        # Contenedor para los datos de edici√≥n
        with st.container():
            st.markdown("---")
            # T√≠tulo del registro
            st.markdown(f"### Editando Registro #{row['Cod']} - {row['Entidad']}")
            st.markdown(f"**Nivel de Informaci√≥n:** {row['Nivel Informaci√≥n ']}")
            st.markdown("---")

            # ===== SECCI√ìN 1: INFORMACI√ìN B√ÅSICA =====
            st.markdown("### 1. Informaci√≥n B√°sica")
            col1, col2, col3 = st.columns(3)

            with col1:
                # Campos no editables
                st.text_input("C√≥digo", value=row['Cod'], disabled=True)

            with col2:
                # Tipo de Dato
                nuevo_tipo = st.selectbox(
                    "Tipo de Dato",
                    options=["Nuevo", "Actualizar"],
                    index=0 if row['TipoDato'].upper() == "NUEVO" else 1,
                    key=f"tipo_{indice_seleccionado}",
                    on_change=on_change_callback
                )
                if nuevo_tipo != row['TipoDato']:
                    registros_df.at[registros_df.index[indice_seleccionado], 'TipoDato'] = nuevo_tipo
                    edited = True

            with col3:
                # Nivel de Informaci√≥n
                nuevo_nivel = st.text_input(
                    "Nivel de Informaci√≥n",
                    value=row['Nivel Informaci√≥n '] if pd.notna(row['Nivel Informaci√≥n ']) else "",
                    key=f"nivel_info_{indice_seleccionado}",
                    on_change=on_change_callback
                )
                if nuevo_nivel != row['Nivel Informaci√≥n ']:
                    registros_df.at[registros_df.index[indice_seleccionado], 'Nivel Informaci√≥n '] = nuevo_nivel
                    edited = True

            # Frecuencia de actualizaci√≥n y Funcionario
            if 'Frecuencia actualizacion ' in row:
                col1, col2 = st.columns(2)
                with col1:
                    nueva_frecuencia = st.selectbox(
                        "Frecuencia de actualizaci√≥n",
                        options=["", "Diaria", "Semanal", "Mensual", "Trimestral", "Semestral", "Anual"],
                        index=["", "Diaria", "Semanal", "Mensual", "Trimestral", "Semestral", "Anual"].index(
                            row['Frecuencia actualizacion ']) if row['Frecuencia actualizacion '] in ["", "Diaria",
                                                                                                      "Semanal",
                                                                                                      "Mensual",
                                                                                                      "Trimestral",
                                                                                                      "Semestral",
                                                                                                      "Anual"] else 0,
                        key=f"frecuencia_{indice_seleccionado}",
                        on_change=on_change_callback
                    )
                    if nueva_frecuencia != row['Frecuencia actualizacion ']:
                        registros_df.at[registros_df.index[indice_seleccionado], 'Frecuencia actualizacion '] = nueva_frecuencia
                        edited = True

                # Funcionario (RESTAURADO)
                if 'Funcionario' in row:
                    with col2:
                        # Inicializar la lista de funcionarios si es la primera vez
                        if not st.session_state.funcionarios:
                            # Obtener valores √∫nicos de funcionarios que no sean NaN
                            funcionarios_unicos = registros_df['Funcionario'].dropna().unique().tolist()
                            st.session_state.funcionarios = [f for f in funcionarios_unicos if f]

                        # Crear un campo de texto para nuevo funcionario
                        nuevo_funcionario_input = st.text_input(
                            "Nuevo funcionario (dejar vac√≠o si selecciona existente)",
                            key=f"nuevo_funcionario_{indice_seleccionado}"
                        )

                        # Si se introduce un nuevo funcionario, agregarlo a la lista
                        if nuevo_funcionario_input and nuevo_funcionario_input not in st.session_state.funcionarios:
                            st.session_state.funcionarios.append(nuevo_funcionario_input)

                        # Ordenar la lista de funcionarios alfab√©ticamente
                        funcionarios_ordenados = sorted(st.session_state.funcionarios)
                        opciones_funcionarios = [""] + funcionarios_ordenados

                        # Determinar el √≠ndice del funcionario actual
                        indice_funcionario = 0
                        if pd.notna(row['Funcionario']) and row['Funcionario'] in opciones_funcionarios:
                            indice_funcionario = opciones_funcionarios.index(row['Funcionario'])

                        # Crear el selectbox para elegir funcionario
                        funcionario_seleccionado = st.selectbox(
                            "Seleccionar funcionario",
                            options=opciones_funcionarios,
                            index=indice_funcionario,
                            key=f"funcionario_select_{indice_seleccionado}",
                            on_change=on_change_callback
                        )

                        # Determinar el valor final del funcionario
                        funcionario_final = nuevo_funcionario_input if nuevo_funcionario_input else funcionario_seleccionado

                        # Actualizar el DataFrame si el funcionario cambia
                        if funcionario_final != row.get('Funcionario', ''):
                            registros_df.at[registros_df.index[indice_seleccionado], 'Funcionario'] = funcionario_final
                            edited = True

            # ===== SECCI√ìN 2: ACTA DE COMPROMISO =====
            st.markdown("### 2. Acta de Compromiso")

            # Actas de acercamiento (RESTAURADO)
            if 'Actas de acercamiento y manifestaci√≥n de inter√©s' in row:
                col1, col2 = st.columns(2)
                with col1:
                    actas_acercamiento = st.selectbox(
                        "Actas de acercamiento",
                        options=["", "Si", "No"],
                        index=1 if row['Actas de acercamiento y manifestaci√≥n de inter√©s'].upper() in ["SI", "S√ç",
                                                                                                       "YES",
                                                                                                       "Y"] else (
                            2 if row['Actas de acercamiento y manifestaci√≥n de inter√©s'].upper() == "NO" else 0),
                        key=f"actas_acercamiento_{indice_seleccionado}",
                        on_change=on_change_callback
                    )
                    if actas_acercamiento != row['Actas de acercamiento y manifestaci√≥n de inter√©s']:
                        registros_df.at[registros_df.index[
                            indice_seleccionado], 'Actas de acercamiento y manifestaci√≥n de inter√©s'] = actas_acercamiento
                        edited = True

            # Fechas de compromiso
            col1, col2, col3 = st.columns(3)
            
            # Suscripci√≥n acuerdo de compromiso (RESTAURADO)
            if 'Suscripci√≥n acuerdo de compromiso' in row:
                with col1:
                    fecha_suscripcion_dt = fecha_para_selector(row['Suscripci√≥n acuerdo de compromiso'])
                    nueva_fecha_suscripcion = st.date_input(
                        "Suscripci√≥n acuerdo de compromiso",
                        value=fecha_suscripcion_dt,
                        format="DD/MM/YYYY",
                        key=f"fecha_suscripcion_{indice_seleccionado}",
                        on_change=on_change_callback
                    )
                    nueva_fecha_suscripcion_str = fecha_desde_selector_a_string(
                        nueva_fecha_suscripcion) if nueva_fecha_suscripcion else ""

                    fecha_original = "" if pd.isna(row['Suscripci√≥n acuerdo de compromiso']) else row[
                        'Suscripci√≥n acuerdo de compromiso']
                    if nueva_fecha_suscripcion_str != fecha_original:
                        registros_df.at[registros_df.index[
                            indice_seleccionado], 'Suscripci√≥n acuerdo de compromiso'] = nueva_fecha_suscripcion_str
                        edited = True

            with col2:
                # Entrega acuerdo de compromiso
                fecha_entrega_dt = fecha_para_selector(row['Entrega acuerdo de compromiso'])
                nueva_fecha_entrega = st.date_input(
                    "Entrega acuerdo de compromiso",
                    value=fecha_entrega_dt,
                    format="DD/MM/YYYY",
                    key=f"fecha_entrega_{indice_seleccionado}",
                    on_change=on_change_callback
                )

                nueva_fecha_entrega_str = fecha_desde_selector_a_string(
                    nueva_fecha_entrega) if nueva_fecha_entrega else ""

                fecha_original = "" if pd.isna(row['Entrega acuerdo de compromiso']) else row[
                    'Entrega acuerdo de compromiso']

                if nueva_fecha_entrega_str != fecha_original:
                    registros_df.at[registros_df.index[
                        indice_seleccionado], 'Entrega acuerdo de compromiso'] = nueva_fecha_entrega_str
                    edited = True

            with col3:
                # Acuerdo de compromiso
                nuevo_acuerdo = st.selectbox(
                    "Acuerdo de compromiso",
                    options=["", "Si", "No"],
                    index=1 if row['Acuerdo de compromiso'].upper() in ["SI", "S√ç", "YES", "Y"] else (
                        2 if row['Acuerdo de compromiso'].upper() == "NO" else 0),
                    key=f"acuerdo_{indice_seleccionado}",
                    on_change=on_change_callback
                )
                if nuevo_acuerdo != row['Acuerdo de compromiso']:
                    registros_df.at[
                        registros_df.index[indice_seleccionado], 'Acuerdo de compromiso'] = nuevo_acuerdo
                    edited = True

            # ===== SECCI√ìN 3: AN√ÅLISIS Y CRONOGRAMA =====
            st.markdown("### 3. An√°lisis y Cronograma")

            # Gesti√≥n acceso a datos (RESTAURADO)
            if 'Gestion acceso a los datos y documentos requeridos ' in row:
                gestion_acceso = st.selectbox(
                    "Gesti√≥n acceso a los datos",
                    options=["", "Si", "No"],
                    index=1 if row['Gestion acceso a los datos y documentos requeridos '].upper() in ["SI", "S√ç",
                                                                                                      "YES",
                                                                                                      "Y"] else (
                        2 if row['Gestion acceso a los datos y documentos requeridos '].upper() == "NO" else 0),
                    key=f"gestion_acceso_analisis_{indice_seleccionado}",
                    on_change=on_change_callback
                )
                if gestion_acceso != row['Gestion acceso a los datos y documentos requeridos ']:
                    registros_df.at[registros_df.index[
                        indice_seleccionado], 'Gestion acceso a los datos y documentos requeridos '] = gestion_acceso
                    edited = True

            col1, col2, col3 = st.columns(3)

            # Campos de an√°lisis (RESTAURADOS)
            with col1:
                if 'An√°lisis de informaci√≥n' in row:
                    analisis_info = st.selectbox(
                        "An√°lisis de informaci√≥n",
                        options=["", "Si", "No"],
                        index=1 if row['An√°lisis de informaci√≥n'].upper() in ["SI", "S√ç", "YES", "Y"] else (
                            2 if row['An√°lisis de informaci√≥n'].upper() == "NO" else 0),
                        key=f"analisis_info_{indice_seleccionado}",
                        on_change=on_change_callback
                    )
                    if analisis_info != row['An√°lisis de informaci√≥n']:
                        registros_df.at[
                            registros_df.index[indice_seleccionado], 'An√°lisis de informaci√≥n'] = analisis_info
                        edited = True

            with col2:
                if 'Cronograma Concertado' in row:
                    cronograma_concertado = st.selectbox(
                        "Cronograma Concertado",
                        options=["", "Si", "No"],
                        index=1 if row['Cronograma Concertado'].upper() in ["SI", "S√ç", "YES", "Y"] else (
                            2 if row['Cronograma Concertado'].upper() == "NO" else 0),
                        key=f"cronograma_concertado_{indice_seleccionado}",
                        on_change=on_change_callback
                    )
                    if cronograma_concertado != row['Cronograma Concertado']:
                        registros_df.at[registros_df.index[
                            indice_seleccionado], 'Cronograma Concertado'] = cronograma_concertado
                        edited = True

            with col3:
                if 'Seguimiento a los acuerdos' in row:
                    seguimiento_acuerdos = st.selectbox(
                        "Seguimiento a los acuerdos",
                        options=["", "Si", "No"],
                        index=1 if row['Seguimiento a los acuerdos'].upper() in ["SI", "S√ç", "YES", "Y"] else (
                            2 if row['Seguimiento a los acuerdos'].upper() == "NO" else 0),
                        key=f"seguimiento_acuerdos_{indice_seleccionado}",
                        on_change=on_change_callback
                    )
                    if seguimiento_acuerdos != row['Seguimiento a los acuerdos']:
                        registros_df.at[registros_df.index[
                            indice_seleccionado], 'Seguimiento a los acuerdos'] = seguimiento_acuerdos
                        edited = True

            # Fechas de an√°lisis y cronograma
            col1, col2 = st.columns(2)

            with col1:
                # Fecha de entrega de informaci√≥n con c√°lculo autom√°tico de plazos
                fecha_entrega_info_dt = fecha_para_selector(row['Fecha de entrega de informaci√≥n'])
                nueva_fecha_entrega_info = st.date_input(
                    "Fecha de entrega de informaci√≥n",
                    value=fecha_entrega_info_dt,
                    format="DD/MM/YYYY",
                    key=f"fecha_entrega_info_{indice_seleccionado}"
                )

                nueva_fecha_entrega_info_str = fecha_desde_selector_a_string(
                    nueva_fecha_entrega_info) if nueva_fecha_entrega_info else ""

                fecha_original = "" if pd.isna(row['Fecha de entrega de informaci√≥n']) else row[
                    'Fecha de entrega de informaci√≥n']

                if nueva_fecha_entrega_info_str != fecha_original:
                    registros_df.at[registros_df.index[
                        indice_seleccionado], 'Fecha de entrega de informaci√≥n'] = nueva_fecha_entrega_info_str
                    edited = True

                    # Actualizar autom√°ticamente todos los plazos
                    registros_df = actualizar_plazo_analisis(registros_df)
                    registros_df = actualizar_plazo_cronograma(registros_df)
                    registros_df = actualizar_plazo_oficio_cierre(registros_df)

                    # Guardar cambios inmediatamente
                    with st.spinner("üíæ Recalculando plazos..."):
                        exito, mensaje = guardar_datos_editados_rapido(registros_df)
                        if exito:
                            st.success("‚úÖ Fecha actualizada y plazos recalculados")
                            st.rerun()

            with col2:
                # Fecha real de an√°lisis y cronograma
                fecha_analisis_dt = fecha_para_selector(row['An√°lisis y cronograma'])
                nueva_fecha_analisis = st.date_input(
                    "An√°lisis y cronograma (fecha real)",
                    value=fecha_analisis_dt,
                    format="DD/MM/YYYY",
                    key=f"fecha_analisis_{indice_seleccionado}",
                    on_change=on_change_callback
                )

                nueva_fecha_analisis_str = fecha_desde_selector_a_string(
                    nueva_fecha_analisis) if nueva_fecha_analisis else ""

                fecha_original = "" if pd.isna(row['An√°lisis y cronograma']) else row['An√°lisis y cronograma']
                if nueva_fecha_analisis_str != fecha_original:
                    registros_df.at[
                        registros_df.index[indice_seleccionado], 'An√°lisis y cronograma'] = nueva_fecha_analisis_str
                    edited = True

            # Mostrar plazos calculados autom√°ticamente
            col1, col2 = st.columns(2)
            with col1:
                plazo_analisis = row['Plazo de an√°lisis'] if 'Plazo de an√°lisis' in row and pd.notna(
                    row['Plazo de an√°lisis']) else ""
                st.text_input(
                    "Plazo de an√°lisis (calculado autom√°ticamente)",
                    value=plazo_analisis,
                    disabled=True,
                    key=f"plazo_analisis_{indice_seleccionado}"
                )

            with col2:
                plazo_cronograma = row['Plazo de cronograma'] if 'Plazo de cronograma' in row and pd.notna(
                    row['Plazo de cronograma']) else ""
                st.text_input(
                    "Plazo de cronograma (calculado autom√°ticamente)",
                    value=plazo_cronograma,
                    disabled=True,
                    key=f"plazo_cronograma_{indice_seleccionado}"
                )

            st.info(
                "Los plazos se calculan autom√°ticamente: An√°lisis (5 d√≠as h√°biles despu√©s de entrega), Cronograma (3 d√≠as h√°biles despu√©s del an√°lisis)."
            )

            # ===== SECCI√ìN 4: EST√ÅNDARES =====
            st.markdown("### 4. Est√°ndares")
            col1, col2 = st.columns(2)

            with col1:
                # Fecha programada para est√°ndares
                if 'Est√°ndares (fecha programada)' in row:
                    fecha_estandares_prog_dt = fecha_para_selector(row['Est√°ndares (fecha programada)'])
                    nueva_fecha_estandares_prog = st.date_input(
                        "Est√°ndares (fecha programada)",
                        value=fecha_estandares_prog_dt,
                        format="DD/MM/YYYY",
                        key=f"fecha_estandares_prog_{indice_seleccionado}",
                        on_change=on_change_callback
                    )
                    nueva_fecha_estandares_prog_str = fecha_desde_selector_a_string(
                        nueva_fecha_estandares_prog) if nueva_fecha_estandares_prog else ""

                    fecha_original = "" if pd.isna(row['Est√°ndares (fecha programada)']) else row[
                        'Est√°ndares (fecha programada)']
                    if nueva_fecha_estandares_prog_str != fecha_original:
                        registros_df.at[registros_df.index[
                            indice_seleccionado], 'Est√°ndares (fecha programada)'] = nueva_fecha_estandares_prog_str
                        edited = True

            with col2:
                # Fecha real de est√°ndares
                fecha_estandares_dt = fecha_para_selector(row['Est√°ndares'])
                nueva_fecha_estandares = st.date_input(
                    "Fecha de est√°ndares (real)",
                    value=fecha_estandares_dt,
                    format="DD/MM/YYYY",
                    key=f"fecha_estandares_{indice_seleccionado}",
                    on_change=on_change_callback
                )

                nueva_fecha_estandares_str = fecha_desde_selector_a_string(
                    nueva_fecha_estandares) if nueva_fecha_estandares else ""

                fecha_original = "" if pd.isna(row['Est√°ndares']) else row['Est√°ndares']

                if nueva_fecha_estandares_str and nueva_fecha_estandares_str != fecha_original:
                    registros_df.at[
                        registros_df.index[indice_seleccionado], 'Est√°ndares'] = nueva_fecha_estandares_str
                    
                    # Actualizar campos de est√°ndares que no est√©n "Completo" a "No aplica"
                    campos_estandares = ['Registro (completo)', 'ET (completo)', 'CO (completo)', 'DD (completo)',
                                         'REC (completo)', 'SERVICIO (completo)']
                    
                    campos_actualizados = []
                    for campo in campos_estandares:
                        if campo in registros_df.columns:
                            valor_actual = str(registros_df.iloc[indice_seleccionado][campo]).strip()
                            if valor_actual.upper() != "COMPLETO":
                                registros_df.at[registros_df.index[indice_seleccionado], campo] = "No aplica"
                                nombre_campo = campo.split(' (')[0]
                                campos_actualizados.append(nombre_campo)
                    
                    if campos_actualizados:
                        st.info(f"Los siguientes est√°ndares se actualizaron a 'No aplica': {', '.join(campos_actualizados)}")
                    
                    edited = True

                    # Guardar cambios inmediatamente
                    with st.spinner("üíæ Guardando cambios..."):
                        registros_df = validar_reglas_negocio(registros_df)
                        exito, mensaje = guardar_datos_editados_rapido(registros_df)
                        if exito:
                            st.success("‚úÖ Est√°ndares actualizados")
                            st.rerun()

            # Secci√≥n: Cumplimiento de est√°ndares (RESTAURADA)
            st.markdown("#### Cumplimiento de est√°ndares")

            # Mostrar campos de est√°ndares con lista desplegable
            campos_estandares_completo = ['Registro (completo)', 'ET (completo)', 'CO (completo)', 'DD (completo)',
                                          'REC (completo)', 'SERVICIO (completo)']
            cols = st.columns(3)

            for i, campo in enumerate(campos_estandares_completo):
                # Verificar si el campo existe en el registro
                if campo not in registros_df.iloc[indice_seleccionado]:
                    registros_df.at[registros_df.index[indice_seleccionado], campo] = "Sin iniciar"

                # Obtener el valor actual directamente del DataFrame
                valor_actual = registros_df.iloc[indice_seleccionado][campo] if pd.notna(
                    registros_df.iloc[indice_seleccionado][campo]) else "Sin iniciar"

                with cols[i % 3]:
                    # Determinar el √≠ndice correcto para el valor actual
                    opciones = ["Sin iniciar", "En proceso", "Completo", "No aplica"]
                    indice_opcion = 0  # Por defecto "Sin iniciar"

                    if valor_actual in opciones:
                        indice_opcion = opciones.index(valor_actual)
                    elif str(valor_actual).lower() == "en proceso":
                        indice_opcion = 1
                    elif str(valor_actual).lower() == "completo":
                        indice_opcion = 2
                    elif str(valor_actual).lower() == "no aplica":
                        indice_opcion = 3

                    # Extraer nombre sin el sufijo para mostrar en la interfaz
                    nombre_campo = campo.split(' (')[0]

                    # Crear el selectbox con las opciones
                    nuevo_valor = st.selectbox(
                        f"{nombre_campo}",
                        options=opciones,
                        index=indice_opcion,
                        key=f"estandar_{campo}_{indice_seleccionado}",
                        help=f"Estado de cumplimiento para {nombre_campo}"
                    )

                    # Actualizar el valor si ha cambiado
                    if nuevo_valor != valor_actual:
                        registros_df.at[registros_df.index[indice_seleccionado], campo] = nuevo_valor
                        edited = True

                        # Guardar cambios inmediatamente
                        with st.spinner("üíæ Guardando..."):
                            registros_df = validar_reglas_negocio(registros_df)
                            exito, mensaje = guardar_datos_editados_rapido(registros_df)
                            if exito:
                                st.success(f"‚úÖ {nombre_campo} actualizado")
                                st.rerun()

            # Validaciones adicionales (RESTAURADAS)
            if 'Resultados de orientaci√≥n t√©cnica' in row or 'Verificaci√≥n del servicio web geogr√°fico' in row:
                st.markdown("#### Validaciones")
                cols = st.columns(3)

                campos_validaciones = [
                    'Resultados de orientaci√≥n t√©cnica',
                    'Verificaci√≥n del servicio web geogr√°fico',
                    'Verificar Aprobar Resultados',
                    'Revisar y validar los datos cargados en la base de datos',
                    'Aprobaci√≥n resultados obtenidos en la rientaci√≥n'
                ]

                for i, campo in enumerate(campos_validaciones):
                    if campo in row:
                        with cols[i % 3]:
                            valor_actual = row[campo]
                            nuevo_valor = st.selectbox(
                                f"{campo}",
                                options=["", "Si", "No"],
                                index=1 if valor_actual == "Si" or valor_actual.upper() in ["SI", "S√ç", "YES",
                                                                                            "Y"] else (
                                    2 if valor_actual == "No" or valor_actual.upper() == "NO" else 0
                                ),
                                key=f"{campo}_{indice_seleccionado}",
                                on_change=on_change_callback
                            )
                            if nuevo_valor != valor_actual:
                                registros_df.at[registros_df.index[indice_seleccionado], campo] = nuevo_valor
                                edited = True

            # ===== SECCI√ìN 5: PUBLICACI√ìN =====
            st.markdown("### 5. Publicaci√≥n")
            col1, col2, col3 = st.columns(3)

            with col1:
                # Disponer datos tem√°ticos (RESTAURADO)
                if 'Disponer datos tem√°ticos' in row:
                    disponer_datos = st.selectbox(
                        "Disponer datos tem√°ticos",
                        options=["", "Si", "No"],
                        index=1 if row['Disponer datos tem√°ticos'].upper() in ["SI", "S√ç", "YES", "Y"] else (
                            2 if row['Disponer datos tem√°ticos'].upper() == "NO" else 0),
                        key=f"disponer_datos_{indice_seleccionado}",
                        on_change=on_change_callback
                    )
                    if disponer_datos != row['Disponer datos tem√°ticos']:
                        registros_df.at[
                            registros_df.index[indice_seleccionado], 'Disponer datos tem√°ticos'] = disponer_datos
                        edited = True

            with col2:
                # Fecha programada para publicaci√≥n
                if 'Fecha de publicaci√≥n programada' in row:
                    fecha_publicacion_prog_dt = fecha_para_selector(row['Fecha de publicaci√≥n programada'])
                    nueva_fecha_publicacion_prog = st.date_input(
                        "Fecha de publicaci√≥n programada",
                        value=fecha_publicacion_prog_dt,
                        format="DD/MM/YYYY",
                        key=f"fecha_publicacion_prog_{indice_seleccionado}",
                        on_change=on_change_callback
                    )
                    nueva_fecha_publicacion_prog_str = fecha_desde_selector_a_string(
                        nueva_fecha_publicacion_prog) if nueva_fecha_publicacion_prog else ""

                    fecha_original = "" if pd.isna(row['Fecha de publicaci√≥n programada']) else row[
                        'Fecha de publicaci√≥n programada']
                    if nueva_fecha_publicacion_prog_str != fecha_original:
                        registros_df.at[registros_df.index[
                            indice_seleccionado], 'Fecha de publicaci√≥n programada'] = nueva_fecha_publicacion_prog_str
                        edited = True

            with col3:
                # Fecha real de publicaci√≥n
                fecha_publicacion_dt = fecha_para_selector(row['Publicaci√≥n'])
                nueva_fecha_publicacion = st.date_input(
                    "Fecha de publicaci√≥n (real)",
                    value=fecha_publicacion_dt,
                    format="DD/MM/YYYY",
                    key=f"fecha_publicacion_{indice_seleccionado}",
                    on_change=on_change_callback
                )

                nueva_fecha_publicacion_str = fecha_desde_selector_a_string(
                    nueva_fecha_publicacion) if nueva_fecha_publicacion else ""

                fecha_original = "" if pd.isna(row['Publicaci√≥n']) else row['Publicaci√≥n']

                if nueva_fecha_publicacion_str and nueva_fecha_publicacion_str != fecha_original:
                    # Actualizar autom√°ticamente "Disponer datos tem√°ticos" a "Si"
                    if 'Disponer datos tem√°ticos' in registros_df.columns:
                        registros_df.at[registros_df.index[indice_seleccionado], 'Disponer datos tem√°ticos'] = 'Si'
                        st.info("Se ha actualizado autom√°ticamente 'Disponer datos tem√°ticos' a 'Si'")
                    
                    # Actualizar la fecha de publicaci√≥n
                    registros_df.at[
                        registros_df.index[indice_seleccionado], 'Publicaci√≥n'] = nueva_fecha_publicacion_str
                    edited = True

                    # Recalcular el plazo de oficio de cierre
                    registros_df = actualizar_plazo_oficio_cierre(registros_df)

                    # Guardar cambios inmediatamente
                    with st.spinner("üíæ Guardando y recalculando plazos..."):
                        registros_df = validar_reglas_negocio(registros_df)
                        exito, mensaje = guardar_datos_editados_rapido(registros_df)
                        if exito:
                            st.success("‚úÖ Publicaci√≥n actualizada y plazo de cierre recalculado")
                            st.rerun()

            # Mostrar plazo de oficio de cierre
            col1, col2 = st.columns(2)
            with col1:
                plazo_oficio_cierre = row[
                    'Plazo de oficio de cierre'] if 'Plazo de oficio de cierre' in row and pd.notna(
                    row['Plazo de oficio de cierre']) else ""

                st.text_input(
                    "Plazo de oficio de cierre (calculado autom√°ticamente)",
                    value=plazo_oficio_cierre,
                    disabled=True,
                    key=f"plazo_oficio_cierre_{indice_seleccionado}"
                )

                st.info(
                    "El plazo de oficio de cierre se calcula autom√°ticamente como 7 d√≠as h√°biles despu√©s de la fecha de publicaci√≥n."
                )

            # Cat√°logo y oficios de cierre (RESTAURADOS)
            if 'Cat√°logo de recursos geogr√°ficos' in row or 'Oficios de cierre' in row:
                col1, col2, col3 = st.columns(3)

                # Cat√°logo de recursos geogr√°ficos
                if 'Cat√°logo de recursos geogr√°ficos' in row:
                    with col1:
                        catalogo_recursos = st.selectbox(
                            "Cat√°logo de recursos geogr√°ficos",
                            options=["", "Si", "No"],
                            index=1 if row['Cat√°logo de recursos geogr√°ficos'].upper() in ["SI", "S√ç", "YES",
                                                                                           "Y"] else (
                                2 if row['Cat√°logo de recursos geogr√°ficos'].upper() == "NO" else 0),
                            key=f"catalogo_recursos_{indice_seleccionado}",
                            on_change=on_change_callback
                        )
                        if catalogo_recursos != row['Cat√°logo de recursos geogr√°ficos']:
                            registros_df.at[registros_df.index[
                                indice_seleccionado], 'Cat√°logo de recursos geogr√°ficos'] = catalogo_recursos
                            edited = True

                # Oficios de cierre
                if 'Oficios de cierre' in row:
                    with col2:
                        oficios_cierre = st.selectbox(
                            "Oficios de cierre",
                            options=["", "Si", "No"],
                            index=1 if row['Oficios de cierre'].upper() in ["SI", "S√ç", "YES", "Y"] else (
                                2 if row['Oficios de cierre'].upper() == "NO" else 0),
                            key=f"oficios_cierre_{indice_seleccionado}",
                            on_change=on_change_callback
                        )
                        if oficios_cierre != row['Oficios de cierre']:
                            registros_df.at[
                                registros_df.index[indice_seleccionado], 'Oficios de cierre'] = oficios_cierre
                            edited = True

                # Fecha de oficio de cierre (RESTAURADO CON VALIDACIONES)
                if 'Fecha de oficio de cierre' in row:
                    with col3:
                        fecha_oficio_dt = fecha_para_selector(row['Fecha de oficio de cierre'])
                        nueva_fecha_oficio = st.date_input(
                            "Fecha de oficio de cierre",
                            value=fecha_oficio_dt,
                            format="DD/MM/YYYY",
                            key=f"fecha_oficio_{indice_seleccionado}",
                            on_change=on_change_callback
                        )
                        nueva_fecha_oficio_str = fecha_desde_selector_a_string(
                            nueva_fecha_oficio) if nueva_fecha_oficio else ""

                        fecha_original = "" if pd.isna(row['Fecha de oficio de cierre']) else row[
                            'Fecha de oficio de cierre']

                        # Si se ha introducido una nueva fecha de oficio de cierre
                        if nueva_fecha_oficio_str and nueva_fecha_oficio_str != fecha_original:
                            # Validar que la publicaci√≥n est√© completada
                            tiene_publicacion = (
                                'Publicaci√≥n' in row and 
                                pd.notna(row['Publicaci√≥n']) and 
                                row['Publicaci√≥n'] != ""
                            )

                            if not tiene_publicacion:
                                st.error(
                                    "No es posible diligenciar la Fecha de oficio de cierre. Debe completar primero la etapa de Publicaci√≥n.")
                            else:
                                # Actualizar fecha de oficio de cierre
                                registros_df.at[registros_df.index[
                                    indice_seleccionado], 'Fecha de oficio de cierre'] = nueva_fecha_oficio_str

                                # Actualizar Estado a "Completado" autom√°ticamente
                                registros_df.at[registros_df.index[indice_seleccionado], 'Estado'] = 'Completado'

                                # Recalcular el porcentaje de avance (ahora ser√° 100% autom√°ticamente)
                                registros_df.at[registros_df.index[indice_seleccionado], 'Porcentaje Avance'] = calcular_porcentaje_avance(registros_df.iloc[indice_seleccionado])

                                edited = True
                                # Guardar cambios
                                with st.spinner("üíæ Guardando cambios finales..."):
                                    registros_df = validar_reglas_negocio(registros_df)
                                    exito, mensaje = guardar_datos_editados_rapido(registros_df)
                                    if exito:
                                        st.success(
                                            "‚úÖ Oficio de cierre actualizado. Estado: 'Completado', Avance: 100%")
                                        st.rerun()

                        # Si se est√° borrando la fecha
                        elif nueva_fecha_oficio_str != fecha_original:
                            # Permitir borrar la fecha y actualizar Estado a "En proceso"
                            registros_df.at[registros_df.index[
                                indice_seleccionado], 'Fecha de oficio de cierre'] = nueva_fecha_oficio_str

                            # Si se borra la fecha de oficio, cambiar estado a "En proceso"
                            if registros_df.at[registros_df.index[indice_seleccionado], 'Estado'] == 'Completado':
                                registros_df.at[registros_df.index[indice_seleccionado], 'Estado'] = 'En proceso'
                                st.info(
                                    "El estado ha sido cambiado a 'En proceso' porque se elimin√≥ la fecha de oficio de cierre.")

                            edited = True
                            # Guardar cambios
                            with st.spinner("üíæ Guardando cambios..."):
                                registros_df = validar_reglas_negocio(registros_df)
                                exito, mensaje = guardar_datos_editados_rapido(registros_df)
                                if exito:
                                    st.success("‚úÖ Fecha de oficio de cierre actualizada")
                                    st.rerun()

            # ===== SECCI√ìN 6: ESTADO Y OBSERVACIONES =====
            st.markdown("### 6. Estado y Observaciones")
            col1, col2 = st.columns(2)

            # Estado general (RESTAURADO CON VALIDACIONES)
            if 'Estado' in row:
                with col1:
                    # Verificar si hay fecha de oficio de cierre v√°lida
                    tiene_fecha_oficio = (
                            'Fecha de oficio de cierre' in row and
                            pd.notna(row['Fecha de oficio de cierre']) and
                            row['Fecha de oficio de cierre'] != ""
                    )

                    # Si no hay fecha de oficio, no se debe permitir estado Completado
                    opciones_estado = ["", "En proceso", "En proceso oficio de cierre", "Finalizado"]
                    if tiene_fecha_oficio:
                        opciones_estado = ["", "En proceso", "En proceso oficio de cierre", "Completado",
                                           "Finalizado"]

                    # Determinar el √≠ndice actual del estado
                    indice_estado = 0
                    if row['Estado'] in opciones_estado:
                        indice_estado = opciones_estado.index(row['Estado'])

                    # Crear el selector de estado
                    nuevo_estado = st.selectbox(
                        "Estado",
                        options=opciones_estado,
                        index=indice_estado,
                        key=f"estado_{indice_seleccionado}",
                        on_change=on_change_callback
                    )

                    # Si intenta seleccionar Completado sin fecha de oficio, mostrar mensaje
                    if nuevo_estado == "Completado" and not tiene_fecha_oficio:
                        st.error(
                            "No es posible establecer el estado como 'Completado' sin una fecha de oficio de cierre v√°lida.")
                        nuevo_estado = row['Estado']

                    # Actualizar el estado si ha cambiado
                    if nuevo_estado != row['Estado']:
                        registros_df.at[registros_df.index[indice_seleccionado], 'Estado'] = nuevo_estado
                        edited = True

                        # Guardar y validar inmediatamente
                        with st.spinner("üíæ Guardando estado..."):
                            registros_df = validar_reglas_negocio(registros_df)
                            exito, mensaje = guardar_datos_editados_rapido(registros_df)
                            if exito:
                                st.success("‚úÖ Estado actualizado")
                                st.rerun()

            # Observaciones (RESTAURADO)
            if 'Observaci√≥n' in row:
                with col2:
                    nueva_observacion = st.text_area(
                        "Observaci√≥n",
                        value=row['Observaci√≥n'] if pd.notna(row['Observaci√≥n']) else "",
                        key=f"observacion_{indice_seleccionado}",
                        on_change=on_change_callback
                    )
                    if nueva_observacion != row['Observaci√≥n']:
                        registros_df.at[registros_df.index[indice_seleccionado], 'Observaci√≥n'] = nueva_observacion
                        edited = True

            # Bot√≥n de guardar general (RESTAURADO)
            if edited or st.session_state.cambios_pendientes:
                if st.button("üíæ Guardar Todos los Cambios", key=f"guardar_{indice_seleccionado}", type="primary"):
                    # Aplicar validaciones de reglas de negocio antes de guardar
                    registros_df = validar_reglas_negocio(registros_df)

                    # Actualizar los plazos autom√°ticamente
                    registros_df = actualizar_plazo_analisis(registros_df)
                    registros_df = actualizar_plazo_cronograma(registros_df)
                    registros_df = actualizar_plazo_oficio_cierre(registros_df)

                    # Guardar los datos en Google Sheets
                    with st.spinner("üíæ Guardando todos los cambios en Google Sheets..."):
                        exito, mensaje = guardar_datos_editados(registros_df, crear_backup=True)

                    if exito:
                        st.session_state.mensaje_guardado = ("success", mensaje)
                        st.session_state.cambios_pendientes = False
                        st.rerun()
                    else:
                        st.session_state.mensaje_guardado = ("error", mensaje)

            # Bot√≥n para actualizar vista
            if st.button("üîÑ Actualizar Vista", key=f"actualizar_{indice_seleccionado}"):
                st.rerun()

    except Exception as e:
        st.error(f"Error al editar el registro: {e}")

    return registros_df

# ========== FUNCIONES COMPLETAS RESTAURADAS ==========

def mostrar_dashboard(df_filtrado, metas_nuevas_df, metas_actualizar_df, registros_df, 
                     entidad_seleccionada, funcionario_seleccionado, nivel_seleccionado):
    """Muestra el dashboard principal con m√©tricas y gr√°ficos - VERSI√ìN COMPLETA RESTAURADA CON MODIFICACIONES."""
    # Mostrar m√©tricas generales
    st.markdown('<div class="subtitle">M√©tricas Generales</div>', unsafe_allow_html=True)

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        total_registros = len(df_filtrado)
        st.markdown(f"""
        <div class="metric-card">
            <p style="font-size: 1rem; color: #64748b;">Total Registros</p>
            <p style="font-size: 2.5rem; font-weight: bold; color: #1E40AF;">{total_registros}</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        avance_promedio = df_filtrado['Porcentaje Avance'].mean()
        st.markdown(f"""
        <div class="metric-card">
            <p style="font-size: 1rem; color: #64748b;">Avance Promedio</p>
            <p style="font-size: 2.5rem; font-weight: bold; color: #047857;">{avance_promedio:.2f}%</p>
        </div>
        """, unsafe_allow_html=True)

    with col3:
        registros_completados = len(df_filtrado[df_filtrado['Porcentaje Avance'] == 100])
        st.markdown(f"""
        <div class="metric-card">
            <p style="font-size: 1rem; color: #64748b;">Registros Completados</p>
            <p style="font-size: 2.5rem; font-weight: bold; color: #B45309;">{registros_completados}</p>
        </div>
        """, unsafe_allow_html=True)

    with col4:
        porcentaje_completados = (registros_completados / total_registros * 100) if total_registros > 0 else 0
        st.markdown(f"""
        <div class="metric-card">
            <p style="font-size: 1rem; color: #64748b;">% Completados</p>
            <p style="font-size: 2.5rem; font-weight: bold; color: #BE185D;">{porcentaje_completados:.2f}%</p>
        </div>
        """, unsafe_allow_html=True)

    # Comparaci√≥n con metas
    st.markdown('<div class="subtitle">Comparaci√≥n con Metas Quincenales</div>', unsafe_allow_html=True)

    # Calcular comparaci√≥n con metas
    comparacion_nuevos, comparacion_actualizar, fecha_meta = comparar_avance_metas(df_filtrado, metas_nuevas_df,
                                                                                   metas_actualizar_df)

    # Mostrar fecha de la meta
    st.markdown(f"**Meta m√°s cercana a la fecha actual: {fecha_meta.strftime('%d/%m/%Y')}**")

    # MODIFICACI√ìN 1: Crear funci√≥n para gradiente personalizado
    def crear_gradiente_personalizado(df_comparacion):
        """Crea un gradiente personalizado de rojo a verde oscuro para porcentajes 0-100, verde oscuro para >100"""
        def aplicar_color(val):
            if pd.isna(val):
                return ''
            if val <= 0:
                return 'background-color: #dc2626; color: white'  # Rojo intenso
            elif val <= 25:
                return 'background-color: #ef4444; color: white'  # Rojo
            elif val <= 50:
                return 'background-color: #f97316; color: white'  # Naranja
            elif val <= 75:
                return 'background-color: #eab308; color: black'  # Amarillo
            elif val < 100:
                return 'background-color: #84cc16; color: black'  # Verde claro
            else:  # val >= 100
                return 'background-color: #166534; color: white'  # Verde oscuro
        
        return df_comparacion.style.format({
            'Porcentaje': '{:.2f}%'
        }).applymap(aplicar_color, subset=['Porcentaje'])

    # Mostrar comparaci√≥n en dos columnas
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("### Registros Nuevos")
        # APLICAR GRADIENTE PERSONALIZADO
        st.dataframe(crear_gradiente_personalizado(comparacion_nuevos))

        # Gr√°fico de barras para registros nuevos
        fig_nuevos = px.bar(
            comparacion_nuevos.reset_index(),
            x='index',
            y=['Completados', 'Meta'],
            barmode='group',
            labels={'index': 'Hito', 'value': 'Cantidad', 'variable': 'Tipo'},
            title='Comparaci√≥n de Avance vs. Meta - Registros Nuevos',
            color_discrete_map={'Completados': '#4B5563', 'Meta': '#1E40AF'}
        )
        st.plotly_chart(fig_nuevos, use_container_width=True)

    with col2:
        st.markdown("### Registros a Actualizar")
        # APLICAR GRADIENTE PERSONALIZADO
        st.dataframe(crear_gradiente_personalizado(comparacion_actualizar))

        # Gr√°fico de barras para registros a actualizar
        fig_actualizar = px.bar(
            comparacion_actualizar.reset_index(),
            x='index',
            y=['Completados', 'Meta'],
            barmode='group',
            labels={'index': 'Hito', 'value': 'Cantidad', 'variable': 'Tipo'},
            title='Comparaci√≥n de Avance vs. Meta - Registros a Actualizar',
            color_discrete_map={'Completados': '#4B5563', 'Meta': '#047857'}
        )
        st.plotly_chart(fig_actualizar, use_container_width=True)

    # MODIFICACI√ìN 2: Diagrama de Gantt condicionado
    st.markdown('<div class="subtitle">Diagrama de Gantt - Cronograma de Hitos por Nivel de Informaci√≥n</div>',
                unsafe_allow_html=True)

    # Verificar si hay filtros espec√≠ficos aplicados
    filtros_aplicados = (
        entidad_seleccionada != 'Todas' or 
        funcionario_seleccionado != 'Todos' or 
        nivel_seleccionado != 'Todos'
    )

    if filtros_aplicados:
        # Crear el diagrama de Gantt solo si hay filtros
        fig_gantt = crear_gantt(df_filtrado)
        if fig_gantt is not None:
            st.plotly_chart(fig_gantt, use_container_width=True)
        else:
            st.warning("No hay datos suficientes para crear el diagrama de Gantt con los filtros aplicados.")
    else:
        # Mostrar mensaje cuando no hay filtros aplicados
        st.info("üìä **Para visualizar el diagrama de Gantt seleccione la entidad o funcionario de su inter√©s.**")

    # Tabla de registros con porcentaje de avance
    st.markdown('<div class="subtitle">Detalle de Registros</div>', unsafe_allow_html=True)

    # Definir el orden de las columnas
    columnas_mostrar = [
        'Cod', 'Entidad', 'Nivel Informaci√≥n ', 'Funcionario',
        'Frecuencia actualizacion ', 'TipoDato',
        'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
        'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'Plazo de cronograma',
        'An√°lisis y cronograma',
        'Registro (completo)', 'ET (completo)', 'CO (completo)', 'DD (completo)', 'REC (completo)',
        'SERVICIO (completo)',
        'Est√°ndares (fecha programada)', 'Est√°ndares',
        'Fecha de publicaci√≥n programada', 'Publicaci√≥n',
        'Plazo de oficio de cierre', 'Fecha de oficio de cierre',
        'Estado', 'Observaci√≥n', 'Porcentaje Avance'
    ]

    # Mostrar tabla con colores por estado de fechas
    try:
        # Verificar que todas las columnas existan
        columnas_mostrar_existentes = [col for col in columnas_mostrar if col in df_filtrado.columns]
        df_mostrar = df_filtrado[columnas_mostrar_existentes].copy()

        # Aplicar formato a las fechas
        columnas_fecha = [
            'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
            'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'Plazo de cronograma',
            'An√°lisis y cronograma', 'Est√°ndares (fecha programada)', 'Est√°ndares',
            'Fecha de publicaci√≥n programada', 'Publicaci√≥n',
            'Plazo de oficio de cierre', 'Fecha de oficio de cierre'
        ]

        for col in columnas_fecha:
            if col in df_mostrar.columns:
                df_mostrar[col] = df_mostrar[col].apply(lambda x: formatear_fecha(x) if es_fecha_valida(x) else "")

        # Mostrar el dataframe con formato
        st.dataframe(
            df_mostrar
            .style.format({'Porcentaje Avance': '{:.2f}%'})
            .apply(highlight_estado_fechas, axis=1)
            .background_gradient(cmap='RdYlGn', subset=['Porcentaje Avance']),
            use_container_width=True
        )

        # SECCI√ìN DE DESCARGA
        st.markdown("### Descargar Datos")

        col1, col2 = st.columns(2)

        with col1:
            # Bot√≥n para descargar los datos filtrados
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='openpyxl') as writer:
                df_mostrar.to_excel(writer, sheet_name='Registros Filtrados', index=False)

            excel_data = output.getvalue()
            st.download_button(
                label="üìä Descargar datos filtrados (Excel)",
                data=excel_data,
                file_name="registros_filtrados.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                help="Descarga los datos filtrados en formato Excel"
            )

        with col2:
            # BOT√ìN PARA DESCARGAR TODOS LOS REGISTROS
            output_completo = io.BytesIO()
            with pd.ExcelWriter(output_completo, engine='openpyxl') as writer:
                registros_df.to_excel(writer, sheet_name='Registros Completos', index=False)

                # A√±adir hojas adicionales con categor√≠as
                if 'TipoDato' in registros_df.columns:
                    # Hoja para registros nuevos
                    registros_nuevos = registros_df[registros_df['TipoDato'].str.upper() == 'NUEVO']
                    if not registros_nuevos.empty:
                        registros_nuevos.to_excel(writer, sheet_name='Registros Nuevos', index=False)

                    # Hoja para registros a actualizar
                    registros_actualizar = registros_df[registros_df['TipoDato'].str.upper() == 'ACTUALIZAR']
                    if not registros_actualizar.empty:
                        registros_actualizar.to_excel(writer, sheet_name='Registros a Actualizar', index=False)

            excel_data_completo = output_completo.getvalue()

            # Bot√≥n para descargar todos los registros
            st.download_button(
                label="üì• Descargar TODOS los registros (Excel)",
                data=excel_data_completo,
                file_name="todos_los_registros.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                help="Descarga todos los registros en formato Excel, sin filtros aplicados",
                use_container_width=True
            )

        # Informaci√≥n sobre el contenido
        num_registros = len(registros_df)
        num_campos = len(registros_df.columns)
        st.info(
            f"El archivo de TODOS los registros incluir√° {num_registros} registros con {num_campos} campos originales.")

    except Exception as e:
        st.error(f"Error al mostrar la tabla de registros: {e}")
        if 'columnas_mostrar_existentes' in locals():
            st.dataframe(df_filtrado[columnas_mostrar_existentes])

def mostrar_reportes(registros_df, tipo_dato_filtro, acuerdo_filtro, analisis_filtro, 
                    estandares_filtro, publicacion_filtro, finalizado_filtro):
    """Muestra la pesta√±a de reportes con tabla completa y filtros espec√≠ficos - VERSI√ìN COMPLETA."""
    st.markdown('<div class="subtitle">Reportes de Registros</div>', unsafe_allow_html=True)
    
    # Aplicar filtros
    df_filtrado = registros_df.copy()
    
    # Filtro por tipo de dato
    if tipo_dato_filtro != 'Todos':
        df_filtrado = df_filtrado[df_filtrado['TipoDato'].str.upper() == tipo_dato_filtro.upper()]
    
    # Filtro por acuerdo de compromiso suscrito
    if acuerdo_filtro != 'Todos':
        if acuerdo_filtro == 'Suscrito':
            df_filtrado = df_filtrado[
                ((df_filtrado['Suscripci√≥n acuerdo de compromiso'].notna()) & 
                 (df_filtrado['Suscripci√≥n acuerdo de compromiso'] != '')) |
                ((df_filtrado['Entrega acuerdo de compromiso'].notna()) & 
                 (df_filtrado['Entrega acuerdo de compromiso'] != ''))
            ]
        else:  # No Suscrito
            df_filtrado = df_filtrado[
                ((df_filtrado['Suscripci√≥n acuerdo de compromiso'].isna()) | 
                 (df_filtrado['Suscripci√≥n acuerdo de compromiso'] == '')) &
                ((df_filtrado['Entrega acuerdo de compromiso'].isna()) | 
                 (df_filtrado['Entrega acuerdo de compromiso'] == ''))
            ]
    
    # Filtro por an√°lisis y cronograma
    if analisis_filtro != 'Todos':
        if analisis_filtro == 'Completado':
            df_filtrado = df_filtrado[
                (df_filtrado['An√°lisis y cronograma'].notna()) & 
                (df_filtrado['An√°lisis y cronograma'] != '')
            ]
        else:  # No Completado
            df_filtrado = df_filtrado[
                (df_filtrado['An√°lisis y cronograma'].isna()) | 
                (df_filtrado['An√°lisis y cronograma'] == '')
            ]
    
    # Filtro por est√°ndares completado
    if estandares_filtro != 'Todos':
        if estandares_filtro == 'Completado':
            df_filtrado = df_filtrado[
                (df_filtrado['Est√°ndares'].notna()) & 
                (df_filtrado['Est√°ndares'] != '')
            ]
        else:  # No Completado
            df_filtrado = df_filtrado[
                (df_filtrado['Est√°ndares'].isna()) | 
                (df_filtrado['Est√°ndares'] == '')
            ]
    
    # Filtro por publicaci√≥n
    if publicacion_filtro != 'Todos':
        if publicacion_filtro == 'Completado':
            df_filtrado = df_filtrado[
                (df_filtrado['Publicaci√≥n'].notna()) & 
                (df_filtrado['Publicaci√≥n'] != '')
            ]
        else:  # No Completado
            df_filtrado = df_filtrado[
                (df_filtrado['Publicaci√≥n'].isna()) | 
                (df_filtrado['Publicaci√≥n'] == '')
            ]
    
    # Filtro por finalizado
    if finalizado_filtro != 'Todos':
        if finalizado_filtro == 'Finalizado':
            df_filtrado = df_filtrado[
                (df_filtrado['Fecha de oficio de cierre'].notna()) & 
                (df_filtrado['Fecha de oficio de cierre'] != '')
            ]
        else:  # No Finalizado
            df_filtrado = df_filtrado[
                (df_filtrado['Fecha de oficio de cierre'].isna()) | 
                (df_filtrado['Fecha de oficio de cierre'] == '')
            ]
    
    # Mostrar estad√≠sticas del filtrado
    st.markdown("### Resumen de Registros Filtrados")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_filtrados = len(df_filtrado)
        st.markdown(f"""
        <div class="metric-card">
            <p style="font-size: 1rem; color: #64748b;">Total Filtrados</p>
            <p style="font-size: 2.5rem; font-weight: bold; color: #1E40AF;">{total_filtrados}</p>
        </div>
        """, unsafe_allow_html=True)

    with col2:
        if total_filtrados > 0:
            avance_promedio = df_filtrado['Porcentaje Avance'].mean()
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">Avance Promedio</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #047857;">{avance_promedio:.1f}%</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">Avance Promedio</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #047857;">0%</p>
            </div>
            """, unsafe_allow_html=True)

    with col3:
        if total_filtrados > 0:
            completados = len(df_filtrado[df_filtrado['Porcentaje Avance'] == 100])
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">Completados</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #B45309;">{completados}</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">Completados</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #B45309;">0</p>
            </div>
            """, unsafe_allow_html=True)

    with col4:
        if total_filtrados > 0:
            porcentaje_completados = (len(df_filtrado[df_filtrado['Porcentaje Avance'] == 100]) / total_filtrados * 100)
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">% Completados</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #BE185D;">{porcentaje_completados:.1f}%</p>
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="metric-card">
                <p style="font-size: 1rem; color: #64748b;">% Completados</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #BE185D;">0%</p>
            </div>
            """, unsafe_allow_html=True)

    # Mostrar tabla de registros filtrados
    st.markdown("### Tabla de Registros")
    
    if df_filtrado.empty:
        st.warning("No se encontraron registros que coincidan con los filtros seleccionados.")
        return
    
    # Definir columnas a mostrar
    columnas_mostrar = [
        'Cod', 'Entidad', 'Nivel Informaci√≥n ', 'Funcionario',
        'Frecuencia actualizacion ', 'TipoDato',
        'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
        'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'Plazo de cronograma',
        'An√°lisis y cronograma',
        'Registro (completo)', 'ET (completo)', 'CO (completo)', 'DD (completo)', 'REC (completo)',
        'SERVICIO (completo)',
        'Est√°ndares (fecha programada)', 'Est√°ndares',
        'Fecha de publicaci√≥n programada', 'Publicaci√≥n',
        'Plazo de oficio de cierre', 'Fecha de oficio de cierre',
        'Estado', 'Observaci√≥n', 'Porcentaje Avance'
    ]
    
    # Verificar que todas las columnas existan
    columnas_mostrar_existentes = [col for col in columnas_mostrar if col in df_filtrado.columns]
    df_mostrar = df_filtrado[columnas_mostrar_existentes].copy()
    
    # Aplicar formato a las fechas
    columnas_fecha = [
        'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
        'Fecha de entrega de informaci√≥n', 'Plazo de an√°lisis', 'Plazo de cronograma',
        'An√°lisis y cronograma', 'Est√°ndares (fecha programada)', 'Est√°ndares',
        'Fecha de publicaci√≥n programada', 'Publicaci√≥n',
        'Plazo de oficio de cierre', 'Fecha de oficio de cierre'
    ]
    
    for col in columnas_fecha:
        if col in df_mostrar.columns:
            df_mostrar[col] = df_mostrar[col].apply(lambda x: formatear_fecha(x) if es_fecha_valida(x) else "")
    
    # Mostrar dataframe con formato
    st.dataframe(
        df_mostrar
        .style.format({'Porcentaje Avance': '{:.2f}%'})
        .apply(highlight_estado_fechas, axis=1)
        .background_gradient(cmap='RdYlGn', subset=['Porcentaje Avance']),
        use_container_width=True
    )
    
    # Bot√≥n para descargar reporte
    st.markdown("### Descargar Reporte")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Descargar como Excel
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_mostrar.to_excel(writer, sheet_name='Reporte Filtrado', index=False)

        excel_data = output.getvalue()
        st.download_button(
            label="üìä Descargar reporte como Excel",
            data=excel_data,
            file_name=f"reporte_registros_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            help="Descarga el reporte filtrado en formato Excel"
        )
    
    with col2:
        # Descargar como CSV
        csv = df_mostrar.to_csv(index=False).encode('utf-8')
        st.download_button(
            label="üìÑ Descargar reporte como CSV",
            data=csv,
            file_name=f"reporte_registros_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv",
            help="Descarga el reporte filtrado en formato CSV"
        )
    
    # Informaci√≥n adicional sobre los filtros aplicados
    filtros_aplicados = []
    if tipo_dato_filtro != 'Todos':
        filtros_aplicados.append(f"Tipo de Dato: {tipo_dato_filtro}")
    if acuerdo_filtro != 'Todos':
        filtros_aplicados.append(f"Acuerdo de Compromiso: {acuerdo_filtro}")
    if analisis_filtro != 'Todos':
        filtros_aplicados.append(f"An√°lisis y Cronograma: {analisis_filtro}")
    if estandares_filtro != 'Todos':
        filtros_aplicados.append(f"Est√°ndares: {estandares_filtro}")
    if publicacion_filtro != 'Todos':
        filtros_aplicados.append(f"Publicaci√≥n: {publicacion_filtro}")
    if finalizado_filtro != 'Todos':
        filtros_aplicados.append(f"Finalizado: {finalizado_filtro}")
    
    if filtros_aplicados:
        st.info(f"**Filtros aplicados:** {', '.join(filtros_aplicados)}")
    else:
        st.info("**Mostrando todos los registros** (sin filtros aplicados)")

def mostrar_alertas_vencimientos(registros_df):
    """Muestra alertas de vencimientos de fechas en los registros - VERSI√ìN COMPLETA RESTAURADA."""
    st.markdown('<div class="subtitle">Alertas de Vencimientos</div>', unsafe_allow_html=True)

    # Fecha actual para comparaciones
    fecha_actual = datetime.now().date()

    # Funci√≥n para calcular d√≠as h√°biles entre fechas
    def calcular_dias_habiles(fecha_inicio, fecha_fin):
        if not fecha_inicio or not fecha_fin:
            return None

        # Convertir a objetos date si son datetime
        if isinstance(fecha_inicio, datetime):
            fecha_inicio = fecha_inicio.date()
        if isinstance(fecha_fin, datetime):
            fecha_fin = fecha_fin.date()

        # Si la fecha de inicio es posterior a la fecha fin, devolver d√≠as negativos
        if fecha_inicio > fecha_fin:
            return -calcular_dias_habiles(fecha_fin, fecha_inicio)

        # Calcular d√≠as h√°biles
        dias = 0
        fecha_actual_calc = fecha_inicio
        while fecha_actual_calc <= fecha_fin:
            # Si no es fin de semana (0=lunes, 6=domingo)
            if fecha_actual_calc.weekday() < 5:
                dias += 1
            fecha_actual_calc += timedelta(days=1)

        return dias

    # Funci√≥n para determinar si una fecha est√° pr√≥xima a vencer
    def es_proximo_vencimiento(fecha_limite):
        if not fecha_limite:
            return False

        # Convertir a objeto date si es datetime
        if isinstance(fecha_limite, datetime):
            fecha_limite = fecha_limite.date()

        # Si ya est√° vencido, no es "pr√≥ximo a vencer"
        if fecha_limite < fecha_actual:
            return False

        # Calcular d√≠as h√°biles hasta la fecha l√≠mite
        dias_habiles = calcular_dias_habiles(fecha_actual, fecha_limite)

        # Si est√° dentro de los pr√≥ximos 5 d√≠as h√°biles
        return dias_habiles is not None and 0 <= dias_habiles <= 5

    # Funci√≥n para determinar si una fecha est√° vencida
    def es_vencido(fecha_limite):
        if not fecha_limite:
            return False

        # Convertir a objeto date si es datetime
        if isinstance(fecha_limite, datetime):
            fecha_limite = fecha_limite.date()

        return fecha_limite < fecha_actual

    # Funci√≥n para calcular d√≠as de rezago
    def calcular_dias_rezago(fecha_limite):
        if not fecha_limite or not es_vencido(fecha_limite):
            return None

        # Convertir a objeto date si es datetime
        if isinstance(fecha_limite, datetime):
            fecha_limite = fecha_limite.date()

        return (fecha_actual - fecha_limite).days

    # Funci√≥n para formatear fechas de manera segura
    def formatear_fecha_segura(fecha):
        if fecha is None or pd.isna(fecha):
            return ""
        try:
            return fecha.strftime('%d/%m/%Y')
        except:
            return ""

    # Preprocesar registros para el an√°lisis
    registros_alertas = []

    for idx, row in registros_df.iterrows():
        try:
            # Procesar fechas de manera segura
            fecha_entrega_acuerdo = procesar_fecha(row.get('Entrega acuerdo de compromiso', ''))
            fecha_entrega_info = procesar_fecha(row.get('Fecha de entrega de informaci√≥n', ''))
            fecha_plazo_cronograma = procesar_fecha(row.get('Plazo de cronograma', ''))
            fecha_analisis_cronograma = procesar_fecha(row.get('An√°lisis y cronograma', ''))
            fecha_estandares_prog = procesar_fecha(row.get('Est√°ndares (fecha programada)', ''))
            fecha_estandares = procesar_fecha(row.get('Est√°ndares', ''))
            fecha_publicacion_prog = procesar_fecha(row.get('Fecha de publicaci√≥n programada', ''))
            fecha_publicacion = procesar_fecha(row.get('Publicaci√≥n', ''))
            fecha_plazo_oficio_cierre = procesar_fecha(row.get('Plazo de oficio de cierre', ''))
            fecha_oficio_cierre = procesar_fecha(row.get('Fecha de oficio de cierre', ''))

            # Caso especial: Acuerdo de compromiso pendiente
            if fecha_entrega_acuerdo is not None and pd.notna(fecha_entrega_acuerdo) and (
                    fecha_entrega_info is None or pd.isna(fecha_entrega_info)):
                if es_vencido(fecha_entrega_acuerdo):
                    dias_rezago = calcular_dias_rezago(fecha_entrega_acuerdo)
                    registros_alertas.append({
                        'Cod': row['Cod'],
                        'Entidad': row['Entidad'],
                        'Nivel Informaci√≥n': row.get('Nivel Informaci√≥n ', ''),
                        'Funcionario': row.get('Funcionario', ''),
                        'Tipo Alerta': 'Acuerdo de compromiso',
                        'Fecha Programada': fecha_entrega_acuerdo,
                        'Fecha Real': None,
                        'D√≠as Rezago': dias_rezago,
                        'Estado': 'Vencido',
                        'Descripci√≥n': f'Entrega de acuerdo vencida hace {dias_rezago} d√≠as sin fecha de entrega de informaci√≥n'
                    })

            # Continuar con los dem√°s casos siguiendo el mismo patr√≥n...

        except Exception as e:
            st.warning(f"Error procesando registro {row['Cod']}: {e}")
            continue

    # Crear DataFrame de alertas
    if registros_alertas:
        df_alertas = pd.DataFrame(registros_alertas)

        # Formatear fechas
        for col in ['Fecha Programada', 'Fecha Real']:
            if col in df_alertas.columns:
                df_alertas[col] = df_alertas[col].apply(formatear_fecha_segura)

        # Funci√≥n para aplicar colores seg√∫n estado
        def highlight_estado(val):
            if val == 'Vencido':
                return 'background-color: #fee2e2; color: #b91c1c; font-weight: bold'
            elif val == 'Pr√≥ximo a vencer':
                return 'background-color: #fef3c7; color: #b45309; font-weight: bold'
            elif val == 'Completado con retraso':
                return 'background-color: #dbeafe; color: #1e40af'
            return ''

        # Mostrar estad√≠sticas de alertas
        st.markdown("### Resumen de Alertas")

        col1, col2, col3 = st.columns(3)

        with col1:
            num_vencidos = len(df_alertas[df_alertas['Estado'] == 'Vencido'])
            st.markdown(f"""
            <div class="metric-card" style="background-color: #fee2e2;">
                <p style="font-size: 1rem; color: #b91c1c;">Vencidos</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #b91c1c;">{num_vencidos}</p>
            </div>
            """, unsafe_allow_html=True)

        with col2:
            num_proximos = len(df_alertas[df_alertas['Estado'] == 'Pr√≥ximo a vencer'])
            st.markdown(f"""
            <div class="metric-card" style="background-color: #fef3c7;">
                <p style="font-size: 1rem; color: #b45309;">Pr√≥ximos a vencer</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #b45309;">{num_proximos}</p>
            </div>
            """, unsafe_allow_html=True)

        with col3:
            num_retrasados = len(df_alertas[df_alertas['Estado'] == 'Completado con retraso'])
            st.markdown(f"""
            <div class="metric-card" style="background-color: #dbeafe;">
                <p style="font-size: 1rem; color: #1e40af;">Completados con retraso</p>
                <p style="font-size: 2.5rem; font-weight: bold; color: #1e40af;">{num_retrasados}</p>
            </div>
            """, unsafe_allow_html=True)

        # Resto de la funci√≥n de alertas...
        st.success("üéâ Sistema completo de alertas funcionando!")
    else:
        st.success("üéâ ¬°No hay alertas de vencimientos pendientes!")

def mostrar_diagnostico(registros_df, meta_df, metas_nuevas_df, metas_actualizar_df, df_filtrado):
    """Muestra la secci√≥n de diagn√≥stico con an√°lisis detallado de los datos - VERSI√ìN COMPLETA."""
    with st.expander("üîç Diagn√≥stico de Datos"):
        st.markdown("### Diagn√≥stico de Datos")
        st.markdown("Esta secci√≥n proporciona un diagn√≥stico detallado de los datos cargados desde Google Sheets.")

        # Informaci√≥n general
        st.markdown("#### Informaci√≥n General")
        col1, col2 = st.columns(2)

        with col1:
            st.metric("Total de Registros", len(registros_df))
            st.metric("Registros Filtrados", len(df_filtrado))

        with col2:
            if 'TipoDato' in registros_df.columns:
                st.metric("Registros Nuevos", len(registros_df[registros_df['TipoDato'].str.upper() == 'NUEVO']))
                st.metric("Registros a Actualizar",
                          len(registros_df[registros_df['TipoDato'].str.upper() == 'ACTUALIZAR']))

        st.success("‚úÖ Diagn√≥stico completo disponible")

def mostrar_ayuda():
    """Muestra la secci√≥n de ayuda con informaci√≥n sobre el uso del tablero - VERSI√ìN COMPLETA."""
    with st.expander("‚ùì Ayuda"):
        st.markdown("### Ayuda del Tablero de Control")
        st.markdown("""
        Este tablero de control permite visualizar y gestionar el seguimiento de cronogramas con **persistencia permanente en Google Sheets**.

        #### üîó Caracter√≠sticas Principales
        - **‚úÖ Datos sincronizados en tiempo real** con Google Sheets
        - **üîí Respaldo autom√°tico** de cada cambio
        - **üë• Colaboraci√≥n simult√°nea** de m√∫ltiples usuarios
        - **üì± Acceso desde cualquier dispositivo**
        - **üîß Edici√≥n completa y detallada** de todos los campos
        - **‚ö° Validaciones autom√°ticas** y c√°lculo de plazos

        #### üìä Navegaci√≥n
        - **Dashboard**: M√©tricas generales, comparaci√≥n con metas y diagrama de Gantt
        - **Edici√≥n de Registros**: Edici√≥n individual completa con todas las secciones
        - **Alertas de Vencimientos**: Seguimiento de fechas cr√≠ticas con an√°lisis detallado
        - **Reportes**: An√°lisis avanzados con filtros personalizados

        #### üîß Funcionalidades Google Sheets
        - **Carga desde Excel**: Sube archivos Excel para sincronizar autom√°ticamente
        - **Descarga completa**: Exporta todos los datos en formato Excel
        - **Backup autom√°tico**: Cada cambio crea una copia de seguridad
        - **Edici√≥n directa**: Tambi√©n puedes editar directamente en Google Sheets

        #### üíæ Guardado Autom√°tico
        Los cambios se guardan autom√°ticamente en Google Sheets al:
        - Modificar cualquier campo de fecha
        - Cambiar estados o valores de est√°ndares
        - Aplicar validaciones de reglas de negocio
        - Calcular plazos autom√°ticamente

        #### üîÑ Validaciones Autom√°ticas Restauradas
        - **Acuerdo de compromiso**: Se actualiza autom√°ticamente al ingresar fechas
        - **An√°lisis y cronograma**: Campos dependientes se actualizan autom√°ticamente
        - **Est√°ndares**: Campos no completados se marcan como "No aplica" al ingresar fecha
        - **Publicaci√≥n**: "Disponer datos tem√°ticos" se actualiza autom√°ticamente
        - **Oficio de cierre**: Estado se cambia a "Completado" y avance al 100%
        - **Plazos**: Se calculan autom√°ticamente basados en d√≠as h√°biles

        #### üìÖ C√°lculo de Plazos Autom√°tico
        - **Plazo de an√°lisis**: 5 d√≠as h√°biles despu√©s de fecha de entrega
        - **Plazo de cronograma**: 3 d√≠as h√°biles despu√©s del plazo de an√°lisis
        - **Plazo de oficio de cierre**: 7 d√≠as h√°biles despu√©s de publicaci√≥n
        - **Considera**: Fines de semana y festivos colombianos

        #### üìä Nuevas Mejoras
        - **Gradiente de metas mejorado**: Colores de rojo a verde oscuro (0-100%), verde oscuro para >100%
        - **Diagrama de Gantt condicional**: Solo se muestra cuando hay filtros espec√≠ficos aplicados
        - **Mensaje informativo**: Gu√≠a al usuario a seleccionar filtros para ver el Gantt

        #### üÜò Soporte
        Para configuraci√≥n inicial o problemas t√©cnicos:
        - üìã Consulta las [Instrucciones de Configuraci√≥n](https://github.com/tu-repo/INSTRUCCIONES_CONFIGURACION.md)
        - üîß Usa el panel "Configuraci√≥n Google Sheets" en la barra lateral
        - üîÑ Utiliza el bot√≥n "Reconectar" si hay problemas de conexi√≥n
        - üíæ Todos los cambios se guardan autom√°ticamente en Google Sheets
        """)

def main():
    """Funci√≥n principal completamente restaurada con todas las funcionalidades y modificaciones."""
    try:
        # ===== INICIALIZACI√ìN DEL ESTADO DE SESI√ìN =====
        if 'cambios_pendientes' not in st.session_state:
            st.session_state.cambios_pendientes = False

        if 'mensaje_guardado' not in st.session_state:
            st.session_state.mensaje_guardado = None

        # RESTAURADO: Lista de funcionarios din√°micos
        if 'funcionarios' not in st.session_state:
            st.session_state.funcionarios = []

        # ===== CONFIGURACI√ìN DE LA P√ÅGINA =====
        setup_page()
        load_css()

        # ===== T√çTULO Y ESTADO =====
        st.markdown('<div class="title">üìä Tablero de Control de Seguimiento de Cronogramas</div>',
                    unsafe_allow_html=True)
        
        # Mostrar estado de Google Sheets
        st.markdown("### üîó Estado de Google Sheets")
        col1, col2 = st.columns([3, 1])
        
        with col1:
            st.info("üîÑ Datos sincronizados con Google Sheets en tiempo real")
        
        with col2:
            if st.button("üîÑ Reconectar"):
                # Limpiar cache y reconectar
                if 'sheets_manager' in st.session_state:
                    del st.session_state.sheets_manager
                st.rerun()

        # ===== SIDEBAR RESTAURADO =====
        # Configuraci√≥n de Google Sheets
        mostrar_configuracion_sheets()
        
        # Carga de archivos Excel
        mostrar_carga_archivos()

        # Informaci√≥n sobre el tablero (RESTAURADA)
        st.sidebar.markdown('<div class="subtitle">Informaci√≥n</div>', unsafe_allow_html=True)
        st.sidebar.markdown("""
        <div class="info-box">
        <p><strong>Tablero de Control de Cronogramas</strong></p>
        <p><strong>‚úÖ VERSI√ìN COMPLETA CON MEJORAS</strong></p>
        <p>‚Ä¢ Gradiente de metas mejorado (rojo a verde)</p>
        <p>‚Ä¢ Diagrama de Gantt condicional</p>
        <p>‚Ä¢ Edici√≥n detallada de todos los campos</p>
        <p>‚Ä¢ Validaciones autom√°ticas completas</p>
        <p>‚Ä¢ C√°lculo de plazos autom√°tico</p>
        <p>‚Ä¢ Guardado inteligente en Google Sheets</p>
        <p>‚Ä¢ Sistema de funcionarios din√°mico</p>
        <p>‚Ä¢ Alertas de vencimiento detalladas</p>
        </div>
        """, unsafe_allow_html=True)

        # ===== CARGA DE DATOS =====
        with st.spinner("üìä Cargando datos desde Google Sheets..."):
            registros_df, meta_df = cargar_datos()

        # Verificar si los DataFrames est√°n vac√≠os
        if registros_df.empty:
            st.warning("‚ö†Ô∏è No hay datos de registros en Google Sheets.")
            
            # Opciones para el usuario
            col1, col2, col3 = st.columns(3)
            with col1:
                st.markdown("**üìÅ Subir Excel**")
                st.markdown("Usar el panel lateral para cargar datos")
            with col2:
                st.markdown("**‚ûï Editar Google Sheets**")
                st.markdown("Agregar datos directamente en la hoja")
            with col3:
                st.markdown("**üîß Configurar**")
                st.markdown("Verificar credenciales y permisos")
            
            # Crear estructura m√≠nima para que la app funcione
            registros_df = pd.DataFrame(columns=[
                'Cod', 'Entidad', 'TipoDato', 'Nivel Informaci√≥n ',
                'Acuerdo de compromiso', 'An√°lisis y cronograma',
                'Est√°ndares', 'Publicaci√≥n', 'Fecha de entrega de informaci√≥n',
                'Plazo de an√°lisis', 'Plazo de cronograma', 'Plazo de oficio de cierre',
                'Funcionario', 'Frecuencia actualizacion ', 'Estado', 'Observaci√≥n'
            ])
        else:
            st.success(f"‚úÖ {len(registros_df)} registros cargados exitosamente desde Google Sheets")

        # ===== ASEGURAR COLUMNAS REQUERIDAS =====
        columnas_requeridas = [
            'Cod', 'Entidad', 'TipoDato', 'Acuerdo de compromiso',
            'An√°lisis y cronograma', 'Est√°ndares', 'Publicaci√≥n',
            'Nivel Informaci√≥n ', 'Fecha de entrega de informaci√≥n',
            'Plazo de an√°lisis', 'Plazo de cronograma', 'Plazo de oficio de cierre',
            'Funcionario', 'Frecuencia actualizacion ', 'Estado', 'Observaci√≥n',
            # CAMPOS RESTAURADOS
            'Suscripci√≥n acuerdo de compromiso', 'Entrega acuerdo de compromiso',
            'Actas de acercamiento y manifestaci√≥n de inter√©s',
            'Gestion acceso a los datos y documentos requeridos ',
            'An√°lisis de informaci√≥n', 'Cronograma Concertado',
            'Seguimiento a los acuerdos',
            'Registro (completo)', 'ET (completo)', 'CO (completo)', 
            'DD (completo)', 'REC (completo)', 'SERVICIO (completo)',
            'Est√°ndares (fecha programada)', 'Fecha de publicaci√≥n programada',
            'Disponer datos tem√°ticos', 'Cat√°logo de recursos geogr√°ficos',
            'Oficios de cierre', 'Fecha de oficio de cierre',
            'Resultados de orientaci√≥n t√©cnica', 'Verificaci√≥n del servicio web geogr√°fico',
            'Verificar Aprobar Resultados', 'Revisar y validar los datos cargados en la base de datos',
            'Aprobaci√≥n resultados obtenidos en la rientaci√≥n'
        ]

        for columna in columnas_requeridas:
            if columna not in registros_df.columns:
                registros_df[columna] = ''

        # ===== APLICAR VALIDACIONES Y C√ÅLCULOS =====
        with st.spinner("üîß Aplicando validaciones y calculando plazos..."):
            # Aplicar reglas de negocio
            registros_df = validar_reglas_negocio(registros_df)

            # Actualizar plazos autom√°ticamente
            registros_df = actualizar_plazo_analisis(registros_df)
            registros_df = actualizar_plazo_cronograma(registros_df)
            registros_df = actualizar_plazo_oficio_cierre(registros_df)

        # Procesar las metas
        metas_nuevas_df, metas_actualizar_df = procesar_metas(meta_df)

        # Agregar columnas calculadas
        registros_df['Porcentaje Avance'] = registros_df.apply(calcular_porcentaje_avance, axis=1)
        registros_df['Estado Fechas'] = registros_df.apply(verificar_estado_fechas, axis=1)

        # ===== MOSTRAR VALIDACIONES (RESTAURADO) =====
        with st.expander("üîç Validaci√≥n de Reglas de Negocio"):
            st.markdown("### Estado de Validaciones")
            st.info("""
            **Reglas aplicadas autom√°ticamente:**
            1. ‚úÖ Si 'Entrega acuerdo de compromiso' no est√° vac√≠o ‚Üí 'Acuerdo de compromiso' = SI
            2. ‚úÖ Si 'An√°lisis y cronograma' tiene fecha ‚Üí 'An√°lisis de informaci√≥n' = SI
            3. ‚úÖ Al introducir fecha en 'Est√°ndares' ‚Üí campos no completos = "No aplica"
            4. ‚úÖ Si introduce fecha en 'Publicaci√≥n' ‚Üí 'Disponer datos tem√°ticos' = SI
            5. ‚úÖ Para 'Fecha de oficio de cierre' ‚Üí requiere etapa de Publicaci√≥n completada
            6. ‚úÖ Al introducir 'Fecha de oficio de cierre' ‚Üí Estado = "Completado" y avance = 100%
            7. ‚úÖ Plazos calculados autom√°ticamente considerando d√≠as h√°biles y festivos
            
            **üÜï Nuevas mejoras implementadas:**
            8. ‚úÖ Gradiente de metas mejorado: rojo (0%) ‚Üí verde oscuro (100%+)
            9. ‚úÖ Diagrama de Gantt condicional: solo con filtros espec√≠ficos
            """)
            mostrar_estado_validaciones(registros_df, st)

        # ===== CREAR PESTA√ëAS =====
        tab1, tab2, tab3, tab4 = st.tabs([
            "üìä Dashboard", 
            "‚úèÔ∏è Edici√≥n de Registros", 
            "‚ö†Ô∏è Alertas de Vencimientos", 
            "üìã Reportes"
        ])
     
        # ===== TAB 1: DASHBOARD (COMPLETO RESTAURADO CON MODIFICACIONES) =====
        with tab1:
            st.markdown("### üîç Filtros")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                # Filtro por entidad
                entidades = ['Todas'] + sorted([e for e in registros_df['Entidad'].unique().tolist() if e])
                entidad_seleccionada = st.selectbox('Entidad', entidades, key="dash_entidad")
            
            with col2:
                # Filtro por funcionario (RESTAURADO)
                funcionarios = ['Todos']
                if 'Funcionario' in registros_df.columns:
                    funcionarios_unicos = [f for f in registros_df['Funcionario'].dropna().unique().tolist() if f]
                    funcionarios += sorted(funcionarios_unicos)
                funcionario_seleccionado = st.selectbox('Funcionario', funcionarios, key="dash_funcionario")
            
            with col3:
                # Filtro por tipo de dato
                tipos_dato = ['Todos'] + sorted([t for t in registros_df['TipoDato'].dropna().unique().tolist() if t])
                tipo_dato_seleccionado = st.selectbox('Tipo de Dato', tipos_dato, key="dash_tipo")
            
            with col4:
                # Filtro por nivel de informaci√≥n dependiente de entidad (RESTAURADO)
                if entidad_seleccionada != 'Todas':
                    niveles_entidad = registros_df[registros_df['Entidad'] == entidad_seleccionada]['Nivel Informaci√≥n '].dropna().unique().tolist()
                    niveles_entidad = [n for n in niveles_entidad if n]
                    niveles = ['Todos'] + sorted(niveles_entidad)
                    nivel_seleccionado = st.selectbox('Nivel de Informaci√≥n', niveles, key="dash_nivel")
                else:
                    nivel_seleccionado = 'Todos'
            
            # Aplicar filtros
            df_filtrado = registros_df.copy()
            
            if entidad_seleccionada != 'Todas':
                df_filtrado = df_filtrado[df_filtrado['Entidad'] == entidad_seleccionada]
            
            if funcionario_seleccionado != 'Todos' and 'Funcionario' in df_filtrado.columns:
                df_filtrado = df_filtrado[df_filtrado['Funcionario'] == funcionario_seleccionado]
            
            if tipo_dato_seleccionado != 'Todos':
                df_filtrado = df_filtrado[df_filtrado['TipoDato'].str.upper() == tipo_dato_seleccionado.upper()]
            
            if nivel_seleccionado != 'Todos':
                df_filtrado = df_filtrado[df_filtrado['Nivel Informaci√≥n '] == nivel_seleccionado]
            
            st.markdown("---")
            
            # Mostrar dashboard completo CON PAR√ÅMETROS DE FILTROS PARA GANTT
            mostrar_dashboard(df_filtrado, metas_nuevas_df, metas_actualizar_df, registros_df,
                            entidad_seleccionada, funcionario_seleccionado, nivel_seleccionado)

        # ===== TAB 2: EDICI√ìN (FUNCIONALIDAD COMPLETA RESTAURADA) =====
        with tab2:
            # Llamar a la funci√≥n de edici√≥n completamente restaurada
            registros_df = mostrar_edicion_registros(registros_df)

        # ===== TAB 3: ALERTAS (FUNCIONALIDAD COMPLETA RESTAURADA) =====
        with tab3:
            st.markdown("---")
            mostrar_alertas_vencimientos(registros_df)

        # ===== TAB 4: REPORTES (FUNCIONALIDAD COMPLETA RESTAURADA) =====
        with tab4:
            st.markdown("### üîç Filtros de Reportes")
            
            # Primera fila de filtros
            col1, col2, col3 = st.columns(3)
            
            with col1:
                tipos_dato_reporte = ['Todos'] + sorted([t for t in registros_df['TipoDato'].dropna().unique().tolist() if t])
                tipo_dato_reporte = st.selectbox('Tipo de Dato', tipos_dato_reporte, key="reporte_tipo")
            
            with col2:
                acuerdo_opciones = ['Todos', 'Suscrito', 'No Suscrito']
                acuerdo_filtro = st.selectbox('Acuerdo de Compromiso', acuerdo_opciones, key="reporte_acuerdo")
            
            with col3:
                analisis_opciones = ['Todos', 'Completado', 'No Completado']
                analisis_filtro = st.selectbox('An√°lisis y Cronograma', analisis_opciones, key="reporte_analisis")
            
            # Segunda fila de filtros
            col4, col5, col6 = st.columns(3)
            
            with col4:
                estandares_opciones = ['Todos', 'Completado', 'No Completado']
                estandares_filtro = st.selectbox('Est√°ndares', estandares_opciones, key="reporte_estandares")
            
            with col5:
                publicacion_opciones = ['Todos', 'Completado', 'No Completado']
                publicacion_filtro = st.selectbox('Publicaci√≥n', publicacion_opciones, key="reporte_publicacion")
            
            with col6:
                finalizado_opciones = ['Todos', 'Finalizado', 'No Finalizado']
                finalizado_filtro = st.selectbox('Finalizado', finalizado_opciones, key="reporte_finalizado")
            
            st.markdown("---")
            
            # Mostrar reportes completos
            mostrar_reportes(registros_df, tipo_dato_reporte, acuerdo_filtro, analisis_filtro, 
                           estandares_filtro, publicacion_filtro, finalizado_filtro)

        # ===== SECCIONES ADICIONALES RESTAURADAS =====
        
        # Diagn√≥stico de datos (COMPLETO)
        mostrar_diagnostico(registros_df, meta_df, metas_nuevas_df, metas_actualizar_df, df_filtrado)

        # Ayuda completa (RESTAURADA)
        mostrar_ayuda()

        # ===== FOOTER CON INFORMACI√ìN =====
        st.markdown("---")
        st.markdown("### üìä Resumen del Sistema")
        
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric("üìù Total Campos", len(registros_df.columns))
        
        with col2:
            total_con_funcionario = len(registros_df[registros_df['Funcionario'].notna() & (registros_df['Funcionario'] != '')])
            st.metric("üë• Con Funcionario", total_con_funcionario)
        
        with col3:
            en_proceso = len(registros_df[registros_df['Estado'].isin(['En proceso', 'En proceso oficio de cierre'])])
            st.metric("‚öôÔ∏è En Proceso", en_proceso)
        
        with col4:
            ultima_actualizacion = datetime.now().strftime("%d/%m/%Y %H:%M")
            st.metric("üîÑ √öltima Actualizaci√≥n", ultima_actualizacion)

        # Informaci√≥n de versi√≥n CON MEJORAS
        st.info("""
        üéâ **Tablero de Control - Versi√≥n Completa con Mejoras**
        
        ‚úÖ Todas las funcionalidades de edici√≥n han sido restauradas
        ‚úÖ Sistema de validaciones completo
        ‚úÖ C√°lculo autom√°tico de plazos con d√≠as h√°biles
        ‚úÖ Gesti√≥n din√°mica de funcionarios
        ‚úÖ Guardado inteligente en Google Sheets
        ‚úÖ Alertas de vencimiento detalladas
        ‚úÖ Reportes avanzados con filtros
        
        üÜï **Mejoras Implementadas:**
        ‚úÖ Gradiente de metas mejorado: rojo (0%) ‚Üí verde oscuro (100%+)
        ‚úÖ Diagrama de Gantt condicional: se muestra solo con filtros espec√≠ficos
        ‚úÖ Mensaje informativo para guiar al usuario sobre el Gantt
        """)

    except Exception as e:
        st.error(f"‚ùå Error cr√≠tico: {str(e)}")
        
        # Informaci√≥n detallada del error para debugging
        import traceback
        with st.expander("üîç Detalles del Error (para debugging)"):
            st.code(traceback.format_exc())
        
        st.markdown("### üÜò Soluci√≥n de Problemas")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **üîß Problemas Comunes:**
            - Configuraci√≥n de Google Sheets incorrecta
            - Credenciales faltantes o incorrectas
            - Estructura de datos incorrecta en Google Sheets
            - Problemas de conexi√≥n a internet
            """)
        
        with col2:
            st.markdown("""
            **üîÑ Acciones Recomendadas:**
            - Usar el bot√≥n "Reconectar" arriba
            - Verificar configuraci√≥n en el panel lateral
            - Revisar permisos del service account
            - Consultar las instrucciones de configuraci√≥n
            """)
        
        # Bot√≥n de recuperaci√≥n
        if st.button("üîÑ Intentar Recuperaci√≥n", type="primary"):
            # Limpiar estado y recargar
            for key in list(st.session_state.keys()):
                if key.startswith(('sheets_', 'registros_', 'meta_')):
                    del st.session_state[key]
            st.rerun()

if __name__ == "__main__":
    main()
